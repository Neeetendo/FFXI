hastetype=1
hastesambatype=0
enableautora = true
autora = false
default_ws = "Last Stand"
customincludes=false
--print(world.weather_element)

function get_sets()
	mote_include_version = 2
	include('Mote-Include.lua')
	send_command('gs enable all')
end

function job_setup()
	state.Mainqd	= M{['description']='Primary Shot', 'Light Shot', 'Earth Shot', 'Water Shot', 'Wind Shot', 'Fire Shot', 'Ice Shot', 'Thunder Shot', 'Dark Shot'}
	state.Altqd		= M{['description']='Secondary Shot', 'Dark Shot', 'Earth Shot', 'Water Shot', 'Wind Shot', 'Fire Shot', 'Ice Shot', 'Thunder Shot', 'Light Shot'}
	state.UseAltqd	= M(false, 'Use Secondary Shot')
	state.Currentqd	= M{['description']='Current Quick Draw', 'Main', 'Alt'}
	-- Whether to use Luzaf's Ring [//gs c toggle LuzafRing]
	state.LuzafRing	= M(false, "Luzaf's Ring")
	-- Whether to use Chasseur's Bottes +1 [//gs c toggle Bottes]
	state.Bottes	= M(false, "Chasseur's Bottes +1")
	-- Whether a warning has been given for low ammo
	state.warned	= M(false)
    elemental_ws	= S{'Aeolian Edge', 'Leaden Salute', 'Wildfire'}
	define_roll_values()
end

function user_setup()
	state.OffenseMode:options('Normal', 'Acc', 'AccExtreme')
	state.RangedMode:options('Normal', 'Acc', 'AccExtreme')
	state.hastemode	= M{['description'] = 'Haste Mode'}
	state.hastemode:options('NoHaste','HasteI','HasteII','Capped')
	state.flurrymode = M{['description'] = 'Flurry Mode'}
	state.flurrymode:options('Flurry','FlurryII')
	state.rangetype	= M{['description'] = 'Ranged Type'}
	state.rangetype:options('Fomalhaut','Ataktos')
	state.cpmode	= M(false, 'CP Mode')
	state.autows	= M(false, 'AutoWS')
	state.idlemode	= M{['description']="Idle Mode",'Normal'}
    state.PhysicalDefenseMode:options('PDT')
    state.MagicalDefenseMode:options('MDT')
    state.WeaponskillMode:options('Normal', 'Acc')
	
	gear.RAbullet 	= "Chrono Bullet"
	gear.WSbullet 	= "Chrono Bullet"
	gear.MAbullet 	= "Orichalc. Bullet"

		---.Key Binds.---
	send_command('bind f2 input /shoot <t>')
	send_command('bind f3 ws LastStand')
	send_command('bind f4 ws LeadenSalute')
	send_command('bind f5 ws Wildfire')
	send_command('bind f6 ws SavageBlade')
	send_command('bind f7 ws Evisceration')

	-- CTRL
	send_command('bind ^` gs c cycle hastemode')
	send_command('bind ^q gs c rangetype')
	send_command('bind ^a gs c cycle flurrymode')
    send_command('bind ^1 gs c qd')
    send_command('bind ^2 gs c cycle mainqd')
    send_command('bind ^3 gs c toggle usealtqd')
    send_command('bind ^4 gs c cycle altqd')
	
	-- ALT
    send_command('bind !` input /ma "Bolter\'s Roll" <me>')
--	send_command('bind f7 gs c set autows')
--	send_command('bind != gs c toggle CapacityMode')
		---.Key Binds End.---

	select_default_macro_book()
	set_lockstyle()
end

function user_unload()
	send_command('unbind f1')
	send_command('unbind f2')
	send_command('unbind f3')
	send_command('unbind f4')
	send_command('unbind f5')
	send_command('unbind f6')
	send_command('unbind f7')
	send_command('unbind f8')
	send_command('unbind ^`')
	send_command('unbind ^z')
	send_command('unbind ^x')
	send_command('unbind ^c')
	send_command('unbind ^q')
	send_command('unbind ^a')
end

function init_gear_sets()
	------------------------------------------------------------------------------------------------
	---------------------------------------- Camulus's Mantle --------------------------------------
	------------------------------------------------------------------------------------------------
	
	Camulus												= {}
	Camulus.DW											= { name="Camulus's Mantle", augments={'DEX+20','Accuracy+20 Attack+20','Accuracy+10','"Dual Wield"+10','Phys. dmg. taken-10%',}}
	Camulus.DA											= { name="Camulus's Mantle", augments={'DEX+20','Accuracy+20 Attack+20','Accuracy+10','"Dbl.Atk."+10','Phys. dmg. taken-10%',}}
	Camulus.RA											= { name="Camulus's Mantle", augments={'AGI+20','Rng.Acc.+20 Rng.Atk.+20','Rng.Acc.+10','"Store TP"+10','Phys. dmg. taken-10%',}}
	Camulus.STRWS										= { name="Camulus's Mantle", augments={'STR+20','Accuracy+20 Attack+20','STR+10','Weapon skill damage +10%','Phys. dmg. taken-10%',}}
	Camulus.AGIWS										= { name="Camulus's Mantle", augments={'AGI+20','Rng.Acc.+20 Rng.Atk.+20','AGI+10','Weapon skill damage +10%','Phys. dmg. taken-10%',}}
	Camulus.MagicWS										= { name="Camulus's Mantle", augments={'AGI+20','Mag. Acc+20 /Mag. Dmg.+20','AGI+10','Weapon skill damage +10%','Phys. dmg. taken-10%',}}
	Camulus.Crit										= { name="Camulus's Mantle", augments={'DEX+20','Accuracy+20 Attack+20','DEX+10','Crit.hit rate+10',}}
	Camulus.CritRA										= { name="Camulus's Mantle", augments={'AGI+20','Rng.Acc.+20 Rng.Atk.+20','AGI+10','Crit.hit rate+10','Phys. dmg. taken-10%',}}
	Camulus.Snapshot									= { name="Camulus's Mantle", augments={'HP+60','Eva.+20 /Mag. Eva.+20','Mag. Evasion+10','"Snapshot"+10','Magic dmg. taken-10%',}}
	Camulus.QDSTP										= { name="Camulus's Mantle", augments={'AGI+20','Mag. Acc+20 /Mag. Dmg.+20','Mag. Acc.+10','"Store TP"+10','Phys. dmg. taken-10%',}}
	Camulus.QDMAB										= {}
	Camulus.FC											= { name="Camulus's Mantle", augments={'HP+60','Eva.+20 /Mag. Eva.+20','Mag. Evasion+10','"Fast Cast"+10',}}
	
	------------------------------------------------------------------------------------------------
	---------------------------------------- Utility Sets ------------------------------------------
	------------------------------------------------------------------------------------------------	
	
	sets.cpmode											= { back		="Mecisto. Mantle"}
	sets.alt											= {}
	sets.rangetype										= {}
	sets.rangetype.None									= {}
	sets.rangetype.Fomalhaut							= { range		="Fomalhaut"}
	sets.rangetype.Ataktos								= { range		="Ataktos"}
	sets.bullets										= { ammo		=gear.RAbullet,}
	sets.bullets.Racc									= { ammo		=gear.RAbullet,}
	
	------------------------------------------------------------------------------------------------
	---------------------------------------- Precast Sets ------------------------------------------
	------------------------------------------------------------------------------------------------

	sets.precast.JA['Snake Eye']						= { legs		="Lanun Trews +3"}
	sets.precast.JA['Wild Card']						= { feet		="Lanun Bottes +3"}
	sets.precast.JA['Random Deal']						= { body		="Lanun Frac +3"}
	sets.precast.CorsairRoll							= {
															main		="Rostam",
															range		="Compensator",
															head		="Lanun Tricorne +3",
															body		="Malignance Tabard",
															hands		="Chasseur's Gants +2",
															legs		="Desultor Tassets",
															feet		="Malignance Boots",
															neck		="Regal Necklace",
															waist		="Flume Belt +1",
															left_ear	="Genmei Earring",
															right_ear	="Eabani Earring",
															left_ring	="Luzaf's Ring",
															right_ring	="Defending Ring",
															back		=Camulus.Snapshot}
	sets.precast.JA['Double-Up']						= { left_ring	="Luzaf's Ring"}
	sets.precast.CorsairRoll["Caster's Roll"]			= set_combine(sets.precast.CorsairRoll, {legs="Chas. Culottes +2"})
	sets.precast.CorsairRoll["Courser's Roll"]			= set_combine(sets.precast.CorsairRoll, {feet="Chass. Bottes +1"})
--	sets.precast.CorsairRoll["Blitzer's Roll"]			= set_combine(sets.precast.CorsairRoll, {head="Chass. Tricorne +1"})
	sets.precast.CorsairRoll["Tactician's Roll"]		= set_combine(sets.precast.CorsairRoll, {body="Chasseur's Frac +1"})
	sets.precast.CorsairRoll["Allies' Roll"]			= set_combine(sets.precast.CorsairRoll, {hands="Chasseur's Gants +1"})
	sets.precast.LuzafRing								= {	right_ring	="Luzaf's Ring"}
	sets.precast.Bottes									= {	feet		="Chasseur's Bottes +1"}
	sets.precast.FoldDoubleBust							= {	hands		="Lanun Gants +1"}
	sets.precast.CorsairShot							= {
															ammo		="Animikii Bullet",
															head		="Nyame Helm",
															body		="Lanun Frac +3",
															hands		="Carmine Fin. Ga. +1",
															legs		="Nyame Flanchard",
															feet		="Chass. Bottes +2",
															neck		="Baetyl Pendant",
															waist		="Eschan Stone",
															left_ear	="Friomisi Earring",
															right_ear	="Crematio Earring",
															left_ring	="Dingir Ring",
															right_ring	="Fenrir Ring +1",
															back		=Camulus.MagicWS}
	sets.precast.Waltz									= {}
	sets.precast.Waltz['Healing Waltz']					= {}
	sets.precast.FC										= {
															head		=HerculeanHead.FC,		--14
															body		="Taeon Tabard",		--9
															hands		="Leyline Gloves",		--8
															legs		=HerculeanLegs.FC,		--6
															feet		=HerculeanFeet.FC,		--6
															neck		="Baetyl Pendant",		--4
															waist		="",
															left_ear	="Loquacious Earring",	--2
															right_ear	="Etiolation Earring",	--1
															left_ring	="Kishar Ring",			--4
															right_ring	="Weatherspoon Ring",	--5
															back		=Camulus.FC}
	sets.precast.FC.Utsusemi							= set_combine(sets.precast.FC, {body="Passion Jacket",neck="Magoraga Beads",})

	--No Flurry (S:60)--
	sets.precast.RA										= {
															ammo		=gear.RAbullet,
															head		="Chass. Tricorne +1",
															body		="Oshosi Vest +1",
															hands		="Carmine Finger Gauntlets +1",
															legs		="Laksa. Trews +3",
															feet		="Meg. Jam. +2",
															neck		="Iskur Gorget",
															waist		="Yemaya Belt",
															left_ear	="Telos Earring",
															right_ear	="Dedition Earring",
															left_ring	="Dingir Ring",
															right_ring	="Crepuscular Ring",
															back		=Camulus.Snapshot}
	
	--Flurry Set (S:45)--
	sets.precast.RA.Flurry								= set_combine(sets.precast.RA, {
															legs		="Adhemar Kecks",
															feet		="Pursuer's Gaiters"})

	--Flurry 2 Set (S:30)-- 
	sets.precast.RA.Flurry2								= set_combine(sets.precast.RA.Flurry, {
															body		="Laksa. Frac +3",})
	
	------------------------------------------------------------------------------------------------
	---------------------------------------- Midcast Sets ------------------------------------------
	------------------------------------------------------------------------------------------------
	
	sets.midcast.RA										= {
															ammo		=gear.RAbullet,
															head		="Malignance Chapeau",
															body		="Ikenga's Vest",
															hands		="Malignance Gloves",
															legs		="Chas. Culottes +2",
															feet		="Ikenga's Clogs",
															neck		="Iskur Gorget",
															waist		="Yemaya Belt",
															left_ear	="Telos Earring",
															right_ear	="Crep. Earring",
															left_ring	="Dingir Ring",
															right_ring	="Crepuscular Ring",
															back		=Camulus.RA}
	sets.midcast.RA.Acc									= set_combine(sets.midcast.RA, {
															head		="Meghanada Visor +2",
															body		="Meg. Cuirie +2",
															hands		="Mummu Wrists +2",
															legs		="Mummu Kecks +2",
															feet		="Osh. Leggings +1",
															waist		="K. Kachina Belt +1",
															left_ear	="Odr Earring",
															right_ear	="Crep. Earring",
															right_ring	="Mummu Ring",
															back		=Camulus.CritRA})
	sets.midcast.RA.AccExtreme							= set_combine(sets.midcast.RA.Acc, {})
	sets.midcast.FastRecast								= {}
	sets.midcast.Utsusemi								= {}
	
	------------------------------------------------------------------------------------------------
	------------------------------------ Weaponskill Sets ------------------------------------------
	------------------------------------------------------------------------------------------------

	sets.precast.WS										= {
															head		="Nyame Helm",
															body		="Nyame Mail",
															hands		="Nyame Gauntlets",
															legs		="Nyame Flanchard",
															feet		="Nyame Sollerets",
															neck		="Rep. Plat. Medal",
															waist		="Sailfi Belt +1",
															left_ear	="Ishvara Earring",
															right_ear	="Moonshade Earring",
															left_ring	="Shukuyu Ring",
															right_ring	="Regal Ring",
															back		=Camulus.STRWS}
    sets.precast.WS.Acc									= set_combine(sets.precast.WS, {})
															
										------- Marksmanship -------
	-- Last Stand (AGI 73%-85%)
	sets.precast.WS['Last Stand']						= set_combine(sets.precast.WS, {
															ammo		=gear.RAbullet,
															body		="Ikenga's Vest",
															hands		="Chasseur's Gants +2",
															feet		="Lanun Bottes +3",
															neck		="Fotia Gorget",
															waist		="Fotia Belt",
															left_ring	="Dingir Ring",
															back		=Camulus.AGIWS})
	sets.precast.WS['Last Stand'].Acc					= set_combine(sets.precast.WS['Last Stand'], {})
	sets.precast.WS['Last Stand'].AccExtreme			= set_combine(sets.precast.WS['Last Stand'].Acc, {right_ring="Cacoethic Ring +1"})
	
	-- Leaden Salute (AGI 100%)
	sets.precast.WS['Leaden Salute']					= set_combine(sets.precast.WS, {
															ammo		=gear.MAbullet,
															head		="Pixie Hairpin +1",
															body		="Lanun Frac +3",
															feet		="Lanun Bottes +3",
															neck		="Baetyl Pendant",
															waist		="K. Kachina Belt +1",
															left_ear	="Friomisi Earring",
															left_ring	="Dingir Ring",
															right_ring	="Archon Ring",
															back		=Camulus.MagicWS})
	sets.precast.WS['Leaden Salute'].Acc				= set_combine(sets.precast.WS['Leaden Salute'])

	-- Wildfire (AGI 60%)
	sets.precast.WS['Wildfire']							= set_combine(sets.precast.WS, {
															ammo		=gear.MAbullet,
															head		="Nyame Helm",
															body		="Lanun Frac +3",
															feet		="Lanun Bottes +3",
															neck		="Baetyl Pendant",
															waist		="K. Kachina Belt +1",
															left_ear	="Friomisi Earring",
															right_ear	="Crematio Earring",
															left_ring	="Dingir Ring",
															right_ring	="Fenrir Ring +1",
															back		=Camulus.MagicWS})
	sets.precast.WS['Wildfire'].Acc						= set_combine(sets.precast.WS['Wildfire'])

											------- Dagger -------
	-- Evisceration (DEX 50%)
	sets.precast.WS['Evisceration']						= set_combine(sets.precast.WS, {
															head		="Adhemar Bonnet +1",
															body		="Meg. Cuirie +2",
															hands		="Chasseur's Gants +2",
															legs		="Mummu Kecks +2",
															feet		="Mummu Gamashes +2",
															neck		="Fotia Gorget",
															waist		="Fotia Belt",
															left_ear	="Mache Earring +1",
															right_ear	="Odr Earring",
															left_ring	="Mummu Ring",
															back		=Camulus.Crit})
    sets.precast.WS['Evisceration'].Acc					= set_combine(sets.precast.WS['Evisceration'])
	
	-- Aeolian Edge (DEX 40%/INT 40%)
	sets.precast.WS['Aeolian Edge']						= set_combine(sets.precast.WS, {
															ammo		="Animikii Bullet",
															body		="Lanun Frac +3",
															feet		="Lanun Bottes +3",
															neck		="Baetyl Pendant",
															waist		="Eschan Stone",
															left_ear	="Friomisi Earring",
															left_ring	="Dingir Ring",
															right_ring	="Metamor. Ring +1",
															back		=Camulus.MagicWS})
															
	-- Cyclone (DEX 40%)														
	sets.precast.WS['Cyclone']							= sets.precast.WS['Aeolian Edge']

											------- Sword -------
	-- Savage Blade (STR 50%/MND 50%)
    sets.precast.WS['Savage Blade']						= set_combine(sets.precast.WS, {})
    sets.precast.WS['Savage Blade'].Acc					= set_combine(sets.precast.WS['Savage Blade'], {})

	-- Shining Blade (STR 40%/MND 40%)
	sets.precast.WS['Shining Blade']					= set_combine(sets.precast.WS, {
															ammo		="Animikii Bullet",
															right_ring	="Weather. Ring"})
															
	-- Seraph Blade (STR 40%/MND 40%)
	sets.precast.WS['Seraph Blade']						= set_combine(sets.precast.WS, {
															ammo		="Animikii Bullet",
															right_ring	="Weather. Ring"})
															
	-- Requiescat (MND 73%-85%)
	sets.precast.WS['Requiescat']						= set_combine(sets.precast.WS, {})
															
	------------------------------------------------------------------------------------------------
	---------------------------------------- Town Sets ---------------------------------------------
	------------------------------------------------------------------------------------------------	

	sets.farmer											= {}
	sets.crafting										= {}
--	sets.adoulinmovement								= {body="Councilor's Garb"}

	------------------------------------------------------------------------------------------------
	--------------------------------------- Idle/DT Sets -------------------------------------------
	------------------------------------------------------------------------------------------------

	sets.resting										= {}
    sets.idle											= {
															head		="Meghanada Visor +2",
															body		="Meghanada Cuirie +2",
															hands		="Meghanada Gloves +2",
															legs		="Carmine Cuisses +1",
															feet		="Meghanada Jambeaux +2",
															neck		="Bathy Choker +1",
															waist		="Flume Belt +1",
															left_ear	="Genmei Earring",
															right_ear	="Infused Earring",
															left_ring	="Paguroidea Ring",
															right_ring	="Chirich Ring +1",
															back		=Camulus.Snapshot}
    sets.defense.PDT									= {
															head		="Nyame Helm",
															body		="Nyame Mail",
															hands		="Nyame Gauntlets",
															legs		="Nyame Flanchard",
															feet		="Nyame Sollerets",
															neck		="Loricate Torque +1",
															waist		="Flume Belt +1",
															left_ear	="Tuisto Earring",
															right_ear	="Eabani Earring",
															left_ring	="Gelatinous Ring +1",
															right_ring	="Shadow Ring",
															back		="Shadow Mantle"}
    sets.defense.MDT									= set_combine(sets.defense.PDT, {
															feet		="Ahosi Leggings",
															back		=Camulus.Snapshot})

	------------------------------------------------------------------------------------------------
	---------------------------------------- Engaged Sets ------------------------------------------
	------------------------------------------------------------------------------------------------

	sets.engaged										= {
															head		="Adhemar Bonnet +1",
															body		="Adhemar Jacket +1",
															hands		="Adhemar Wristbands +1",
															legs		="Malignance Tights",
															feet		=HerculeanFeet.TA,
															neck		="Portus Collar",
															waist		="Windbuffet Belt +1",
															left_ear	="Telos Earring",
															right_ear	="Dedition Earring",
															left_ring	="Epona's Ring",
															right_ring	="Chirich Ring +1",
 															back		=Camulus.DA}
	sets.hastemode										= {}
	
	if player.sub_job=='DNC' then
				sets.TaeonDW					= {}
				sets.hastemode.NoHaste			= {
													head				=HerculeanHead.DW,
													body				="Adhemar Jacket +1",
													hands				="Floral Gauntlets",
													legs				="Carmine Cuisses +1",
													feet				="Taeon Boots",
													neck				="Portus Collar",
													waist				="Reiki Yotai",
													left_ear			="Suppanomimi",
													right_ear			="Eabani Earring",
													left_ring			="Epona's Ring",
													right_ring			="Chirich Ring +1",
													back				=Camulus.DW}
				sets.hastemode.HasteI			= set_combine(sets.hastemode.NoHaste, {head="Adhemar Bonnet +1"})
				sets.hastemode.HasteII			= set_combine(sets.hastemode.HasteI, {
													feet				=HerculeanFeet.TA,
													right_ear			="Dedition Earring"})
				sets.hastemode.Capped			= set_combine(sets.hastemode.HasteII, {
													hands				="Adhemar Wristbands +1",
													legs				="Samnuha Tights",
													waist				="Windbuffet Belt +1"})
	end
	
	if player.sub_job == 'NIN' then
				sets.TaeonDW					= {}
				sets.hastemode.NoHaste			= {
													head				="Adhemar Bonnet +1",
													body				="Adhemar Jacket +1",
													hands				="Floral Gauntlets",
													legs				="Carmine Cuisses +1",
													feet				="Taeon Boots",
													neck				="Portus Collar",
													waist				="Reiki Yotai",
													left_ear			="Suppanomimi",
													right_ear			="Dedition Earring",
													left_ring			="Epona's Ring",
													right_ring			="Chirich Ring +1",
													back				=Camulus.DW}
				sets.hastemode.HasteI			= set_combine(sets.hastemode.NoHaste, {legs="Samnuha Tights"})
				sets.hastemode.HasteII			= set_combine(sets.hastemode.NoHasteI, {
													hands				="Adhemar Wristbands +1",
													waist				="Windbuffet Belt +1"})
				sets.hastemode.Capped			= set_combine(sets.hastemode.HasteII, {
													feet				=HerculeanFeet.TA,
													back				=Camulus.DA})
	end
	
	sets.engaged.Acc									= set_combine(sets.engaged, {
															head		="Nyame Helm",
															body		="Malignance Tabard",
															hands		="Malignance Gloves",
															legs		="Chas. Culottes +2",
 															feet		="Nyame Sollerets",
															neck		="Loricate Torque +1",
 															back		=Camulus.DW})
	sets.engaged.AccExtreme								= set_combine(sets.engaged.Acc, {back=Camulus.DA})
	
	sets.buff.Doom										= {
															neck		="Nicander's Necklace",
															waist		="Gishdubar Sash",
															left_ring	={name="Eshmun's Ring", bag="wardrobe6"},
															right_ring	={name="Eshmun's Ring", bag="wardrobe7"}}
	sets.doom											= {
															neck		="Nicander's Necklace",
															waist		="Gishdubar Sash",
															left_ring	={name="Eshmun's Ring", bag="wardrobe6"},
															right_ring	={name="Eshmun's Ring", bag="wardrobe7"}}
	sets.TripleShot										= set_combine(sets.midcast.RA.Acc, {
															head		="Oshosi Mask +1",
															body		="Chasseur's Frac +2",
															hands		="Lanun Gants +3",
															legs		="Oshosi Trousers +1",
															feet		="Oshosi Leggings +1"})
end

function job_precast(spell, action, spellMap, eventArgs)
	-- Gear sets
	if (spell.type == 'CorsairRoll' or spell.english == "Double-Up") and state.LuzafRing.value then
		equip(sets.precast.LuzafRing)
	elseif spell.type == 'CorsairShot' and state.CastingMode.value == 'Resistant' then
		classes.CustomClass = 'Acc'
	end
	if (spell.type == 'CorsairShot' or spell.english == "Quick Draw") and state.Bottes.value then
		equip(sets.precast.Bottes)
	end
	if spell.english == 'Fold' and buffactive['Bust'] == 2 then
		if sets.precast.FoldDoubleBust then
			equip(sets.precast.FoldDoubleBust)
			eventArgs.handled = true
		end
	end
end

function job_post_precast(spell, action, spellMap, eventArgs)
	if state.Buff.Camouflage then
		equip(sets.buff.Camouflage)
	end
	--log_data_structure(midshot_real)
	if spell.action_type=="Ranged Attack" then
		gastra_preshot = false
		if(player.equipment.range == "Gastraphetes") then 
			gastra_preshot = true
		end
		if not midshot_real then
			if buffactive['Flurry'] then
				if state.flurrymode.value == 'FlurryII' then
					if not gastra_preshot then
						equip(sets.precast.RA.Flurry2)
					else
						equip(sets.precast.RA.Flurry2.Gastra)
					end
				else
					if not gastra_preshot then
						equip(sets.precast.RA.Flurry)
					else
						equip(sets.precast.RA.Flurry.Gastra)
					end
				end
				--add_to_chat(122,"Flurry found")
			else
					if not gastra_preshot then
						equip(sets.precast.RA)
					else
						equip(sets.precast.RA.Gastra)
					end
				--equip(sets.precast.RA.noFlurry)
				--add_to_chat(122,"No flurry")
			end
		end
	end

	if elemental_ws:contains(spell.name) then
            -- Matching double weather (w/o day conflict).
		if spell.element == world.weather_element and (get_weather_intensity() == 2 and spell.element ~= elements.weak_to[world.day_element]) then
			equip({waist="Hachirin-no-Obi"})
            -- Target distance under 1.7 yalms.
--		elseif spell.target.distance < (1.7 + spell.target.model_size) then
--			equip({waist="Orpheus's Sash"})
            -- Matching day and weather.
		elseif spell.element == world.day_element and spell.element == world.weather_element then
			equip({waist="Hachirin-no-Obi"})
            -- Target distance under 8 yalms.
--		elseif spell.target.distance < (8 + spell.target.model_size) then
--			equip({waist="Orpheus's Sash"})
            -- Match day or weather.
		elseif spell.element == world.day_element or spell.element == world.weather_element then
			equip({waist="Hachirin-no-Obi"})
		end
	end
	
	if spell.english == "Leaden Salute" and player.tp > 2251 then
		equip({right_ear="Crematio Earring"})
	end
end

-- Run after the general midcast() set is constructed.
function job_post_midcast(spell, action, spellMap, eventArgs)
	--    if state.TreasureMode.value ~= 'None' and spell.action_type == 'Ranged Attack' then
	--        equip(sets.TreasureHunter)
	--    end
	if spell.action_type == 'Ranged Attack' then
        if buffactive['Triple Shot'] then
            equip(sets.TripleShot)
		end
	end
end

function job_aftercast(spell, action, spellMap, eventArgs)
	if spell.type == 'WeaponSkill' and not spell.interrupted then
		state.Buff['Sneak Attack'] = false
		state.Buff['Trick Attack'] = false
		state.Buff['Feint'] = false
	end
	if spell.type == 'CorsairRoll' and not spell.interrupted then
		display_roll_info(spell)
	end
end

hastetbl = S{'haste','march','geo-haste','indi-haste','embrava','haste samba','aftermath','mighty guard'}
function job_buff_change(buff, gain)
	buff_lower = buff:lower()
	--print(buff_lower)
	if hastetbl:contains(buff_lower) then
		--print('buff '..buff)
		check_haste_level()
		handle_equipping_gear(player.status)
		--handle_equipping_gear(player.status)
	end
	if state.Buff[buff] ~= nil then
		if not midaction() then

			handle_equipping_gear(player.status)
		end
	end
	if buff == "doom" then
		if gain then		   
			equip(sets.buff.Doom)
			send_command('@input /p Doomed.')
			disable('left_ring','right_ring','waist','neck')
		else
			enable('left_ring','right_ring','waist','neck')
			handle_equipping_gear(player.status)
		end
	end
end

function get_custom_wsmode(spell, spellMap, defaut_wsmode)
	local wsmode
	if state.RangedMode.current == 'Normal' then 
	elseif state.RangedMode.current == "Acc" then
		wsmode = 'Acc'
	elseif state.RangedMode.current == 'AccExtreme' then
		wsmode = 'AccExtreme'
	end

	if state.Buff['Sneak Attack'] then
		wsmode = 'SA'
	end
	if state.Buff['Trick Attack'] then
		wsmode = (wsmode or '') .. 'TA'
	end
	return wsmode
end

function check_ammo(spell, action, spellMap, eventArgs)
	if player.equipment.ammo == 'empty' then
		if DefaultAmmo[player.equipment.range] then
			if player.inventory[DefaultAmmo[player.equipment.range]] then
				add_to_chat(122,"Using Default Ammo")
				equip({ammo=DefaultAmmo[player.equipment.range]})
				else
					add_to_chat(122,"Default ammo unavailable.  Leaving empty.")
				end
				else
					add_to_chat(122,"Unable to determine default ammo for current weapon.  Leaving empty.")
				end
			elseif player.inventory[player.equipment.ammo].count < 15 then
				add_to_chat(122,"Ammo '"..player.inventory[player.equipment.ammo].shortname.."' running low ("..player.inventory[player.equipment.ammo].count..")")
		end
	end

function job_handle_equipping_gear(playerStatus, eventArgs)
	-- Check for SATA when equipping gear.  If either is active, equip
	-- that gear specifically, and block equipping default gear.
	check_buff('Haste', eventArgs)
end

function check_haste_level()
	hastelevel = 0
	if buffactive[33] and hastetype==1 then
		hastelevel=hastelevel+15
		add_to_chat(122,'Haste I detected')
	elseif buffactive[33] and hastetype==2 then
		hastelevel=hastelevel+30
		add_to_chat(122,'Haste II detected')
	end
	if hastesambatype==1 then
		hastelevel=hastelevel+5
		add_to_chat(122,'Haste samba detected')
	end
	if hastesambatype==2 then
		hastelevel=hastelevel+10
		add_to_chat(122,'Haste samba (dnc) detected')
	end
	if buffactive.march ==2 then --assuming song +3 at least
		hastelevel=hastelevel+25
		--add_to_chat(122,'2 marches detected')
	elseif buffactive.march ==1 then
		hastelevel=hastelevel+15
		--add_to_chat(122,'1 march detected')
	end
	if buffactive[580] then --assuming non idris, indi/geo haste
		hastelevel=hastelevel+33
		--add_to_chat(122,'Geo Haste detected')
	end
	if buffactive['Mighty Guard'] then
		hastelevel=hastelevel+15
		--add_to_chat(122,'Mighty Guard detected')
	end
	if buffactive['Slow'] then
		hastelevel=hastelevel-15
		add_to_chat(122,'Slow Detected')
	end
	add_to_chat(122,'Haste level '..hastelevel)
	if hastelevel == 0 then
		add_to_chat(122,'Haste level set to NoHaste')
		state.hastemode:set('NoHaste')
	elseif hastelevel >= 40 then
		add_to_chat(122,'Haste level set to Capped')
		state.hastemode:set('Capped')
	elseif hastelevel >= 25 then
		add_to_chat(122,'Haste level set to HasteII')
		state.hastemode:set('HasteII')
	elseif hastelevel >= 15 then
		add_to_chat(122,'Haste level set to HasteI')
		state.hastemode:set('HasteI')
	end
end

function customize_idle_set(idleSet)
	if player.hpp < 80 then
		idleSet = set_combine(idleSet, sets.ExtraRegen)
	end
	if state.RangedMode.current == 'Normal' then 
		idleSet = set_combine(sets.midcast.RA,idleSet) 
	else 
		idleSet = set_combine(sets.midcast.RA[state.RangedMode.current],idleSet) 
	end
	if state.rangetype.value ~= "None" then idleSet = set_combine(idleSet,sets.rangetype[state.rangetype.value]) end
	if state.idlemode.value ~= "Normal" then idleSet = set_combine(idleSet,sets.idle[state.idlemode.value]) end
	if state.cpmode.current == 'on' then idleSet = set_combine(idleSet,sets.cpmode) end
	if areas.Cities:contains(world.area) and world.area:contains("Adoulin") then
		idleSet = set_combine(idleSet, sets.adoulinmovement)
	elseif  world.area:contains("Mog Garden") then
		enable('main','sub')
		idleSet = set_combine(idleSet, sets.farmer)
		--windower.send_command('input /ja Release <me>;wait 2;input /ma '..tosummon..' <me>')
	end
	return idleSet
end

mainswap = 1

function customize_melee_set(meleeSet)
	meleeSet = set_combine(meleeSet,sets.hastemode[state.hastemode.value])
	if state.RangedMode.current == 'Normal' then meleeSet = set_combine(sets.midcast.RA,meleeSet) 
	else meleeSet = set_combine(sets.midcast.RA[state.RangedMode.current],meleeSet) end

	if state.rangetype.value ~= "None" then meleeSet = set_combine(meleeSet,sets.rangetype[state.rangetype.value]) end
	if rangeswap then
		rangeswap=0
		equip(sets.rangetype[state.rangetype.value])
		if state.rangetype.value == "None" then 
			enable('ranged','ammo')
		else
			disable('ranged','ammo')
		end
	end
	if state.OffenseMode.current ~= 'Normal' then meleeSet = set_combine(meleeSet,sets.engaged[state.OffenseMode.current]) end
	if state.cpmode.current == 'on' then meleeSet = set_combine(meleeSet,sets.cpmode) end
	return meleeSet
end
function customize_resting_set(restingSet)
	if state.cpmode.current == 'on' then restingSet = set_combine(restingSet,sets.cpmode) end
	return restingSet
end

function job_update(cmdParams, eventArgs)
end
dw = 0;
dtmode = 0;
accmode = 0;
runaway = 0;
rangeswap = 0;
use_dualbox=false
statusammo = S{'Sleep Bolt','Blind Bolt','Bloody Bolt','Abrasion Bolt','Gashing Bolt','Oxidant Bolt','Acid Bolt','Kabura Arrow','Paralysis Arrow','Poison Arrow','Sleep Arrow','Spartun Bullet','Venom Bolt','Righteous Bolt','Holy Bolt','Darkling Bolt','Demon Arrow','Fire Arrow','Earth Arrow','Wind Arrow','Ice Arrow','Lightning Arrow','Water Arrow'}
priorrangedmode = 'Normal';
function job_self_command(cmdParams, eventArgs)
	command = cmdParams[1]:lower()
	if command=='hastetype' then
		if hastetype == 1 then hastetype=2 
		else hastetype = 1 end
		add_to_chat(122,'Haste '..hastetype)
		check_haste_level()
		handle_equipping_gear(player.status)
	elseif command=='shoot' then
		send_command('input /shoot <t>')
		if player.status == 'Engaged' then
			autora = true
		end
	elseif command=='setws' then
		ws_set = string.gsub(cmdParams[2],"_"," ")
		if ws_set =="Jishnus" then
			ws_set ="Jishnu's Radiance"
		end
		add_to_chat(005,'Default WS set to '..ws_set)
		default_ws = ws_set
		send_command('bind ^f6 input /ws '..ws_set..'')
	elseif command=='checkandshoot' then
		if player.status == 'Engaged' and autora == true and not midshot_real then
			send_command('input /shoot <t>')
			midshot = true
		end
	elseif command=='shootstop' then
		--print('stopping ')
		--print(autora)
		autora = false
		midshot = false
		midshot_real = false
	elseif command=='hastesambatype' then
		if hastesambatype == 0 then hastesambatype=1 
		elseif hastesambatype == 1 then hastesambatype = 2 
		else hastesambatype = 0 end
	elseif command=='rangetype' then
		enable('range','ammo')
		rangeswap=1
		send_command('gs c cycle rangetype')
		if state.rangetype.value == "Fomalhaut" then
			default_ws = "Last Stand"
			send_command('bind ^f6 input /ws "Last Stand" <t>')
		elseif state.rangetype.value == "Bow" then
			default_ws = "Jishnu's Radiance"
			send_command('bind ^f6 input /ws "Jishnu\'s Radiance" <t>')
		end
	elseif command=='ammotype' then 
		if state.rangetype.value ~= "None" then 
			atype = string.gsub(cmdParams[2],"_"," ")
			add_to_chat(122,atype)
			sets.rangetype[state.rangetype.value] = set_combine(sets.rangetype[state.rangetype.value],{ammo=atype})
			enable('ammo')
			equip(sets.rangetype[state.rangetype.value])
			disable('ammo')
			if statusammo:contains(atype) then
				if state.RangedMode.value ~= 'StatusAmmo' then 
					priorrangedmode = state.RangedMode.value 
				end
				state.RangedMode:set('StatusAmmo')
			else
				state.RangedMode:set(priorrangedmode)
			end
			add_to_chat(122,'Ranged Attack Mode set to ' .. state.RangedMode.value)
		end
	elseif command=='test' then
		print('equipping set')
		equip(sets.precast.WS["Rudra's Storm SA"])
	elseif cmdParams[1] == "switch_dualbox_binds" then
		if use_dualbox then
			send_command('alias stp_m6 gs c toggle hasteknife')
			send_command('alias stp_m7 gs c toggle mabdagger')
			use_dualbox=false
		else
			send_command('alias stp_m1 nil')
			send_command('alias stp_m2 nil')
			send_command('alias stp_m3 nil')
			send_command('alias stp_m4 nil')
			send_command('alias stp_m5 nil')
			send_command('alias stp_m6 nil')
			send_command('alias stp_m7 nil')
			send_command('alias stp_m8 nil')
			send_command('alias stp_m9 nil')
			use_dualbox=true
		end
	end
	command = cmdParams[1]:lower()
	command2 = cmdParams[2]
	if(customincludes) then 
		include('custom-commands.lua')
	end
	if cmdParams[1] == 'qd' then
		if cmdParams[2] == 't' then
			state.IgnoreTargetting:set()
		end

		local doqd = ''
		if state.UseAltqd.value == true then
			doqd = state[state.Currentqd.current..'qd'].current
			state.Currentqd:cycle()
		else
			doqd = state.Mainqd.current
		end		
		
		send_command('@input /ja "'..doqd..'" <t>')
	end
end

function display_current_job_state(eventArgs)
	local msg = 'CORコ'
	
	msg = msg .. ' :: '
	msg = msg .. '[Ranged: '..state.rangetype.current..']'
	msg = msg .. ' '
	msg = msg .. '[QD: '..state.Mainqd.current
	if state.UseAltqd.value == true then
		msg = msg .. '/'..state.Altqd.current
	end
	msg = msg .. ']'
	msg = msg .. ' '
	if state.DefenseMode.value ~= 'None' then
		msg = msg .. '[Defense: ' .. state.DefenseMode.value .. state[state.DefenseMode.value .. 'DefenseMode'].value .. ']'
	end
	add_to_chat(060, msg)

	eventArgs.handled = true
end

function check_buff(buff_name, eventArgs)
	if state.Buff[buff_name] then
		equip(sets.buff[buff_name] or {})
		eventArgs.handled = true
	end
end

function define_roll_values()
	rolls = {
		["Corsair's Roll"]   = {lucky=5, unlucky=9, bonus="Experience Points"},
		["Ninja Roll"]	   = {lucky=4, unlucky=8, bonus="Evasion"},
		["Hunter's Roll"]	= {lucky=4, unlucky=8, bonus="Accuracy"},
		["Chaos Roll"]	   = {lucky=4, unlucky=8, bonus="Attack"},
		["Magus's Roll"]	 = {lucky=2, unlucky=6, bonus="Magic Defense"},
		["Healer's Roll"]	= {lucky=3, unlucky=7, bonus="Cure Potency Received"},
		["Drachen Roll"]	  = {lucky=4, unlucky=8, bonus="Pet Magic Accuracy/Attack"},
		["Choral Roll"]	  = {lucky=2, unlucky=6, bonus="Spell Interruption Rate"},
		["Monk's Roll"]	  = {lucky=3, unlucky=7, bonus="Subtle Blow"},
		["Beast Roll"]	   = {lucky=4, unlucky=8, bonus="Pet Attack"},
		["Samurai Roll"]	 = {lucky=2, unlucky=6, bonus="Store TP"},
		["Evoker's Roll"]	= {lucky=5, unlucky=9, bonus="Refresh"},
		["Rogue's Roll"]	 = {lucky=5, unlucky=9, bonus="Critical Hit Rate"},
		["Warlock's Roll"]   = {lucky=4, unlucky=8, bonus="Magic Accuracy"},
		["Fighter's Roll"]   = {lucky=5, unlucky=9, bonus="Double Attack Rate"},
		["Puppet Roll"]	 = {lucky=3, unlucky=7, bonus="Pet Magic Attack/Accuracy"},
		["Gallant's Roll"]   = {lucky=3, unlucky=7, bonus="Defense"},
		["Wizard's Roll"]	= {lucky=5, unlucky=9, bonus="Magic Attack"},
		["Dancer's Roll"]	= {lucky=3, unlucky=7, bonus="Regen"},
		["Scholar's Roll"]   = {lucky=2, unlucky=6, bonus="Conserve MP"},
		["Naturalist's Roll"]	   = {lucky=3, unlucky=7, bonus="Enh. Magic Duration"},
		["Runeist's Roll"]	   = {lucky=4, unlucky=8, bonus="Magic Evasion"},
		["Bolter's Roll"]	= {lucky=3, unlucky=9, bonus="Movement Speed"},
		["Caster's Roll"]	= {lucky=2, unlucky=7, bonus="Fast Cast"},
		["Courser's Roll"]   = {lucky=3, unlucky=9, bonus="Snapshot"},
		["Blitzer's Roll"]   = {lucky=4, unlucky=9, bonus="Attack Delay"},
		["Tactician's Roll"] = {lucky=5, unlucky=8, bonus="Regain"},
		["Allies' Roll"]	= {lucky=3, unlucky=10, bonus="Skillchain Damage"},
		["Miser's Roll"]	 = {lucky=5, unlucky=7, bonus="Save TP"},
		["Companion's Roll"] = {lucky=2, unlucky=10, bonus="Pet Regain and Regen"},
		["Avenger's Roll"]   = {lucky=4, unlucky=8, bonus="Counter Rate"},
	}
end

function display_roll_info(spell)
	rollinfo = rolls[spell.english]
	local rollsize = (state.LuzafRing.value and 'Large') or 'Small'

	if rollinfo then
		add_to_chat(104, '[ Lucky: '..tostring(rollinfo.lucky)..' / Unlucky: '..tostring(rollinfo.unlucky)..' ] '..spell.english..': '..rollinfo.bonus..' ('..rollsize..') ')
	end
end

-- Select default macro book on initial load or subjob change.
function select_default_macro_book()
	if player.sub_job == 'DNC' then
		set_macro_page(1, 8)
	else
		set_macro_page(1, 8)
	end
end

function set_lockstyle()
	send_command('wait 2; input /lockstyleset 9')
end


require 'actions-custom'

midshot = false
function event_action(raw_actionpacket)
	local actionpacket = ActionPacket.new(raw_actionpacket)
	if not autora or not enableautora then 
		return 
	end
	
	actionstr = actionpacket:get_category_string() 

	if actionstr == 'ranged_begin' then
		--print('ranged begin')
		midshot_real=true
	end
	if actionstr == 'ranged_finish' and player.status == 'Engaged' then
		--print('ranged end')
		--send_command('wait .5;input /shoot <t>')
		--send_command('wait .6;input /shoot <t>')
		midshot=false
		midshot_real=false
		--print('autora')
		if autora and player.tp >= 1000 and state.autows.current == 'on' then
			send_command('wait 1;input /ws "'..default_ws..'" <t>;wait 3.5;gs c checkandshoot')
			--send_command('wait 1.3;input /ws "'..default_ws..'" <t>;')
		elseif autora then 
			--send_command('wait .7;input /shoot <t>')
			--send_command('wait .8;input /shoot <t>')
			--send_command('wait .9;input /shoot <t>')
			--send_command('wait .6;gs c checkandshoot')
			--send_command('wait .7;gs c checkandshoot')
			--send_command('wait .8;gs c checkandshoot')
			--send_command('wait .9;gs c checkandshoot')
			send_command('wait 1;gs c checkandshoot')
			--send_command('wait 1.1;gs c checkandshoot')
			--send_command('wait 1.3;gs c checkandshoot')
			--send_command('wait 1;gs c checkandshoot')
			--send_command('wait 1.3;gs c checkandshoot')
		end
	end
	
end
	function ActionPacket.open_raw_listener(funct)
	if not funct or type(funct) ~= 'function' then return end
	local id = windower.raw_register_event('incoming chunk',function(id, org, modi, is_injected, is_blocked)
		if id == 0x28 then
			local act_org = windower.packets.parse_action(org)
			act_org.size = org:byte(5)
			local act_mod = windower.packets.parse_action(modi)
			act_mod.size = modi:byte(5)
			return act_to_string(org,funct(act_org,act_mod))
		end
	end)
	return id
end

ActionPacket.open_raw_listener(event_action)
