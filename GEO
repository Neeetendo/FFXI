function get_sets()
    mote_include_version = 2
    include('Mote-Include.lua')
end

function job_setup()
    indi_timer = ''
    indi_duration = 180

    state.CP = M(false, "Capacity Points Mode")
    state.Auto = M(true, 'Auto Nuke')
    state.Element = M{['description']='Element','Fire','Blizzard','Aero','Stone','Thunder','Water'}

    degrade_array = {
        ['Fire'] = {'Fire','Fire II','Fire III','Fire IV','Fire V'},
        ['Ice'] = {'Blizzard','Blizzard II','Blizzard III','Blizzard IV','Blizzard V'},
        ['Wind'] = {'Aero','Aero II','Aero III','Aero IV','Aero V'},
        ['Earth'] = {'Stone','Stone II','Stone III','Stone IV','Stone V'},
        ['Lightning'] = {'Thunder','Thunder II','Thunder III','Thunder IV','Thunder V'},	
        ['Water'] = {'Water', 'Water II','Water III', 'Water IV','Water V'},
        ['Aspirs'] = {'Aspir','Aspir II','Aspir III'},}
end

function user_setup()
    state.OffenseMode:options('Normal', 'Acc')
    state.CastingMode:options('Normal', 'Seidr', 'Resistant')
    state.IdleMode:options('Normal', 'DT')

    state.WeaponLock = M(false, 'Weapon Lock')
    state.MagicBurst = M(false, 'Magic Burst')

    send_command('bind ^` input /ja "Full Circle" <me>')
    send_command('bind ^b input /ja "Blaze of Glory" <me>')
    send_command('bind ^a input /ja "Ecliptic Attrition" <me>')
    send_command('bind ^d input /ja "Dematerialize" <me>')
    send_command('bind ^c input /ja "Life Cycle" <me>')
    send_command('bind !` gs c toggle MagicBurst')
    send_command('bind f7 gs c cycleback Element')
    send_command('bind !f7 gs c cycle Element')
    send_command('bind !p input /ja "Entrust" <me>')
    send_command('bind @c gs c toggle CP')
    send_command('bind @w gs c toggle WeaponLock')

    send_command('bind ^numpad1 input /ma "Geo-Frailty" <t>')
    send_command('bind ^numpad2 input /ma "Geo-Malaise" <t>')
    send_command('bind ^numpad3 input /ma "Geo-Fade" <t>')
    send_command('bind ^numpad4 input /ma "Geo-Attunement" <t>')
    send_command('bind ^numpad5 input /ma "Geo-Torpor" <t>')

	send_command('bind !numpad0 input /ma "Cure IV" <p0>')
	send_command('bind !numpad1 input /ma "Cure IV" <p1>')
	send_command('bind !numpad2 input /ma "Cure IV" <p2>')
	send_command('bind !numpad3 input /ma "Cure IV" <p3>')
	send_command('bind !numpad4 input /ma "Cure IV" <p4>')
	send_command('bind !numpad5 input /ma "Cure IV" <p5>')

    select_default_macro_book()
    set_lockstyle()
end

function user_unload()
	send_command('unbind f2')
	send_command('unbind f3')
	send_command('unbind f5')
	send_command('unbind f5')
    send_command('unbind ^`')
    send_command('unbind ^b')
    send_command('unbind ^a')
    send_command('unbind ^d')
    send_command('unbind ^c')
    send_command('unbind !`')
    send_command('unbind ^insert')
    send_command('unbind ^delete')
    send_command('unbind !w')
    send_command('unbind !p')
    send_command('unbind ^,')
    send_command('unbind !.')
    send_command('unbind @c')
    send_command('unbind @w')
    send_command('unbind ^numpad7')
    send_command('unbind ^numpad8')
    send_command('unbind ^numpad9')
    send_command('unbind ^numpad4')
    send_command('unbind ^numpad1')
    send_command('unbind !numpad7')
    send_command('unbind !numpad8')
    send_command('unbind !numpad9')
    send_command('unbind !numpad4')
    send_command('unbind !numpad5')
    send_command('unbind !numpad6')
    send_command('unbind !numpad1')
    send_command('unbind !numpad+')
end

function init_gear_sets()
    ------------------------------------------------------------------------------------------------
    --------------------------------------- Nantosuelta Capes --------------------------------------
    ------------------------------------------------------------------------------------------------
	
	Nantosuelta									= {}
	Nantosuelta.Nuke							= { name="Nantosuelta's Cape", augments={'INT+20','Mag. Acc+20 /Mag. Dmg.+20','Mag. Acc.+10','"Mag.Atk.Bns."+10',}}
	Nantosuelta.Pet								= { name="Nantosuelta's Cape", augments={'HP+60','Eva.+20 /Mag. Eva.+20','Mag. Evasion+10','Pet: "Regen"+10',}}
	
    ------------------------------------------------------------------------------------------------
    ----------------------------------------- Precast Sets -----------------------------------------
    ------------------------------------------------------------------------------------------------

    sets.precast.JA.Bolster						= {body="Bagua Tunic +3"}
    sets.precast.JA['Full Circle']				= {head="Azimuth Hood +1"}
    sets.precast.JA['Life Cycle']				= {body="Geomancy Tunic +3"}
	sets.precast.JA['Mending Halation']			= {legs="Bagua Pants +2"}
	sets.precast.JA['Radial Arcana']			= {feet="Bagua Sandals +2"}

    sets.precast.FC								= {
													main		="Solstice",
													sub			="Sors Shield",
													range		="Dunna",
													head		="Nahtirah Hat",
													body		="Anhur Robe",
													hands		={ name="Merlinic Dastanas", augments={'"Mag.Atk.Bns."+27','"Fast Cast"+6','Mag. Acc.+13',}},
													legs		="Geomancy Pants +3",
													feet		={ name="Merlinic Crackows", augments={'Mag. Acc.+4','"Fast Cast"+6','MND+6',}},
													neck		="Voltsurge Torque",
													waist		="Witful Belt",
													left_ear	="Malignance Earring",
													right_ear	="Loquac. Earring",
													left_ring	="Kishar Ring",
													right_ring	="Lebeche Ring",
													back		="Perimede Cape"}
    sets.precast.FC['Enhancing Magic']			= set_combine(sets.precast.FC, {})
    sets.precast.FC['Elemental Magic']			= set_combine(sets.precast.FC, {hands="Bagua Mitaines +3",right_ear="Barkarole Earring"})
    sets.precast.FC.Cure						= set_combine(sets.precast.FC, {})
    sets.precast.FC.Curaga						= set_combine(sets.precast.FC, {})
    sets.precast.FC.Impact						= set_combine(sets.precast.FC, {head=empty, body="Twilight Cloak"})

    sets.precast.WS								= {}
    sets.precast.WS['Hexastrike']				= set_combine(sets.precast.WS, {})
    sets.precast.WS['Exudation']				= sets.precast.WS['Hexastrike']

    ------------------------------------------------------------------------
    ----------------------------- Midcast Sets -----------------------------
    ------------------------------------------------------------------------

    sets.midcast.FastRecast						= {}
	sets.midcast.Geomancy						= {
													main		="Solstice",
													sub			="",
													range		="Dunna",
													head		="Vanya Hood",
													body		="Bagua Tunic +3",
													hands		="Geo. Mitaines +2",
													legs		="Vanya Slops",
													feet		="Vanya Clogs",
													neck		="Incanter's Torque",
													waist		="Luminary Sash",
													left_ear	="Malignance Earring",
													right_ear	="Gwati Earring",
													left_ring	="Kishar Ring",
													right_ring	="Lebeche Ring",
													back		="Perimede Cape"}
    sets.midcast.Geomancy.Indi					= set_combine(sets.midcast.Geomancy, {
													ranged		="Dunna",
													legs		="Bagua Pants +2",
													feet		="Azimuth Gaiters"})
    sets.midcast.Cure							= {
													main		={ name="Gada", augments={'Attack+9','MND+6','Mag. Acc.+25',}},
													sub			="Sors Shield",
													head		="Vanya Hood",
													body		="Vanya Robe",
													hands		="Vanya Cuffs",
													legs		="Vanya Slops",
													feet		="Vanya Clogs",
													neck		="Incanter's Torque",
													waist		="Bishop's Sash",
													left_ear	="Malignance Earring",
													right_ear	="Meili Earring",
													left_ring	="Sirona's Ring",
													right_ring	="Lebeche Ring",
													back		="Tempered Cape +1",}
    sets.midcast.Curaga							= set_combine(sets.midcast.Cure, {})
    sets.midcast.Cursna							= set_combine(sets.midcast.Cure, {
--													hands		="Hieros Mittens",
													neck		="Debilis Medallion",
													left_ring	="Menelaus's Ring",
													right_ring	="Haoma's Ring",
													back		="Oretania's cape +1"})
    sets.midcast['Enhancing Magic']				= {
													main		={ name="Gada", augments={'Enh. Mag. eff. dur. +5','VIT+2','"Mag.Atk.Bns."+12','DMG:+5',}},
													sub			="Ammurapi Shield",	
													head		="Befouled Crown",
													body		={ name="Telchine Chas.", augments={'"Fast Cast"+4','Enh. Mag. eff. dur. +10',}},
													hands		={ name="Telchine Gloves", augments={'"Conserve MP"+4','Enh. Mag. eff. dur. +9',}},
													legs		={ name="Telchine Braconi", augments={'"Conserve MP"+1','Enh. Mag. eff. dur. +10',}},
													feet		={ name="Telchine Pigaches", augments={'Enh. Mag. eff. dur. +10',}},
													neck		="Incanter's Torque",
													waist		="Embla Sash",
													left_ear	="Mimir Earring",
													right_ear	="Andoaa Earring",
--													left_ring	="Stikini Ring",
--													right_ring	="Stikini Ring",
													back		="Perimede Cape",}	
    sets.midcast.EnhancingDuration				= set_combine(sets.midcast['Enhancing Magic'], {
													head		={ name="Telchine Cap", augments={'Mag. Evasion+25','Spell interruption rate down -7%','Enh. Mag. eff. dur. +9',}},
													body		={ name="Telchine Chas.", augments={'"Fast Cast"+4','Enh. Mag. eff. dur. +10',}},
													hands		={ name="Telchine Gloves", augments={'"Conserve MP"+4','Enh. Mag. eff. dur. +9',}},
													legs		={ name="Telchine Braconi", augments={'"Conserve MP"+1','Enh. Mag. eff. dur. +10',}},
													feet		={ name="Telchine Pigaches", augments={'Enh. Mag. eff. dur. +10',}},
													waist		="Embla Sash"})
    sets.midcast.Regen							= set_combine(sets.midcast.EnhancingDuration, {main="Bolelabunga",})
    sets.midcast.Refresh						= set_combine(sets.midcast.EnhancingDuration, {feet="Inspirited Boots",waist="Gishdubar Sash"})
    sets.midcast.Stoneskin						= set_combine(sets.midcast.EnhancingDuration, {waist="Siegel Sash",})
    sets.midcast.Aquaveil						= set_combine(sets.midcast.EnhancingDuration, {main="Vadose Rod",waist="Emphatikos Rope"})
    sets.midcast.Protect						= set_combine(sets.midcast.EnhancingDuration, {})
    sets.midcast.Protectra						= set_combine(sets.midcast.EnhancingDuration, {})
    sets.midcast.Shell							= set_combine(sets.midcast.EnhancingDuration, {})
    sets.midcast.Shellra						= set_combine(sets.midcast.EnhancingDuration, {})
    sets.midcast.MndEnfeebles					= {
													main		={ name="Gada", augments={'Attack+9','MND+6','Mag. Acc.+25',}},
													sub			="Ammurapi Shield",
													range		="Dunna",
													head		="Befouled Crown",
													body		="Geomancy Tunic +3",
													hands		="Geomancy Mitaines +3",
													legs		="Geomancy Pants +3",
													feet		="Geo. Sandals +3",
													neck		="Erra Pendant",
													waist		="Luminary Sash",
													left_ear	="Malignance Earring",
													right_ear	="Vox Earring",
													left_ring	="Kishar Ring",
													right_ring	="Sangoma Ring",
													back		=Nantosuelta.Nuke}
    sets.midcast.IntEnfeebles					= set_combine(sets.midcast.MndEnfeebles, {})
    sets.midcast['Dark Magic']					= {
													main		={ name="Gada", augments={'Attack+9','MND+6','Mag. Acc.+25',}},
													sub			="Ammurapi Shield",
													range		="Dunna",
													head		="Geomancy Galero +2",
													body		="Geomancy Tunic +3",
													hands		="Geomancy Mitaines +3",
													legs		="Geomancy Pants +3",
													feet		="Geo. Sandals +3",
													neck		="Erra Pendant",
													waist		="Luminary Sash",
													left_ear	="Malignance Earring",
													right_ear	="Digni. Earring",
													left_ring	="Kishar Ring",
													right_ring	="Sangoma Ring",
													back		=Nantosuelta.Nuke}
    sets.midcast.Drain							= set_combine(sets.midcast['Dark Magic'], {head="Bagua Galero +1",waist="Fucho-no-Obi",})
    sets.midcast.Aspir							= sets.midcast.Drain
    sets.midcast.Stun							= set_combine(sets.midcast['Dark Magic'], {})

    -- Elemental Magic sets

    sets.midcast['Elemental Magic']				= {
													main		="Daybreak",
													sub			="Ammurapi Shield",
													range		="Dunna",
													head		="Jhakri Coronal +1",
													body		="Bagua Tunic +3",
													hands		="Bagua Mitaines +3",
													legs		="Bagua Pants +2",
													feet		="Jhakri Pigaches +1",
													neck		="Saevus Pendant +1",
													waist		="Refoccilation Stone",
													left_ear	="Malignance Earring",
													right_ear	="Digni. Earring",
													left_ring	="Acumen Ring",
													right_ring	="Strendu Ring",
													back		=Nantosuelta.Nuke}
    sets.midcast['Elemental Magic'].Resistant	= set_combine(sets.midcast['Elemental Magic'], {})
    sets.midcast.GeoElem						= set_combine(sets.midcast['Elemental Magic'], {})
    sets.midcast['Elemental Magic'].Seidr		= set_combine(sets.midcast['Elemental Magic'], {body="Seidr Cotehardie"})
    sets.midcast.GeoElem.Seidr					= set_combine(sets.midcast['Elemental Magic'].Seidr, {})
    sets.midcast.Impact							= set_combine(sets.midcast['Elemental Magic'], {head=empty,body="Twilight Cloak"})

    ------------------------------------------------------------------------------------------------
    ------------------------------------------ Idle Sets -------------------------------------------
    ------------------------------------------------------------------------------------------------

    sets.idle									= {
													main		="Daybreak",
													sub			="Genmei Shield",
													range		="Dunna",
													head		="Befouled Crown",
													body		="Geomancy Tunic +3",
													hands		="Bagua Mitaines +3",
													legs		="Assiduity Pants +1",
													feet		="Geo. Sandals +3",
													neck		="Loricate Torque +1",
													waist		="Slipor Sash",
													left_ear	="Lugalbanda Earring",
													right_ear	="Moonshade Earring",
													left_ring	="Warden's Ring",
													right_ring	="Defending Ring",
													back		=Nantosuelta.Pet}
    sets.resting								= set_combine(sets.idle, {})
	sets.idle.Town								= set_combine(sets.idle, {feet="Geo. Sandals +3"})
    sets.idle.DT								= set_combine(sets.idle, {})
    sets.idle.Pet								= {
													main		="Solstice",
													sub			="Genmei Shield",
													range		="Dunna",
													head		={ name="Telchine Cap", augments={'Mag. Evasion+25','Pet: "Regen"+3','HP+44',}},
													body		={ name="Telchine Chas.", augments={'Mag. Evasion+23','Pet: "Regen"+3','HP+49',}},
													hands		="Geomancy Mitaines +3",
													legs		={ name="Telchine Braconi", augments={'Mag. Evasion+23','Pet: "Regen"+3','HP+49',}},
													feet		="Bagua Sandals +2",
													neck		="Loricate Torque +1",
													waist		="Isa Belt",
													left_ear	="Lugalbanda Earring",
													right_ear	="Moonshade Earring",
													left_ring	="Warden's Ring",
													right_ring	="Defending Ring",
													back		=Nantosuelta.Pet}
    sets.idle.DT.Pet							= sets.idle.Pet
--	Indi sets are for when an Indi-spell is active.
--	sets.idle.Indi								= set_combine(sets.idle, {})
--	sets.idle.DT.Indi							= set_combine(sets.idle.DT, {})
--	sets.idle.DT.Pet.Indi						= set_combine(sets.idle.DT.Pet, {})

    sets.defense.PDT							= sets.idle.DT
    sets.defense.MDT							= sets.idle.DT
    sets.Kiting									= {feet="Geo. Sandals +3"}
    sets.latent_refresh							= {waist="Fucho-no-Obi"}

    --------------------------------------
    -- Engaged sets
    --------------------------------------

    -- Variations for TP weapon and (optional) offense/defense modes.  Code will fall back on previous
    -- sets if more refined versions aren't defined.
    -- If you create a set with both offense and defense modes, the offense mode should be first.
    -- EG: sets.engaged.Dagger.Accuracy.Evasion

    -- Normal melee group
    sets.engaged								= {}

    --------------------------------------
    -- Custom buff sets
    --------------------------------------

    sets.magic_burst							= {left_ring="Locus Ring",right_ring="Mujin Band"}
    sets.buff.Doom								= {}
    sets.Obi									= {waist="Hachirin-no-Obi"}
    sets.CP										= {back="Mecisto. Mantle"}
end

-------------------------------------------------------------------------------------------------------------------
-- Job-specific hooks for standard casting events.
-------------------------------------------------------------------------------------------------------------------

function job_precast(spell, action, spellMap, eventArgs)
    if spellMap == 'Aspir' then
        refine_various_spells(spell, action, spellMap, eventArgs)
    elseif state.Auto.value == true then
        if spell.skill == 'Elemental Magic' and spell.english ~= 'Impact' and spellMap ~= 'GeoNuke' then
            refine_various_spells(spell, action, spellMap, eventArgs)
        end
    end
end

function job_post_precast(spell, action, spellMap, eventArgs)
    if spell.name == 'Impact' then
        equip(sets.precast.FC.Impact)
    end
end

function job_post_midcast(spell, action, spellMap, eventArgs)
    if spell.skill == 'Elemental Magic' then
        if state.MagicBurst.value then
            equip(sets.magic_burst)
            if spell.english == "Impact" then
                equip(sets.midcast.Impact)
            end
        end
        if (spell.element == world.day_element or spell.element == world.weather_element) then
            equip(sets.Obi)
        end
    end
    if spell.skill == 'Enhancing Magic' and classes.NoSkillSpells:contains(spell.english) then
        equip(sets.midcast.EnhancingDuration)
        if spellMap == 'Refresh' then
            equip(sets.midcast.Refresh)
        end
    end
end

function job_aftercast(spell, action, spellMap, eventArgs)
    if not spell.interrupted then
        if spell.english:startswith('Indi') then
            if not classes.CustomIdleGroups:contains('Indi') then
                classes.CustomIdleGroups:append('Indi')
            end
            --send_command('@timers d "'..indi_timer..'"')
            --indi_timer = spell.english
            --send_command('@timers c "'..indi_timer..'" '..indi_duration..' down spells/00136.png')
        elseif spell.skill == 'Elemental Magic' then
 --           state.MagicBurst:reset()
        end
        if spell.english == "Sleep II" then
            send_command('@timers c "Sleep II ['..spell.target.name..']" 90 down spells/00259.png')
        elseif spell.english == "Sleep" or spell.english == "Sleepga" then -- Sleep & Sleepga Countdown --
            send_command('@timers c "Sleep ['..spell.target.name..']" 60 down spells/00253.png')
        end
    elseif not player.indi then
        classes.CustomIdleGroups:clear()
    end
end


-------------------------------------------------------------------------------------------------------------------
-- Job-specific hooks for non-casting events.
-------------------------------------------------------------------------------------------------------------------

-- Called when a player gains or loses a buff.
-- buff == buff gained or lost
-- gain == true if the buff was gained, false if it was lost.
function job_buff_change(buff, gain)
    if player.indi and not classes.CustomIdleGroups:contains('Indi')then
        classes.CustomIdleGroups:append('Indi')
        handle_equipping_gear(player.status)
    elseif classes.CustomIdleGroups:contains('Indi') and not player.indi then
        classes.CustomIdleGroups:clear()
        handle_equipping_gear(player.status)
    end

    if buff == "doom" then
        if gain then
            equip(sets.buff.Doom)
            send_command('@input /p Doomed.')
             disable('left_ring','right_ring','waist')
        else
            enable('left_ring','right_ring','waist')
            handle_equipping_gear(player.status)
        end
    end

end

-- Handle notifications of general user state change.
function job_state_change(stateField, newValue, oldValue)
    if state.WeaponLock.value == true then
        disable('main','sub')
    else
        enable('main','sub')
    end
end

-------------------------------------------------------------------------------------------------------------------
-- User code that supplements standard library decisions.
-------------------------------------------------------------------------------------------------------------------

function job_get_spell_map(spell, default_spell_map)
    if spell.action_type == 'Magic' then
        if spell.skill == 'Enfeebling Magic' then
            if spell.type == 'WhiteMagic' then
                return 'MndEnfeebles'
            else
                return 'IntEnfeebles'
            end
        elseif spell.skill == 'Geomancy' then
            if spell.english:startswith('Indi') then
                return 'Indi'
            end
        elseif spell.skill == 'Elemental Magic' then
            if spellMap == 'GeoElem' then
                return 'GeoElem'
            end
        end
    end
end

function customize_idle_set(idleSet)
    if player.mpp < 51 then
        idleSet = set_combine(idleSet, sets.latent_refresh)
    end
    if state.CP.current == 'on' then
        equip(sets.CP)
        disable('back')
    else
        enable('back')
    end

    return idleSet
end

-- Called by the 'update' self-command.
function job_update(cmdParams, eventArgs)
    classes.CustomIdleGroups:clear()
    if player.indi then
        classes.CustomIdleGroups:append('Indi')
    end
end

-- Function to display the current relevant user state when doing an update.
function display_current_job_state(eventArgs)
    local c_msg = state.CastingMode.value

    local d_msg = 'None'
    if state.DefenseMode.value ~= 'None' then
        d_msg = state.DefenseMode.value .. state[state.DefenseMode.value .. 'DefenseMode'].value
    end

    local i_msg = state.IdleMode.value

    local msg = ''
    if state.MagicBurst.value then
        msg = ' Burst: On |'
    end
    if state.Auto.value then
        msg = ' Auto: On |'
    end
    if state.Kiting.value then
        msg = msg .. ' Kiting: On |'
    end

    add_to_chat(060, '| Magic: ' ..string.char(31,001)..c_msg.. string.char(31,002)..  ' |'
        ..string.char(31,004).. ' Defense: ' ..string.char(31,001)..d_msg.. string.char(31,002)..  ' |'
        ..string.char(31,008).. ' Idle: ' ..string.char(31,001)..i_msg.. string.char(31,002)..  ' |'
        ..string.char(31,002)..msg)

    eventArgs.handled = true
end

function job_self_command(cmdParams, eventArgs)
    if cmdParams[1] == 'nuke' and not midaction() then
        send_command('@input /ma "' .. state.Element.current .. ' V" <t>')
    end
end

function refine_various_spells(spell, action, spellMap, eventArgs)

    local newSpell = spell.english
    local spell_recasts = windower.ffxi.get_spell_recasts()
    local cancelling = 'All '..spell.english..' are on cooldown. Cancelling.'

    local spell_index

    if spell_recasts[spell.recast_id] > 0 then
        if spell.skill == 'Elemental Magic' and spellMap ~= 'GeoElem' then
            spell_index = table.find(degrade_array[spell.element],spell.name)
            if spell_index > 1 then
                newSpell = degrade_array[spell.element][spell_index - 1]
                send_command('@input /ma '..newSpell..' '..tostring(spell.target.raw))
                eventArgs.cancel = true
            end
        elseif spellMap == 'Aspir' then
            spell_index = table.find(degrade_array['Aspirs'],spell.name)
            if spell_index > 1 then
                newSpell = degrade_array['Aspirs'][spell_index - 1]
                send_command('@input /ma '..newSpell..' '..tostring(spell.target.raw))
                eventArgs.cancel = true
            end
        end
    end
end

-------------------------------------------------------------------------------------------------------------------
-- Utility functions specific to this job.
-------------------------------------------------------------------------------------------------------------------

-- Select default macro book on initial load or subjob change.
function select_default_macro_book()
    set_macro_page(1, 2)
end

function set_lockstyle()
    send_command('wait 2; input /lockstyleset 2')
end
