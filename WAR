function get_sets()
	mote_include_version = 2
	include('Mote-Include.lua')
	include('organizer-lib')
end

function job_setup()
	include('Mote-TreasureHunter')
	state.TreasureMode:set('None')
	state.CapacityMode = M(false, 'Capacity Point Mantle')

--	state.Buff.Souleater = buffactive.souleater or false
	state.Buff.Berserk = buffactive.berserk or false
	state.Buff.Retaliation = buffactive.retaliation or false
    
	wsList = S{ 'Savage Blade', 'Impulse Drive', 'Torcleaver', 'Ukko\'s Fury', 'Upheaval'}
	gsList = S{'Macbain', 'Kaquljaan', 'Nativus Halberd'}
	war_sub_weapons = S{"Sangarius", "Usonmunku", "Perun", "Tanmogayi +1", "Reikiko", "Digirbalag"}

	get_combat_form()
	get_combat_weapon()
end

function user_setup()
	state.OffenseMode:options('Normal', 'Mid', 'Acc')
	state.HybridMode:options('Normal', 'PDT')
	state.WeaponskillMode:options('Normal', 'Mid', 'Acc')
	state.CastingMode:options('Normal')
	state.IdleMode:options('Normal')
	state.RestingMode:options('Normal')
	state.PhysicalDefenseMode:options('PDT', 'Reraise')
	state.MagicalDefenseMode:options('MDT')
    
	war_sj = player.sub_job == 'WAR' or false
	state.drain = M(false)

	send_command('bind f2 ws Upheaval')
	send_command('bind f3 ws Ukko\'sFury')
	send_command('bind f4 ws SteelCyclone')
	send_command('bind f5 ws FullBreak')
	send_command('bind f6 ws SavageBlade')
	send_command('bind f7 ws ImpulseDrive')

	-- CTRL
	send_command('bind ^` input /ja "Tomahawk" <t>')
    send_command('bind ^1 input /ja "Warcry" <me>')
    send_command('bind ^2 input /ja "Berserk" <me>')
    send_command('bind ^3 input /ja "Aggressor" <me>')
    send_command('bind ^4 input /ja "Blood Rage" <me>')
    send_command('bind ^5 input /ja "Retaliation" <me>')
    send_command('bind ^6 input /ja "Restraint" <me>')
	
	-- ALT
	send_command('bind !` input /ja "Provoke" <stnpc>')
    send_command('bind !1 input /ja "Hasso" <me>')
    send_command('bind !2 input /ja "Meditate" <me>')
    send_command('bind !3 input /ja "Third Eye" <me>')
    send_command('bind !4 input /ja "Sekkanoki" <me>')
    send_command('bind !5 input /ja "Seigan" <me>')
    send_command('bind !6 input /ja "Warding Circle" <me>')
    send_command('bind !7')
    send_command('bind !8')
    send_command('bind !9')
    send_command('bind !0')
		if player.sub_job == 'DRG' then
	send_command('bind !1 input /ja "Jump" <t>')
    send_command('bind !2 input /ja "High Jump" <t>')
    send_command('bind !3 input /ja "Super Jump" <t>')
    send_command('bind !4 input /ja "Ancient Circle" <me>')
		end

    send_command('bind ^= gs c cycle treasuremode')
--	send_command('bind != gs c toggle CapacityMode')
    
    select_default_macro_book()
end

function file_unload()
    send_command('unbind !=')
	send_command('unbind `')
	send_command('unbind f1')
	send_command('unbind f2')
	send_command('unbind f3')
	send_command('unbind f4')
	send_command('unbind f5')
	send_command('unbind f6')
	send_command('unbind f7')
	send_command('unbind f8')
    send_command('unbind ^`')
    send_command('unbind ^1')
    send_command('unbind ^2')
    send_command('unbind ^3')
    send_command('unbind ^4')
    send_command('unbind ^5')
    send_command('unbind ^6')
    send_command('unbind ^7')
    send_command('unbind ^8')
    send_command('unbind ^9')
    send_command('unbind ^0')
    send_command('unbind !`')
    send_command('unbind !1')
    send_command('unbind !2')
    send_command('unbind !3')
    send_command('unbind !4')
    send_command('unbind !5')
    send_command('unbind !6')
    send_command('unbind !7')
    send_command('unbind !8')
    send_command('unbind !9')
    send_command('unbind !0')
end

function init_gear_sets()
 	------------------------------------------------------------------------------------------------
	-------------------------------------- Cichol's Cape -------------------------------------------
	------------------------------------------------------------------------------------------------

	Cichol															= {}
	Cichol.DA														= { name="Cichol's Mantle", augments={'DEX+20','Accuracy+20 Attack+20','Accuracy+10','"Dbl.Atk."+10','Phys. dmg. taken-10%',}}
	Cichol.STP														= {}
	Cichol.STRDA													= {}
	Cichol.VITWS													= { name="Cichol's Mantle", augments={'VIT+20','Accuracy+20 Attack+20','VIT+10','Weapon skill damage +10%','Phys. dmg. taken-10%',}}
	Cichol.STRWS													= { name="Cichol's Mantle", augments={'STR+20','Accuracy+20 Attack+20','STR+10','Weapon skill damage +10%','Phys. dmg. taken-10%',}}
	Cichol.Crit														= { name="Cichol's Mantle", augments={'DEX+20','Accuracy+20 Attack+20','DEX+10','Crit.hit rate+10','Phys. dmg. taken-10%',}}
	Cichol.Hybrid													= { name="Cichol's Mantle", augments={'DEX+20','Eva.+20 /Mag. Eva.+20','Mag. Evasion+10','"Dbl.Atk."+10','Magic dmg. taken-10%',}}
	
	------------------------------------------------------------------------------------------------
	--------------------------------------- Utility Sets -------------------------------------------
	------------------------------------------------------------------------------------------------
	
	sets.TreasureHunter												= { head="White rarab cap +1", waist="Chaac Belt",}
--	sets.Organizer													= {}
--	sets.MadrigalBonus												= {}
--	sets.CapacityMantle												= { back="Mecistopins Mantle" }
--	sets.Berserker													= { neck="Berserker's Torque" }
--	sets.WSDayBonus													= { head="Gavialis Helm" }

	-- TP ears for night and day, AM3 up and down. 
	sets.BrutalLugra												= { left_earring="Brutal Earring", right_earring="Lugra Earring +1" }
	sets.Lugra														= { left_earring="Lugra Earring +1" }
	sets.Brutal														= { left_earring="Brutal Earring" }
--	sets.reive														= {	neck="Ygnas's Resolve +1"}
	
	------------------------------------------------------------------------------------------------
	------------------------------------ Job Abilities Sets ----------------------------------------
	------------------------------------------------------------------------------------------------

	sets.precast.JA['Mighty Strikes']								= {	hands="Agoge Mufflers +3"}
	sets.precast.JA['Blood Rage']									= { body="Boii Lorica +1" }
	sets.precast.JA['Provoke']										= set_combine(sets.TreasureHunter, {hands="Pummeler's Mufflers +3"})
	sets.precast.JA['Berserk']										= {	body="Pummeler's Lorica +3",feet="Agoge Calligae +3",back=Cichol.DA}
	sets.precast.JA['Warcry']										= { head="Agoge Mask +3"}
	sets.precast.JA['Mighty Strikes']								= { head="Agoge Mufflers +3"}
	sets.precast.JA['Retaliation']									= { hands="Pummeler's Mufflers +3", feet="Ravager's Calligae +2"}
	sets.precast.JA['Aggressor']									= { head="Pummeler's Mask +2", body="Agoge Lorica +3"}
	sets.precast.JA['Restraint']									= { hands="Boii Mufflers +1"}
	sets.precast.JA['Warrior\'s Charge']							= { legs="Agoge Cuisses +3"}
	sets.precast.JA['Tomahawk']										= { ammo="Thr. Tomahawk"}
	sets.precast.Waltz												= {}
	
	------------------------------------------------------------------------------------------------
	---------------------------------------- Precast Sets ------------------------------------------
	------------------------------------------------------------------------------------------------

	sets.precast.FC													= {}
	sets.precast.FC.Utsusemi										= set_combine(sets.precast.FC, { neck="Magoraga Beads" })

	------------------------------------------------------------------------------------------------
	---------------------------------------- Midcast Sets ------------------------------------------
	------------------------------------------------------------------------------------------------

	sets.midcast.FastRecast = {}
	sets.midcast.Utsusemi = {}

	------------------------------------------------------------------------------------------------
	----------------------------------------- Range Sets -------------------------------------------
	------------------------------------------------------------------------------------------------

	sets.precast.RA													= {ammo="Dart"}
	sets.midcast.RA													= {ammo="Dart"}

	------------------------------------------------------------------------------------------------
	-------------------------------------- Weaponskill Sets ----------------------------------------
	------------------------------------------------------------------------------------------------
	
	sets.precast.WS													= {
																		ammo		="Knobkierrie",
																		ammo		="Crepuscular Pebble",
																		head		="Agoge Mask +3",
																		body		="Pumm. Lorica +3",
																		hands		={ name="Odyssean Gauntlets", augments={'Attack+26','Weapon skill damage +4%','DEX+9','Accuracy+10',}},
																		legs		="Sakpata's Cuisses",
																		feet		="Sulev. Leggings +2",
																		neck		="Caro Necklace",
																		waist		="Sailfi Belt +1",
																		left_ear	="Thrud Earring",
																		right_ear	="Ishvara Earring", -- Lugra Earring +1
																		left_ring	="Niqmaddu Ring",
																		right_ring	="Regal Ring",
																		back		=Cichol.STRWS}
	sets.precast.WS.Mid												= set_combine(sets.precast.WS, {})
	sets.precast.WS.Acc												= set_combine(sets.precast.WS.Mid, {})
    
	-- Great Axe
    sets.precast.WS['Upheaval']										= set_combine(sets.precast.WS, {
--																		hands		="Sakpata's Gauntlets",
																		right_ring	="Gelatinous Ring +1",
																		back		=Cichol.VITWS})
    sets.precast.WS['Upheaval'].Mid									= set_combine(sets.precast.WS['Upheaval'], {})
    sets.precast.WS['Upheaval'].Acc									= set_combine(sets.precast.WS['Upheaval'].Mid, {})
	
	sets.precast.WS["Ukko's Fury"]									= set_combine(sets.precast.WS, {
																		ammo		="Seeth. Bomblet +1", -- Yetshila +1
																		head		="Blistering Sallet +1",
																		body		="Hjarrandi Breast.",
																		hands		="Flam. Manopolas +2",
																		feet		="Boii Calligae +1",
																		right_ear	="Lugra Earring +1",
																		right_ring	="Hetairoi Ring",
																		back		=Cichol.Crit})
	sets.precast.WS["Raging Rush"]									= set_combine(sets.precast.WS, {
																		ammo		="Seeth. Bomblet +1", -- Yetshila +1
																		head		="Blistering Sallet +1",
																		body		="Hjarrandi Breast.",
																		hands		="Flam. Manopolas +2",
																		feet		="Boii Calligae +1",
																		right_ear	="Lugra Earring +1",
																		right_ring	="Hetairoi Ring",
																		back		=Cichol.Crit})
    sets.precast.WS['Full Break']									= set_combine(sets.precast.WS, {
																		ammo		="Pemphredo Tathlum",
																		head		="Boii Mask +2",
																		body		="Boii Lorica +2",
																		hands		="Boii Mufflers +2",
																		legs		="Boii Cuisses +2",
																		feet		="Boii Calligae +2",
																		left_ring	="Metamorph Ring +1",
																		right_ring	="Weather. Ring",
																		right_ear	="Crep. Earring",})
	
	-- Axe
	sets.precast.WS['Decimation']									= set_combine(sets.precast.WS, {
																		ammo		="Seeth. Bomblet +1",
																		head		="Sakpata's Helm",
																		body		="Dagon Breast.",
																		hands		="Sakpata's Gauntlets",
																		legs		="Tatena. Haidate +1",
																		feet		="Sakpata's Leggings",
																		right_ear	="Lugra Earring +1",
																		back		=Cichol.DA})
	sets.precast.WS['Ruinator']										= set_combine(sets.precast.WS, {
																		ammo		="Seeth. Bomblet +1",
																		head		="Sakpata's Helm",
																		body		="Dagon Breast.",
																		hands		="Sakpata's Gauntlets",
																		legs		="Tatena. Haidate +1",
																		feet		="Sakpata's Leggings",
																		right_ear	="Lugra Earring +1",
																		back		=Cichol.DA})
	sets.precast.WS['Cloudsplitter']								= set_combine(sets.precast.WS, {})
	
	-- Great Sword
	sets.precast.WS['Resolution']									= set_combine(sets.precast.WS, {
																		ammo		="Seeth. Bomblet +1",
																		head		="Sakpata's Helm",
																		body		="Dagon Breast.",
																		hands		="Sakpata's Gauntlets",
																		legs		="Tatena. Haidate +1",
																		feet		="Sakpata's Leggings",
																		right_ear	="Lugra Earring +1",
																		back		=Cichol.DA})
	sets.precast.WS['Resolution'].Mid								= set_combine(sets.precast.WS.Resolution, {})
	sets.precast.WS['Resolution'].Acc								= set_combine(sets.precast.WS['Resolution'].Mid, {})
	
    sets.precast.WS['Shockwave']									= set_combine(sets.precast.WS, {
																		ammo		="Pemphredo Tathlum",
																		head		="Boii Mask +2",
																		body		="Boii Lorica +2",
																		hands		="Boii Mufflers +2",
																		legs		="Boii Cuisses +2",
																		feet		="Boii Calligae +2",
																		left_ring	="Metamorph Ring +1",
																		right_ring	="Weather. Ring",
																		right_ear	="Crep. Earring",})
																		
	-- Sword
	sets.precast.WS.Requiescat										= set_combine(sets.precast.WS, {
																		ammo		="Seeth. Bomblet +1",
																		head		="Sakpata's Helm",
																		body		="Dagon Breast.",
																		hands		="Sakpata's Gauntlets",
																		legs		="Tatena. Haidate +1",
																		feet		="Sakpata's Leggings",
																		right_ear	="Lugra Earring +1",
																		back		=Cichol.DA})
	sets.precast.WS.Requiescat.Mid									= set_combine(sets.precast.WS.Requiescat, {})
	sets.precast.WS.Requiescat.Acc									= set_combine(sets.precast.WS.Requiescat.Mid, {})

	sets.precast.WS['Sanguine Blade']								= set_combine(sets.precast.WS, {
																		head		="Nyame Helm",
																		body		="Nyame Mail",
																		hands		="Nyame Gauntlets",
																		legs		="Nyame Flanchard",
																		feet		="Nyame Sollerets",})
	sets.precast.WS['Red Lotus Blade']								= set_combine(sets.precast.WS, {
																		head		="Nyame Helm",
																		body		="Nyame Mail",
																		hands		="Nyame Gauntlets",
																		legs		="Nyame Flanchard",
																		feet		="Nyame Sollerets",})
	sets.precast.WS['Seraph Blade']									= set_combine(sets.precast.WS, {
																		head		="Nyame Helm",
																		body		="Nyame Mail",
																		hands		="Nyame Gauntlets",
																		legs		="Nyame Flanchard",
																		feet		="Nyame Sollerets",})
	sets.precast.WS['Flat Blade']									= set_combine(sets.precast.WS, {
																		ammo		="Pemphredo Tathlum",
																		head		="Boii Mask +2",
																		body		="Boii Lorica +2",
																		hands		="Boii Mufflers +2",
																		legs		="Boii Cuisses +2",
																		feet		="Boii Calligae +2",
																		left_ring	="Metamorph Ring +1",
																		right_ring	="Weather. Ring",
																		right_ear	="Crep. Earring",})

	-- Polearm
	sets.precast.WS.Stardiver										= set_combine(sets.precast.WS, {
																		ammo		="Seeth. Bomblet +1",
																		head		="Sakpata's Helm",
																		body		="Dagon Breast.",
																		hands		="Sakpata's Gauntlets",
																		legs		="Tatena. Haidate +1",
																		feet		="Sakpata's Leggings",
																		right_ear	="Lugra Earring +1",
																		back		=Cichol.DA})
     
	------------------------------------------------------------------------------------------------
	----------------------------------------- Idle Sets --------------------------------------------
	------------------------------------------------------------------------------------------------
	
	sets.resting													= {}
	sets.idle.Town													= {
--																		ammo		="Staunch Tathlum",
																		ammo		="Dart",
																		head		="Hjarrandi Helm",
																		body		="Hjarrandi Breast.",
																		hands		="Sulev. Gauntlets +2",
																		legs		="Pumm. Cuisses +2",
																		feet		="Hermes' Sandals +1",
																		neck		="Loricate Torque +1",
																		waist		="Flume Belt +1",
																		left_ear	="Odnowa Earring +1",
																		right_ear	="Hearty Earring",
																		left_ring	="Warden's Ring",
																		right_ring	="Defending Ring",
																		back		=Cichol.Hybrid}
	sets.idle.Field													= set_combine(sets.idle.Town, {})
	sets.idle.Regen													= set_combine(sets.idle.Town, {})
	sets.idle.Weak													= set_combine(sets.idle.Town, {})
	
    ------------------------------------------------------------------------------------------------
    ---------------------------------------- Defense Sets ------------------------------------------
    ------------------------------------------------------------------------------------------------
	
	sets.defense.PDT												= {
																		ammo		="Staunch Tathlum",
																		head		="Sakpata's Helm",
																		body		="Sakpata's Plate",
																		hands		="Sakpata's Gauntlets",
																		legs		="Sakpata's Cuisses",
																		feet		="Sakpata's Leggings",
																		neck		="Loricate Torque +1",
																		waist		="Flume Belt +1",
																		left_ear	="Odnowa Earring +1",
																		right_ear	="Eabani Earring",
																		left_ring	="Warden's Ring",
																		right_ring	="Gelatinous Ring +1",
																		back		=Cichol.Hybrid}
	sets.defense.MDT												= set_combine(sets.defense.PDT, {})
	sets.defense.Reraise											= sets.idle.Weak
	sets.Kiting														= {feet="Hermes' Sandals +1"}
	sets.Reraise													= {head="Twilight Helm",body="Twilight Mail"}

     -- Defensive sets to combine with various weapon-specific sets below
     -- These allow hybrid acc/pdt sets for difficult content
	sets.Defensive													= {}
	sets.Defensive_Mid												= {}
	sets.Defensive_Acc												= {}
	
	------------------------------------------------------------------------------------------------
	---------------------------------------- Engaged Sets ------------------------------------------
	------------------------------------------------------------------------------------------------

	sets.engaged													= {
																		ammo		="Ginsen", -- Coiste Bodhar
																		head		="Sakpata's Helm",
																		body		="Dagon Breast.",
																		hands		="Sakpata's Gauntlets",
																		legs		="Sakpata's Cuisses",
																		feet		="Sakpata's Leggings",
																		neck		="Vim Torque +1", -- War. Beads +2
																		waist		="Ioskeha Belt +1",
																		left_ear	="Telos Earring", -- Schere Earring
																		right_ear	="Brutal Earring", -- Boii Earring
																		left_ring	="Niqmaddu Ring",
																		right_ring	="Flamma Ring", -- Petrov Ring
																		back		=Cichol.DA}
	sets.engaged.Mid												= set_combine(sets.engaged, {
																		body		="Sakpata's Plate",
																		legs		="Agoge Cuisses +3",
																		feet		="Pumm. Calligae +3",})
	sets.engaged.Acc												= set_combine(sets.engaged.Mid, {
																		head		="Flam. Zucchetto +2",
																		body		="Dagon Breast.",
																		hands		="Tatena. Gote +1",
																		legs		="Tatena. Haidate +1",
																		feet		="Tatena. Sune. +1",
																		neck		="Vim Torque +1",
																		waist		="Sailfi Belt +1",
																		left_ear	="Telos Earring", -- Dedition Earring
																		right_ear	="Crep. Earring",
																		right_ring	="Flamma Ring",
																		back		=Cichol.DA}) -- STP Cape

	sets.engaged.PDT												= set_combine(sets.engaged, {
																		body		="Sakpata's Plate",
																		feet		="Boii Calligae +2",
																		neck		="Lorica Torque +1",
																		right_ear	="Tuisto Earring",})
	sets.engaged.Mid.PDT											= sets.engaged.PDT
	sets.engaged.Acc.PDT											= sets.engaged.PDT

	sets.engaged.DW													= set_combine(sets.engaged, {})
	sets.engaged.OneHand											= set_combine(sets.engaged, {
																		body		="Sakpata's Plate",
																		legs		="Agoge Cuisses +3",
																		feet		="Pumm. Calligae +3",})

	sets.engaged.GreatSword											= set_combine(sets.engaged, {})
	sets.engaged.GreatSword.Mid										= set_combine(sets.engaged.Mid, {})
	sets.engaged.GreatSword.Acc										= set_combine(sets.engaged.Acc, {})

	sets.engaged.Reraise											= set_combine(sets.engaged, {})
	sets.buff.Berserk												= {}
	sets.buff.Retaliation											= { hands="Pumm. Mufflers +2"}
end

function job_pretarget(spell, action, spellMap, eventArgs)
    if spell.type:endswith('Magic') and buffactive.silence then
        eventArgs.cancel = true
        send_command('input /item "Echo Drops" <me>')
    --elseif spell.target.distance > 8 and player.status == 'Engaged' then
    --    eventArgs.cancel = true
    --    add_to_chat(122,"Outside WS Range! /Canceling")
    end
end
-- Set eventArgs.handled to true if we don't want any automatic gear equipping to be done.
-- Set eventArgs.useMidcastGear to true if we want midcast gear equipped on precast.
function job_precast(spell, action, spellMap, eventArgs)
end
 
function job_post_precast(spell, action, spellMap, eventArgs)
	if spell.type:lower() == 'weaponskill' then
        -- CP mantle must be worn when a mob dies, so make sure it's equipped for WS.
		if state.CapacityMode.value then
			equip(sets.CapacityMantle)
		end
--	if player.tp > 2999 then
--		equip(sets.BrutalLugra)
--	else -- use Lugra + moonshade
--	if world.time >= (17*60) or world.time <= (7*60) then
--		equip(sets.Lugra)
--	else
--		equip(sets.Brutal)
--	end
        -- Use SOA neck piece for WS in rieves
	if buffactive['Reive Mark'] then
		equip(sets.reive)
		end
	end
end
 
-- Set eventArgs.handled to true if we don't want any automatic gear equipping to be done.
function job_midcast(spell, action, spellMap, eventArgs)
end
 
-- Run after the default midcast() is done.
-- eventArgs is the same one used in job_midcast, in case information needs to be persisted.
function job_post_midcast(spell, action, spellMap, eventArgs)
    if (state.HybridMode.current == 'PDT' and state.PhysicalDefenseMode.current == 'Reraise') then
        equip(sets.Reraise)
    end
    if state.Buff.Berserk and not state.Buff.Retaliation then
        equip(sets.buff.Berserk)
    end
end
 
-- Set eventArgs.handled to true if we don't want any automatic gear equipping to be done.
function job_aftercast(spell, action, spellMap, eventArgs)
    if state.Buff[spell.english] ~= nil then
        state.Buff[spell.english] = not spell.interrupted or buffactive[spell.english]
    end
end

function job_post_aftercast(spell, action, spellMap, eventArgs)
end
-------------------------------------------------------------------------------------------------------------------
-- Customization hooks for idle and melee sets, after they've been automatically constructed.
-------------------------------------------------------------------------------------------------------------------
-- Called before the Include starts constructing melee/idle/resting sets.
-- Can customize state or custom melee class values at this point.
-- Set eventArgs.handled to true if we don't want any automatic gear equipping to be done.
function job_handle_equipping_gear(status, eventArgs)
end
-- Modify the default idle set after it was constructed.
function customize_idle_set(idleSet)
    if player.hpp < 90 then
        idleSet = set_combine(idleSet, sets.idle.Regen)
    end
    if state.HybridMode.current == 'PDT' then
        idleSet = set_combine(idleSet, sets.defense.PDT)
    end
    return idleSet
end
 
-- Modify the default melee set after it was constructed.
function customize_melee_set(meleeSet)
    if state.TreasureMode.value == 'Fulltime' then
        meleeSet = set_combine(meleeSet, sets.TreasureHunter)
    end
    if state.Buff.Berserk and not state.Buff.Retaliation then
    	meleeSet = set_combine(meleeSet, sets.buff.Berserk)
    end
    if state.CapacityMode.value then
        meleeSet = set_combine(meleeSet, sets.CapacityMantle)
    end
    return meleeSet
end
 
function check_buff(buff_name, eventArgs)
    if state.Buff[buff_name] then
        equip(sets.buff[buff_name] or {})
        if state.TreasureMode.value == 'SATA' or state.TreasureMode.value == 'Fulltime' then
            equip(sets.TreasureHunter)
        end
        eventArgs.handled = true
    end
end
-------------------------------------------------------------------------------------------------------------------
-- General hooks for other events.
-------------------------------------------------------------------------------------------------------------------
 
-- Called when the player's status changes.
function job_status_change(newStatus, oldStatus, eventArgs)
    if newStatus == "Engaged" then
        if buffactive.Berserk and not state.Buff.Retaliation then
            equip(sets.buff.Berserk)
        end
        get_combat_weapon()
    --elseif newStatus == 'Idle' then
    --    determine_idle_group()
    end
end
 
-- Called when a player gains or loses a buff.
-- buff == buff gained or lost
-- gain == true if the buff was gained, false if it was lost.
function job_buff_change(buff, gain)
    
    if state.Buff[buff] ~= nil then
        handle_equipping_gear(player.status)
    end
    
    if S{'madrigal'}:contains(buff:lower()) then
        if buffactive.madrigal and state.OffenseMode.value == 'Acc' then
            equip(sets.MadrigalBonus)
        end
    end
    -- Warp ring rule, for any buff being lost
    if S{'Warp', 'Vocation', 'Capacity'}:contains(player.equipment.ring2) then
        if not buffactive['Dedication'] then
            disable('ring2')
        end
    else
        enable('ring2')
    end
    
    if buff == "Berserk" then
        if gain and not buffactive['Retaliation'] then
            equip(sets.buff.Berserk)
        else
            if not midaction() then
                handle_equipping_gear(player.status)
            end
        end
    end

end
 
 
-------------------------------------------------------------------------------------------------------------------
-- User code that supplements self-commands.
-------------------------------------------------------------------------------------------------------------------
 
-- Called by the 'update' self-command, for common needs.
-- Set eventArgs.handled to true if we don't want automatic equipping of gear.
function job_update(cmdParams, eventArgs)
    
    war_sj = player.sub_job == 'WAR' or false
    get_combat_form()
    get_combat_weapon()

end

function get_custom_wsmode(spell, spellMap, default_wsmode)
end
-------------------------------------------------------------------------------------------------------------------
-- Utility functions specific to this job.
-------------------------------------------------------------------------------------------------------------------
function get_combat_form()
    --if war_sj then
        --state.CombatForm:set("War")
    --else
        --state.CombatForm:reset()
    --end
    if S{'NIN', 'DNC'}:contains(player.sub_job) and war_sub_weapons:contains(player.equipment.sub) then
        state.CombatForm:set("DW")
    elseif S{'SAM', 'WAR'}:contains(player.sub_job) and player.equipment.sub == 'Blurred Shield' then
        state.CombatForm:set("OneHand")
    else
        state.CombatForm:reset()
    end

end

function get_combat_weapon()
    if gsList:contains(player.equipment.main) then
        state.CombatWeapon:set("GreatSword")
    else -- use regular set
        state.CombatWeapon:reset()
    end
end

-- Handle notifications of general user state change.
function job_state_change(stateField, newValue, oldValue)
    --if stateField == 'Look Cool' then
    --    if newValue == 'On' then
    --        send_command('gs equip sets.cool;wait 1.2;input /lockstyle on;wait 1.2;gs c update user')
    --        --send_command('wait 1.2;gs c update user')
    --    else
    --        send_command('@input /lockstyle off')
    --    end
    --end
end

function select_default_macro_book()
    -- Default macro set/book
	if player.sub_job == 'DRG' then
		set_macro_page(2, 4)
	else
		set_macro_page(1, 4)
	end
end

-- Double Light (Fire, Wind, Lightning, Light) - Level 3

--	King's Justice (M) > Metatron Torment (R) > [Light] > Metatron Torment (R)
--	King's Justice (M) > Metatron Torment (R) > [Light] > Ukko's Fury (E)
--	King's Justice (M) > Upheaval (MM) > [Light] > Metatron Torment (R)
--	King's Justice (M) > Upheaval (MM) > [Light] > Ukko's Fury (E)
--	Metatron Torment (R) > King's Justice (M) > [Light] > Metatron Torment (R)
--	Metatron Torment (R) > King's Justice (M) > [Light] > Ukko's Fury (E)
--	Ukko's Fury (E) > Upheaval (MM) > [Light] > Metatron Torment (R)
--	Ukko's Fury (E) > Upheaval (MM) > [Light] > Ukko's Fury (E)
--	Upheaval (MM) > King's Justice (M) > [Light] > Metatron Torment (R)
--	Upheaval (MM) > King's Justice (M) > [Light] > Ukko's Fury (E)
--	Upheaval (MM) > Ukko's Fury (E) > [Light] > Metatron Torment (R)
--	Upheaval (MM) > Ukko's Fury (E) > [Light] > Ukko's Fury (E)
--	Metatron Torment (R) > Metatron Torment (R)
--	Metatron Torment (R) > Ukko's Fury (E)
--	Ukko's Fury (E) > Metatron Torment (R)
--	Ukko's Fury (E) > Ukko's Fury (E)

-- Light (Fire, Wind, Lightning, Light) - Level 3

--	Full Break > Metatron Torment (R) > [Fusion] > King's Justice (M)
--	Full Break > Metatron Torment (R) > [Fusion] > Ukko's Fury (E)
--	Full Break > Upheaval (MM) > [Fusion] > King's Justice (M)
--	Full Break > Upheaval (MM) > [Fusion] > Ukko's Fury (E)
--	Raging Rush > Raging Rush > [Fragmentation] > Metatron Torment (R)
--	Raging Rush > Raging Rush > [Fragmentation] > Upheaval (MM)
--	Raging Rush > Sturmwind > [Fragmentation] > Metatron Torment (R)
--	Raging Rush > Sturmwind > [Fragmentation] > Upheaval (MM)
--	Steel Cyclone (Q) > Metatron Torment (R) > [Fusion] > King's Justice (M)
--	Steel Cyclone (Q) > Metatron Torment (R) > [Fusion] > Ukko's Fury (E)
--	Steel Cyclone (Q) > Upheaval (MM) > [Fusion] > King's Justice (M)
--	Steel Cyclone (Q) > Upheaval (MM) > [Fusion] > Ukko's Fury (E)
--	King's Justice (M) > Metatron Torment (R)
--	King's Justice (M) > Upheaval (MM)
--	Metatron Torment (R) > King's Justice (M)
--	Ukko's Fury (E) > Upheaval (MM)
--	Upheaval (MM) > King's Justice (M)
--	Upheaval (MM) > Ukko's Fury (E)

-- Darkness (Earth, Ice, Water, Dark) - Level 3

--	Fell Cleave > Keen Edge > [Gravitation] > Full Break
--	Fell Cleave > Keen Edge > [Gravitation] > Steel Cyclone (Q)
--	Fell Cleave > Upheaval (MM) > [Gravitation] > Full Break
--	Fell Cleave > Upheaval (MM) > [Gravitation] > Steel Cyclone (Q)
--	Steel Cyclone (Q) > Keen Edge > [Gravitation] > Full Break
--	Steel Cyclone (Q) > Keen Edge > [Gravitation] > Steel Cyclone (Q)
