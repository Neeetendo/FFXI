-- Owner: AlanWarren, aka ~ Orestes 
-- current file resides @ https://github.com/AlanWarren/gearswap
--[[ 

 === Notes ===
 -- Set format is as follows:
    sets.midcast.RA.[CustomClass][CombatForm][CombatWeapon][RangedMode][CustomRangedGroup]
    ex: sets.midcast.RA.SAM.Bow.Mid.SamRoll = {}
    you can also append CustomRangedGroups to each other
 
 -- These are the available sets per category
 -- CustomClass = SAM
 -- CombatForm = DW
 -- CombatWeapon = weapon name, ex: Yoichinoyumi  (you can make new sets for any ranged weapon)
 -- RangedMode = Normal, Mid, Acc
 -- CustomRangedGroup = SamRoll

 -- SamRoll is applied automatically whenever you have the roll on you. 
 -- SAM is used when you're RNG/SAM 

 * Auto RA
 - You can use the built in hotkey (CTRL -) or create a macro. (like below) Note "AutoRA" is case sensitive
   /console gs c toggle AutoRA
 - You have to shoot once after toggling autora for it to begin.
 - AutoRA will use weaponskills @ 1000TP, depending on which weapon you're using. However, this will only
   work if you set gear.Gun or gear.Bow to the weapon you're using. You also have to specify the desired
   ws it should use, with the settings auto_gun_ws and auto_bow_ws. 
 
 === Helpful Commands ===
    //gs validate
    //gs showswaps
    //gs debugmode

--]]
function get_sets()
	mote_include_version = 2
	include('Mote-Include.lua')
	include('organizer-lib')
end

function job_setup()
end

function user_setup()
	state.OffenseMode:options('Normal', 'Melee')
	state.RangedMode:options('Normal', 'Mid', 'Acc')
	state.HybridMode:options('Normal', 'PDT')
	state.IdleMode:options('Normal', 'PDT')
	state.WeaponskillMode:options('Normal', 'Mid', 'Acc')
	state.PhysicalDefenseMode:options('PDT')
	state.MagicalDefenseMode:options('MDT')
    state.flurrymode = M{['description'] = 'Flurry Mode'}
    state.flurrymode:options('Flurry','FlurryII')
 
	state.Buff.Barrage = buffactive.Barrage or false
	state.Buff.Camouflage = buffactive.Camouflage or false
	state.Buff.Overkill = buffactive.Overkill or false
	state.CapacityMode = M(false, 'Capacity Point Mantle')

	state.AutoRA = M{['description']='Auto RA', 'Normal', 'Shoot', 'WS' }
	auto_gun_ws = "Trueflight"
	auto_bow_ws = "Jishnu's Radiance"

	--gear.Gun = "Annihilator"
	--gear.Bow = "Yoichinoyumi"
	gear.Gun = "Holliday"
	gear.Bow = "Vijaya Bow"
       
	rng_sub_weapons = S{'Hurlbat', 'Vanir Knife', 'Perun', 
	'Eminent Axe', 'Odium', 'Aphotic Kukri', 'Atoyac'}
        
	sam_sj = player.sub_job == 'SAM' or false

	DefaultAmmo = {[gear.Bow] = "Achiyalabopa arrow", [gear.Gun] = "Achiyalabopa bullet"}
	U_Shot_Ammo = {[gear.Bow] = "Achiyalabopa arrow", [gear.Gun] = "Achiyalabopa bullet"} 

	get_combat_form()
	get_custom_ranged_groups()
	select_default_macro_book()

	send_command('bind ^f1 ja BountyShot') --MX1--
	send_command('bind ^f2 ja DecoyShot') --MX2--
	send_command('bind ^f3 ja Camouflage') --MX3--
	send_command('bind ^f4 ja FlashyShot') --MX4--
	send_command('bind ^f5 ja Shadowbind') --MX5--
	send_command('bind ^f6 input /ra') --MX6--
	send_command('bind ^f7 ja UnlimitedShot') --MX7--
	send_command('bind ^f8 ja DoubleShot') --MX8--
	send_command('bind ^f9 input //sharpshot;wait 1;//barrage') --MX9--
	send_command('bind ^f10 ja Scavenge') --MX10--
	
	send_command('bind !f1 ws Trueflight') --M1--
	send_command('bind !f2 ws Wildfire') --M2--
	send_command('bind !f3 ws LastStand') --M3--
	send_command('bind ^!f4 ws Detonator') --M4--
	send_command('bind !f5 ws JishnusRadiance') --M5--
	send_command('bind !f6 ws ApexArrow') --M6--
	send_command('bind !f7 ws EmpyrealArrow') --M7--
	send_command('bind !f8') --M8--
	send_command('bind !f9 gs c cycle AutoRA') --M9--
	send_command('bind !f10 gs c cycle flurrymode') --M10--
	send_command('bind !f11') --M11--
	send_command('bind !f12') --M12--
	
	-- Testing 
	--windower.register_event('incoming text', detect_cor_rolls)
end

function file_unload()
    send_command('unbind ^-')
	
	send_command('unbind ^f1')
	send_command('unbind ^f2')
	send_command('unbind ^f3')
	send_command('unbind ^f4')
	send_command('unbind ^f5')
	send_command('unbind ^f6')
	send_command('unbind ^f7')
	send_command('unbind ^f8')
	send_command('unbind ^f9')
	send_command('unbind ^f10')
	send_command('unbind !f1')
	send_command('unbind !f2')
	send_command('unbind !f3')
	send_command('unbind ^!f4')
	send_command('unbind !f5')
	send_command('unbind !f6')
	send_command('unbind !f7')
	send_command('unbind !f8')
	send_command('unbind !f9')
	send_command('unbind !f10')
	send_command('unbind !f11')
	send_command('unbind !f12')
end
 
function init_gear_sets()
    --------------------------------------
    -- Augments
    --------------------------------------
	
	Belenus = {}
	Belenus.TP = { name="Belenus's Cape", augments={'AGI+20','Rng.Acc.+20 Rng.Atk.+20','"Store TP"+10',}}
	Belenus.Shot = { name="Belenus's Cape", augments={'HP+60','Eva.+20 /Mag. Eva.+20','"Snapshot"+10',}}
	Belenus.DEXWS = { name="Belenus's Cape", augments={'DEX+20','Rng.Acc.+20 Rng.Atk.+20','Crit.hit rate+10',}}
	Belenus.TF = { name="Belenus's Cape", augments={'AGI+20','Mag. Acc+20 /Mag. Dmg.+20','Weapon skill damage +10%',}}
	
	HerculeanHead = {}
	HerculeanHead.FC = { name="Herculean Helm", augments={'Mag. Acc.+18 "Mag.Atk.Bns."+18','"Fast Cast"+2','MND+5','Mag. Acc.+11','"Mag.Atk.Bns."+7',}}
	HerculeanHead.DW = { name="Herculean Helm", augments={'Attack+11','"Dual Wield"+5','DEX+4','Accuracy+11',}}
	HerculeanHead.Nuke = { name="Herculean Helm", augments={'Mag. Acc.+18 "Mag.Atk.Bns."+18','"Fast Cast"+2','MND+5','Mag. Acc.+11','"Mag.Atk.Bns."+7',}}
	HerculeanHead.DEXWS = { name="Herculean Helm", augments={'Attack+17','Weapon skill damage +5%','DEX+9',}}
	HerculeanHead.CritDEX = { name="Herculean Helm", augments={'Accuracy+24 Attack+24','Crit. hit damage +4%','DEX+8','Attack+12',}}
	
	HerculeanBody = {}
	HerculeanBody.TA = { name="Herculean Vest", augments={'Accuracy+30','"Triple Atk."+3',}}
	HerculeanBody.STRWS = { name="Herculean Vest", augments={'Accuracy+28','Weapon skill damage +3%','STR+10','Attack+10',}}

	HerculeanHands = {}
	HerculeanHands.TA = { name="Herculean Gloves", augments={'Accuracy+11','"Triple Atk."+3','DEX+10','Attack+7',}}
	HerculeanHands.DEXWS = { name="Herculean Gloves", augments={'Attack+12','Weapon skill damage +4%','DEX+7','Accuracy+9',}}
	HerculeanHands.STRWS = { name="Herculean Gloves", augments={'Accuracy+29','Weapon skill damage +2%','STR+10','Attack+6',}}
	HerculeanHands.CritDEX = { name="Herculean Gloves", augments={'Rng.Acc.+16','Crit.hit rate+3','DEX+10','Accuracy+7','Attack+8',}}
	
	HerculeanLegs = {}
	HerculeanLegs.DW = { name="Herculean Trousers", augments={'Accuracy+23','"Dual Wield"+5','AGI+6','Attack+14',}}
	HerculeanLegs.Nuke = { name="Herculean Trousers", augments={'Mag. Acc.+19 "Mag.Atk.Bns."+19','Magic burst mdg.+1%','STR+9','Mag. Acc.+13','"Mag.Atk.Bns."+12',}}
	
	HerculeanFeet = {}
	HerculeanFeet.DW = { name="Herculean Boots", augments={'Accuracy+24','"Dual Wield"+5','AGI+1','Attack+6',}}
	HerculeanFeet.TA = { name="Herculean Boots", augments={'Accuracy+22 Attack+22','"Triple Atk."+3','Accuracy+7',}}
	HerculeanFeet.DEXWS = { name="Herculean Boots", augments={'Accuracy+27','Weapon skill damage +2%','DEX+11','Attack+14',}}
	HerculeanFeet.STRWS = { name="Herculean Boots", augments={'Weapon skill damage +4%','STR+8','Accuracy+12','Attack+2',}}
	HerculeanFeet.CritAGI = { "Herculean Boots", augments={'Accuracy+21','Crit.hit rate+4','AGI+15',}}
	
	AdhemarHands = {}
	AdhemarHands.A = { name="Adhemar Wristbands", augments={'DEX+10','AGI+10','Accuracy+15',}}
	AdhemarHands.C = { name="Adhemar Wristbands", augments={'AGI+10','Rng.Acc.+15','Rng.Atk.+15',}}
	
    --------------------------------------
    -- Utility sets
    --------------------------------------
	
	sets.precast.JA['Bounty Shot'] = {hands="Amini Glovelettes",waist="Chaac Belt"}
	sets.precast.JA['Sharpshot'] = {legs="Orion Braccae +1"}
	sets.precast.JA['Velocity Shot'] = {body="Amini Caban +1"}
	sets.precast.JA['Scavenge'] = {feet="Orion Socks +1"}

    --------------------------------------
    -- Job Abilties sets
    --------------------------------------
	
	sets.precast.JA['Eagle Eye Shot'] = set_combine(sets.midcast.RA, {legs="Arcadian Braccae+1"})
	sets.precast.JA['Eagle Eye Shot'].Mid = set_combine(sets.midcast.RA, {legs="Arcadian Braccae+1"})
	sets.precast.JA['Eagle Eye Shot'].Acc = set_combine(sets.midcast.RA, {legs="Arcadian Braccae+1"})

    --------------------------------------
    -- Idle Sets
    --------------------------------------
	sets.idle = {
		head="Genmei Kabuto",
		neck="Loricate Torque +1",
		ear1="Genmei Earring",
		ear2="Etiolation Earring",
		body="Meghanada Cuirie +1",
		hands="Iuitl Wristbands +1",
		ring1="Gelatinous Ring +1",
		ring2="Defending Ring",
		back="Xucau Mantle",
		waist="Flume Belt",
		legs="Iuitl Tights +1",
		feet="Jute Boots +1"}
	sets.idle.Regen = set_combine(sets.idle, {})
	sets.idle.PDT = set_combine(sets.idle, {})
	sets.idle.Town = set_combine(sets.idle, {})

	--------------------------------------
	-- Preshot sets
	--------------------------------------
	
	--Snapshot
		--Merit 10
		--Velocity Shot+Gift 25
	--Rapid Shot
		--Merit 5
	--Total 
		--S:72 R:57
	sets.precast.RA = {
		head="Orion Beret +1", --R:14
		neck="Erudition Necklace",
		ear1="Enervating Earring",
		ear2="Neritic Earring",
		body="Arcadian Jerkin +1", --R:12
		hands="Carmine Finger Gauntlets +1", --S:8 R:11
		ring1="Petrov Ring",
		ring2="Rajas Ring",
		back=Belenus.Shot, --S:12
		waist="Yemaya Belt", --R:5
		--legs="Adhemar Kecks", --S:9 R:10
		legs="Nahtirah Trousers",
		feet="Adhemar Gamashes"} --S:8
	--Snapshot
		--Merit 10
		--Velocity Shot+Gift 25
		--Flurry(II) 15(30)
	--Rapid Shot
		--Merit 5
	--Total 
		--S:71(86) R:71
	sets.precast.RA.Flurry = {
		head="Orion Beret +1", --R:14
		neck="Erudition Necklace",
		ear1="Enervating Earring",
		ear2="Neritic Earring",
		body="Arcadian Jerkin +1", --R:12
		hands="Mrigavyadha Gloves", --R:15
		ring1="Petrov Ring",
		ring2="Rajas Ring",
		back=Belenus.Shot, --S:12
		waist="Yemaya Belt", --R:5
		--legs="Adhemar Kecks", --S:9 R:10
		legs="Nahtirah Trousers",
		feet="Pursuer's Gaiters"} --R:10
	sets.precast.RA.FlurryII = sets.precast.RA.Flurry

    --------------------------------------
    -- Precast sets
    --------------------------------------
	
	sets.precast.FC = {
		head="Herculean Helm",
		neck="Jeweled Collar",
		ear2="Loquacious Earring",
		body="Dread Jupon",
		hands="Leyline Gloves",
		ring1="Prolix Ring",
		ring2="Weatherspoon Ring",
		back="",
		waist="",
		legs="Gyve Trousers",
		feet=""}
	sets.precast.FC.Utsusemi = set_combine(sets.precast.FC, {neck="Magoraga Beads"})

    --------------------------------------
    -- Midcast sets (Marksmanship)
    --------------------------------------
	
	sets.midcast.RA = { 
		head="Arcadian Beret +1",
		neck="Erudition Necklace",
		ear1="Enervating Earring",
		ear2="Neritic Earring",
		body="Pursuer's Doublet",
		hands=AdhemarHands.C,
		ring1="Petrov Ring",
		ring2="Apate Ring",
		back=Belenus.TP,
		waist="Yemaya Belt",
		legs="Amini brague +1",
		feet="Adhemar Gamashes"}
	sets.midcast.RA.Mid = set_combine(sets.midcast.RA, {})
	sets.midcast.RA.Acc = set_combine(sets.midcast.RA.Mid, {})
    
	-- Samurai Roll sets 
	sets.midcast.RA.SamRoll = set_combine(sets.midcast.RA, {})
	sets.midcast.RA.Mid.SamRoll = set_combine(sets.midcast.RA.SamRoll, {})
	sets.midcast.RA.Acc.SamRoll = set_combine(sets.midcast.RA.Mid.SamRoll, {})
        
	-- SAM Subjob
	sets.midcast.RA.SAM = {}
	sets.midcast.RA.SAM.Mid = set_combine(sets.midcast.RA.SAM, {})
	sets.midcast.RA.SAM.Acc = set_combine(sets.midcast.RA.SAM.Mid, {})

	-- Samurai Roll for /sam, assume we're using a staff
	sets.midcast.RA.SAM.SamRoll = set_combine(sets.midcast.RA.SAM, {})
	sets.midcast.RA.SAM.Mid.SamRoll = set_combine(sets.midcast.RA.SAM.Mid, {})
	sets.midcast.RA.SAM.Acc.SamRoll = set_combine(sets.midcast.RA.SAM.Acc, {})

    --------------------------------------
    -- Midcast sets (Archery)
    --------------------------------------

	sets.midcast.RA.Bow = { 
		head="Arcadian Beret +1",
		neck="Erudition Necklace",
		ear1="Enervating Earring",
		ear2="Neritic Earring",
		body="Pursuer's Doublet",
		hands=AdhemarHands.C,
		ring1="Petrov Ring",
		ring2="Apate Ring",
		back=Belenus.TP,
		waist="Yemaya Belt",
		legs="Amini brague +1",
		feet="Adhemar Gamashes"}
	sets.midcast.RA.Bow.Mid = set_combine(sets.midcast.RA.Bow, {})
	sets.midcast.RA.Bow.Acc = set_combine(sets.midcast.RA.Bow.Mid, {})
       
	-- Bow Sam roll
	sets.midcast.RA.Bow.SamRoll = set_combine(sets.midcast.RA.Bow, {})
	sets.midcast.RA.Bow.Mid.SamRoll = set_combine(sets.midcast.RA.Bow.SamRoll, {})
	sets.midcast.RA.Bow.Acc.SamRoll = set_combine(sets.midcast.RA.Bow.Mid.SamRoll, {})
        
	-- Sam SJ / Bow 
	sets.midcast.RA.SAM.Bow = set_combine(sets.midcast.RA.SAM, {})
	sets.midcast.RA.SAM.Bow.Mid = set_combine(sets.midcast.RA.SAM.Mid, {})
	sets.midcast.RA.SAM.Bow.Acc = set_combine(sets.midcast.RA.SAM.Acc, {})

	-- Sam SJ / Bow / Sam's Roll
	sets.midcast.RA.SAM.Bow.SamRoll = set_combine(sets.midcast.RA.SAM.Bow, {})
	sets.midcast.RA.SAM.Bow.Mid.SamRoll = set_combine(sets.midcast.RA.SAM.Bow.Mid, {})
	sets.midcast.RA.SAM.Bow.Acc.SamRoll = set_combine(sets.midcast.RA.SAM.Bow.Acc, {})
	
	--------------------------------------
	-- Engaged sets
	--------------------------------------
	
	sets.engaged = {
		head="Orion Beret +1",
		neck="Erudition Necklace",
		ear1="Enervating Earring",
		ear2="Neritic Earring",
		body="Arcadian Jerkin +1",
		hands="Carmine Finger Gauntlets +1",
		ring1="Petrov Ring",
		ring2="Rajas Ring",
		back=Belenus.Shot,
		waist="Yemaya Belt",
		legs="Adhemar Kecks",
		feet="Adhemar Gamashes"}
	sets.engaged.PDT = set_combine(sets.engaged, {})
	sets.engaged.Bow = set_combine(sets.engaged, {})
	sets.engaged.Melee = {}
	sets.engaged.Bow.Melee = sets.engaged.Melee
	sets.engaged.Melee.PDT = set_combine(sets.engaged.Melee, {})
	sets.engaged.DW = set_combine(sets.engaged, {})
	sets.engaged.DW.Melee = set_combine(sets.engaged.Melee, {})

    --------------------------------------
    -- Weaponskill sets
    --------------------------------------

	sets.precast.WS = {}
	sets.precast.WS.Mid = set_combine(sets.precast.WS, {})
	sets.precast.WS.Acc = set_combine(sets.precast.WS.Mid, {})

	sets.Wildfire = {
		head=HerculeanHead.Nuke,
		neck="Sanctity Necklace",
		ear1="Friomisi Earring",
		ear2="Novio Earring",
		body="Samnuha Coat",
		hands="Pursuer's Cuffs",
		hands="Carmine Finger Gauntlets +1",
		ring2="Acumen Ring",
		back="Argochampsa Mantle",
		waist=gear.ElementalObi,
		legs=HerculeanLegs.Nuke,
		feet=HerculeanFeet.TA}
	sets.precast.WS['Wildfire'] = set_combine(sets.precast.WS, sets.Wildfire)
	sets.precast.WS['Wildfire'].Mid = set_combine(sets.precast.WS.Mid, sets.Wildfire)
	sets.precast.WS['Wildfire'].Acc = set_combine(sets.precast.WS.Acc, sets.Wildfire)

	sets.Trueflight = {
		head=HerculeanHead.Nuke,
		neck="Sanctity Necklace",
		ear1="Hermetic Earring",
		ear2="Moonshade Earring",
		body="Samnuha Coat",
		hands="Carmine Finger Gauntlets +1",
		ring1="Arvina Ringlet +1",
		ring2="Weatherspoon Ring",
		back=Belenus.TF,
		waist="Sveltesse Gouriz +1",
		legs=HerculeanLegs.Nuke,
		feet=HerculeanFeet.Nuke}
	sets.precast.WS['Trueflight'] = set_combine(sets.precast.WS, sets.Trueflight)
	sets.precast.WS['Trueflight'].Mid = set_combine(sets.precast.WS.Mid, sets.Trueflight)
	sets.precast.WS['Trueflight'].Acc = set_combine(sets.precast.WS.Acc, sets.Trueflight, {
		ear1="Dignitary's Earring",
	})

	sets.Coronach = {}
	sets.precast.WS['Coronach'] = set_combine(sets.precast.WS, sets.Coronach)
	sets.precast.WS['Coronach'].Mid = set_combine(sets.precast.WS.Mid, sets.Coronach)
	sets.precast.WS['Coronach'].Acc = set_combine(sets.precast.WS.Acc, sets.Coronach)
	sets.precast.WS['Coronach'].SAM = set_combine(sets.precast.WS, {})

	sets.LastStand = {
		head="Meghanada Visor +1",
		neck=gear.ElementalGorget,
		ear1="Ishvara Earring",
		ear2="Moonshade Earring",
		body="Pursuer's Doublet",
		hands="Meghanada Gloves +1",
		ring1="Garuda Ring +1",
		ring2="Apate Ring",
		back=Belenus.TP,
		waist=gear.ElementalBelt,
		legs="Meghanada Chausses +1",
		feet="Meghanada Jambeaux +1"}
	sets.precast.WS['Last Stand'] = set_combine(sets.precast.WS, sets.LastStand)
	sets.precast.WS['Last Stand'].Mid = set_combine(sets.precast.WS.Mid, sets.LastStand)
	sets.precast.WS['Last Stand'].Acc = set_combine(sets.precast.WS.Acc, sets.LastStand)
	sets.precast.WS['Last Stand'].SAM = set_combine(sets.precast.WS, {})

	sets.Detonator = {}
	sets.precast.WS['Detonator'] = set_combine(sets.precast.WS, sets.Detonator)
	sets.precast.WS['Detonator'].Mid = set_combine(sets.precast.WS.Mid, sets.Detonator)
	sets.precast.WS['Detonator'].Acc = set_combine(sets.precast.WS.Acc, sets.Detonator)

	sets.Namas = {}
	sets.precast.WS['Namas Arrow'] = set_combine(sets.precast.WS, sets.Namas)
	sets.precast.WS['Namas Arrow'].Mid = set_combine(sets.precast.WS.Mid, sets.Namas)
	sets.precast.WS['Namas Arrow'].Acc = set_combine(sets.precast.WS.Acc, sets.Namas)
	sets.precast.WS['Namas Arrow'].SAM = set_combine(sets.precast.WS, {})

	sets.Jishnus = {
		head="Adhemar Bonnet",
		neck=gear.ElementalGorget,
		ear1="Dominance Earring +1",
		ear2="Moonshade Earring",
		body="Meghanada cuirie +1",
		hands="Kobo Kote",
		ring1="Apate Ring",
		ring2="Begrudging Ring",
		back=Belenus.DEXWS,
		waist=gear.ElementalBelt,
		legs="Darraigner's Brais",
		feet="Thereoid Greaves"}
	sets.precast.WS['Jishnu\'s Radiance'] = set_combine(sets.precast.WS, sets.Jishnus)
	sets.precast.WS['Jishnu\'s Radiance'].Mid = set_combine(sets.precast.WS.Mid, {})
	sets.precast.WS['Jishnu\'s Radiance'].Acc = set_combine(sets.precast.WS.Acc, {})
	
	sets.Apex = {
		head="Meghanada Visor +1",
		neck=gear.ElementalGorget,
		ear1="Ishvara Earring",
		ear2="Moonshade Earring",
		body="Pursuer's Doublet",
		hands="Meghanada Gloves +1",
		ring1="Garuda Ring +1",
		ring2="Apate Ring",
		back=Belenus.TP,
		waist=gear.ElementalBelt,
		legs="Meghanada Chausses +1",
		feet="Meghanada Jambeaux +1"}
	sets.precast.WS['Apex Arrow'] = set_combine(sets.precast.WS, sets.Apex)
	sets.precast.WS['Apex Arrow'].Mid = set_combine(sets.precast.WS.Mid, sets.Apex)
	sets.precast.WS['Apex Arrow'].Acc = set_combine(sets.precast.WS.Acc, sets.Apex)
	sets.precast.WS['Apex Arrow'].SAM = set_combine(sets.precast.WS, {})

	--------------------------------------
	-- Misc sets
	--------------------------------------

	sets.resting = {}
	sets.defense.PDT = {
		head="Genmei Kabuto",
		neck="Loricate Torque +1",
		ear1="Genmei Kabuto",
		ear2="Colossus's Earring",
		body="Meghanada Cuirie +1",
		hands="Iuitl Wristbands +1",
		ring1="Gelatinous Ring +1",
		ring2="Defending Ring",
		back="Shadow Mantle",
		waist="Flume Belt",
		legs="Iuitl Tights +1",
		feet="Herculean Boots"}
	sets.defense.MDT = {
		head="Dampening Tam",
		neck="Loricate Torque +1",
		ear1="Odnowa Earring +1",
		ear2="Etiolation Earring",
		body="Samnuha Coat",
		hands="Floral Gauntlets",
		ring1="Purity Ring",
		ring2="Defending Ring",
		back="Engulfer Cape +1",
		waist="Flax Sash",
		legs="Iuitl Tights +1",
		feet="Jute Boots +1"}
	--sets.Kiting = {feet="Jute Boots +1"}
	sets.buff.Barrage = {
		head="Arcadian Beret +1",
		neck="Erudition Necklace",
		ear1="Enervating Earring",
		ear2="Neritic Earring",
		body="Pursuer's Doublet",
		hands="Orion Bracers +1",
		ring1="Petrov Ring",
		ring2="Apate Ring",
		back=Belenus.TP,
		waist="Yemaya Belt",
		legs="Amini brague",
		feet="Meghanada Jambeaux +1"}
	sets.buff.Barrage.Mid = sets.buff.Barrage
	sets.buff.Barrage.Acc = sets.buff.Barrage
	sets.Overkill = {body="Arcadian Jerkin +1"}
	sets.Overkill.Preshot = set_combine(sets.precast.RA, sets.Overkill)
end

function job_pretarget(spell, action, spellMap, eventArgs)
    -- If autora enabled, use WS automatically at 100+ TP
    if spell.action_type == 'Ranged Attack' then
        if player.tp >= 1100 and state.AutoRA.value == 'WS' and not buffactive.amnesia then
            cancel_spell()
            use_weaponskill()
        end
    end
end 

function job_precast(spell, action, spellMap, eventArgs)
    if spell.english == "Trueflight" and (buffactive['Aurorastorm'] or buffactive['Aurorastorm II']) then
        equip({waist="Hachirin-no-Obi"})
    end
    if spell.english == "Trueflight" and player.tp > 2850 then
        equip({ear2="Ishvara Earring"})
    end
    if state.Buff.Camouflage then
        equip(sets.buff.Camouflage)
    elseif state.Buff.Overkill then
        equip(sets.Overkill.Preshot)
    end
    if spell.type == 'WeaponSkill' then
        if state.CapacityMode.value then
            equip(sets.CapacityMantle)
        end
    end
	if spell.action_type=="Ranged Attack" then
		if not midshot_real then
            if buffactive['Flurry'] then
                if state.flurrymode.value == 'FlurryII' then
                    equip(sets.precast.RA.Flurry2)
                else
                    equip(sets.precast.RA.Flurry)
                end
                --add_to_chat(122,"Flurry found")
            else
                equip(sets.precast.RA)
                --equip(sets.precast.RA.noFlurry)
                --add_to_chat(122,"No flurry")
            end
		end
	end
	if state.Buff[spell.english] ~= nil then
		state.Buff[spell.english] = true
	end
		--add_to_chat(8, state.CombatForm)
	if sam_sj then
		classes.CustomClass = 'SAM'
	end
	if spell.action_type == 'Ranged Attack' and player.equipment.range == gear.Bow then
		state.CombatWeapon:set('Bow')
	end
		-- add support for RangedMode toggles to EES
	if spell.english == 'Eagle Eye Shot' then
		classes.JAMode = state.RangedMode.value
	end
		-- Safety checks for weaponskills 
	if spell.type:lower() == 'weaponskill' then
		if player.tp < 1000 then
			eventArgs.cancel = true
				return
		end
	if ((spell.target.distance >8 and spell.skill ~= 'Archery' and spell.skill ~= 'Marksmanship') or (spell.target.distance >21)) then
		-- Cancel Action if distance is too great, saving TP
		add_to_chat(122,"Outside WS Range! /Canceling")
		eventArgs.cancel = true
		return
		elseif state.DefenseMode.value ~= 'None' then
			-- Don't gearswap for weaponskills when Defense is on.
			eventArgs.handled = true
		end
	end
		-- Ammo checks
	if spell.action_type == 'Ranged Attack' or
		(spell.type == 'WeaponSkill' and (spell.skill == 'Marksmanship' or spell.skill == 'Archery')) then
		check_ammo(spell, action, spellMap, eventArgs)
	end
end

function job_post_precast(spell, action, spellMap, eventArgs)
end

function job_midcast(spell, action, spellMap, eventArgs)
    -- Barrage
    if spell.action_type == 'Ranged Attack' and state.Buff.Barrage then
        if state.RangedMode.current == 'Mid' then
            equip(sets.buff.Barrage.Mid)
        elseif state.RangedMode.current == 'Acc' then
            equip(sets.buff.Barrage.Acc)
        else
            equip(sets.buff.Barrage.Acc)
        end
        eventArgs.handled = true
    end
    if state.Buff.Camouflage then
        equip(sets.buff.Camouflage)
    end
    if state.Buff.Overkill then
        equip(sets.Overkill)
    end
    if spell.action_type == 'Ranged Attack' then
        if state.CapacityMode.value then
            equip(sets.CapacityMantle)
        end
    end
end

function job_aftercast(spell, action, spellMap, eventArgs)
    -- autora
    if state.AutoRA.value ~= 'Normal' then
        use_ra(spell)
    end

    if state.Buff[spell.name] ~= nil then
        state.Buff[spell.name] = not spell.interrupted or buffactive[spell.english]
    end

end

function job_buff_change(buff, gain)
    --if S{"courser's roll"}:contains(buff:lower()) then
    --if string.find(buff:lower(), 'samba') then

    if state.Buff[buff] ~= nil then
        state.Buff[buff] = gain
        handle_equipping_gear(player.status)
    end
    if buff == 'Velocity Shot' and gain then
        windower.send_command('wait 290;input /echo **VELOCITY SHOT** Wearing off in 10 Sec.')
    elseif buff == 'Double Shot' and gain then
        windower.send_command('wait 90;input /echo **DOUBLE SHOT OFF**;wait 90;input /echo **DOUBLE SHOT READY**')
    elseif buff == 'Decoy Shot' and gain then
        windower.send_command('wait 170;input /echo **DECOY SHOT** Wearing off in 10 Sec.];wait 120;input /echo **DECOY SHOT READY**')
    end

    if  buff == "Samurai Roll" or buff == "Courser's Roll" or string.find(buff:lower(), 'flurry') then
        classes.CustomRangedGroups:clear()

        if (buff == "Samurai Roll" and gain) or buffactive['Samurai Roll'] then
            classes.CustomRangedGroups:append('SamRoll')
        end
       
    end

    if buff == "Camouflage" then
        if gain then
            equip(sets.buff.Camouflage)
            disable('body')
        else
            enable('body')
        end
    end

    if buff == "Camouflage" or buff == "Overkill" or buff == "Samurai Roll" or buff == "Courser's Roll" then
        if not midaction() then
            handle_equipping_gear(player.status)
        end
    end
end

function job_handle_equipping_gear(status, eventArgs)
    --select_earring()
end
 
function customize_idle_set(idleSet)
    if state.HybridMode.value == 'PDT' then
        state.IdleMode.value = 'PDT'
    elseif state.HybridMode.value ~= 'PDT' then
        state.IdleMode.value = 'Normal'
    end
	if state.Buff.Camouflage then
		idleSet = set_combine(idleSet, sets.buff.Camouflage)
	end
    if player.hpp < 90 then
        idleSet = set_combine(idleSet, sets.idle.Regen)
    end
    return idleSet
end
 
function customize_melee_set(meleeSet)
    if state.Buff.Camouflage then
    	meleeSet = set_combine(meleeSet, sets.buff.Camouflage)
    end
    if state.Buff.Overkill then
    	meleeSet = set_combine(meleeSet, sets.Overkill)
    end
    if state.CapacityMode.value then
        meleeSet = set_combine(meleeSet, sets.CapacityMantle)
    end
    return meleeSet
end
 
function job_status_change(newStatus, oldStatus, eventArgs)
    if newStatus == "Engaged" and player.equipment.range == gear.Bow then
         state.CombatWeapon:set('Bow')
    end

    if camo_active() then
        disable('body')
    else
        enable('body')
    end
end

function job_self_command(cmdParams, eventArgs)
end
 
function job_update(cmdParams, eventArgs)
    get_combat_form()
    get_custom_ranged_groups()
    sam_sj = player.sub_job == 'SAM' or false
    -- called here incase buff_change failed to update value
    state.Buff.Camouflage = buffactive.camouflage or false
    state.Buff.Overkill = buffactive.overkill or false

    if camo_active() then
        disable('body')
    else
        enable('body')
    end
end
 
---- Job-specific toggles.
--function job_toggle_state(field)
--    if field:lower() == 'autora' then
--        state.AutoRA = not state.AutoRA
--        return state.AutoRA
--    end
--end
 
---- Request job-specific mode lists.
---- Return the list, and the current value for the requested field.
--function job_get_option_modes(field)
--    if field:lower() == 'autora' then
--        return state.AutoRA
--    end
--end
-- 
---- Set job-specific mode values.
---- Return true if we recognize and set the requested field.
--function job_set_option_mode(field, val)
--    if field:lower() == 'autora' then
--        state.AutoRA = val
--        return true
--    end
--end
 
-- Set eventArgs.handled to true if we don't want the automatic display to be run.
function display_current_job_state(eventArgs)
    local msg = ''
    if state.AutoRA.value ~= 'Normal' then
        msg = '[Auto RA: ON]['..state.AutoRA.value..']'
    else
        msg = '[Auto RA: OFF]'
    end

    add_to_chat(122, 'Ranged: '..state.RangedMode.value..'/'..state.HybridMode.value..', WS: '..state.WeaponskillMode.value..', '..msg)
    
    eventArgs.handled = true
 
end

function get_custom_wsmode(spell, spellMap, ws_mode)
    if spell.skill == 'Archery' or spell.skill == 'Marksmanship' then
        if player.sub_job == 'SAM' then
            return 'SAM'
        end
    end
end

function get_combat_form()
    if S{'NIN', 'DNC'}:contains(player.sub_job) and rng_sub_weapons:contains(player.equipment.sub) then
        state.CombatForm:set("DW")
    else
        state.CombatForm:reset()
    end
end

function get_custom_ranged_groups()
	classes.CustomRangedGroups:clear()
    
    if buffactive['Samurai Roll'] then
        classes.CustomRangedGroups:append('SamRoll')
    end

end

function use_weaponskill()
    if player.equipment.range == gear.Bow then
        send_command('input /ws "'..auto_bow_ws..'" <t>')
    elseif player.equipment.range == gear.Gun then
        send_command('input /ws "'..auto_gun_ws..'" <t>')
    end
end

function job_state_change(stateField, newValue, oldValue)
    if stateField == 'Auto RA' then
        if newValue ~= 'Normal' then
            send_command('@wait 2.5; input /ra <t>')
        end
    end
end

function use_ra(spell)
    
    local delay = '2.2'
    -- BOW
    if player.equipment.range == gear.Bow then
        if spell.type:lower() == 'weaponskill' then
            delay = '2.25'
         else
             if buffactive["Courser's Roll"] then
                 delay = '0.7' -- MAKE ADJUSTMENT HERE
             elseif buffactive["Flurry II"] or buffactive.Overkill then
                 delay = '0.5'
             else
                delay = '1.05' -- MAKE ADJUSTMENT HERE
            end
        end
    else
    -- GUN 
        if spell.type:lower() == 'weaponskill' then
            delay = '2.25' 
        else
            if buffactive["Courser's Roll"] then
                delay = '0.7' -- MAKE ADJUSTMENT HERE
            elseif buffactive.Overkill or buffactive['Flurry II'] then
                delay = '0.5'
            else
                delay = '1.05' -- MAKE ADJUSTMENT HERE
            end
        end
    end
    send_command('@wait '..delay..'; input /ra <t>')
end

function camo_active()
    return state.Buff['Camouflage']
end

function check_ammo(spell, action, spellMap, eventArgs)
	if state.Buff['Unlimited Shot'] then
		if player.equipment.ammo ~= U_Shot_Ammo[player.equipment.range] then
			if player.inventory[U_Shot_Ammo[player.equipment.range]] or player.wardrobe[U_Shot_Ammo[player.equipment.range]] then
				add_to_chat(122,"Unlimited Shot active. Using custom ammo.")
				equip({ammo=U_Shot_Ammo[player.equipment.range]})
			elseif player.inventory[DefaultAmmo[player.equipment.range]] or player.wardrobe[DefaultAmmo[player.equipment.range]] then
				add_to_chat(122,"Unlimited Shot active but no custom ammo available. Using default ammo.")
				equip({ammo=DefaultAmmo[player.equipment.range]})
			else
				add_to_chat(122,"Unlimited Shot active but unable to find any custom or default ammo.")
			end
		end
	else
		if player.equipment.ammo == U_Shot_Ammo[player.equipment.range] and player.equipment.ammo ~= DefaultAmmo[player.equipment.range] then
			if DefaultAmmo[player.equipment.range] then
				if player.inventory[DefaultAmmo[player.equipment.range]] then
					add_to_chat(122,"Unlimited Shot not active. Using Default Ammo")
					equip({ammo=DefaultAmmo[player.equipment.range]})
				else
					add_to_chat(122,"Default ammo unavailable.  Removing Unlimited Shot ammo.")
					equip({ammo=empty})
				end
			else
				add_to_chat(122,"Unable to determine default ammo for current weapon.  Removing Unlimited Shot ammo.")
				equip({ammo=empty})
			end
		elseif player.equipment.ammo == 'empty' then
			if DefaultAmmo[player.equipment.range] then
				if player.inventory[DefaultAmmo[player.equipment.range]] then
					add_to_chat(122,"Using Default Ammo")
					equip({ammo=DefaultAmmo[player.equipment.range]})
				else
					add_to_chat(122,"Default ammo unavailable.  Leaving empty.")
				end
			else
				add_to_chat(122,"Unable to determine default ammo for current weapon.  Leaving empty.")
			end
		elseif player.inventory[player.equipment.ammo].count < 15 then
			add_to_chat(122,"Ammo '"..player.inventory[player.equipment.ammo].shortname.."' running low ("..player.inventory[player.equipment.ammo].count..")")
		end
	end
end

function select_default_macro_book()
	if player.sub_job == 'WAR'then
		    set_macro_page(1, 8)
	elseif player.sub_job == 'SAM' then
		    set_macro_page(1, 8)
	else
		set_macro_page(1, 8)
	end
end
