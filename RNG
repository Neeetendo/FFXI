hastetype=1
hastesambatype=0
enableautora = true
autora = false
default_ws = "Jishnu's Radiance"
default_ws = "Last Stand"
customincludes=false
--print(world.weather_element)

function get_sets()
	mote_include_version = 2
	include('Mote-Include.lua')
	include('organizer-lib')
	send_command('lua u autora')
end

function job_setup()
end

function user_setup()
	state.OffenseMode:options('Normal', 'Acc', 'AccExtreme')
	state.RangedMode:options('Normal', 'Acc', 'AccExtreme')
	state.hastemode = M{['description'] = 'Haste Mode'}
	state.hastemode:options('NoHaste','HasteI','HasteII','Capped')
	state.flurrymode = M{['description'] = 'Flurry Mode'}
	state.flurrymode:options('Flurry','FlurryII')
	state.rangetype = M{['description'] = 'Ranged Type'}
	state.rangetype:options('Fomalhaut','Annihilator','Accipiter','FailNot')
	state.cpmode = M(false, 'CP Mode')
	state.autows = M(false, 'AutoWS')
	state.idlemode = M{['description']="Idle Mode",'Normal','Regen'}
    state.PhysicalDefenseMode:options('PDT','Evasion')
    state.MagicalDefenseMode:options('MDT')

	state.Buff.Barrage = buffactive.Barrage or false
	state.Buff.Camouflage = buffactive.Camouflage or false
	state.Buff.Overkill = buffactive.Overkill or false
	
    elemental_ws = S{'Aeolian Edge', 'Trueflight', 'Wildfire', 'Hot Shot', 'Shining Blade', 'Seraph Blade', 'Flaming Arrow', 'Flash Nova'}
	
	gear.RAbullet = "Chrono Bullet"
	gear.WSbullet = "Chrono Bullet"
	gear.MAbullet = "Orichalc. Bullet"
	
	send_command('bind f2 ws Tachi:Shoha;input /echo Next Weapon Skill || Tachi: Fudo')
	send_command('bind f3 ws Tachi:Fudo;input /echo Next Weapon Skill || Tachi: Kasha')
	send_command('bind f4 ws Tachi:Kasha;input /echo Next Weapon Skill || (L)Tachi: Shoha (D)Tachi: Rana')
	send_command('bind f5 ws Tachi:Rana;input /echo Next Weapon Skill || Tachi: Shoha')
	send_command('bind f6 ws Tachi:Jinpu')
	send_command('bind f7 ws Tachi:Ageha')
	send_command('bind ^z gs c shoot')
	send_command('bind ^x gs c shootstop')
	send_command('bind ^c gs c toggle autows')
	send_command('bind f6 gs c rangetype')
	send_command('bind f7 gs c cycle flurrymode')

--	send_command('gs c hastetype')
--	send_command('gs c hastesambatype')
--	send_command('gs c cycle idlemode')
--	send_command('gs c cycle meleetype')
--	send_command('gs c cycle targetmode')
--	send_command('gs c maxth')
--	send_command('gs c magicevasion')
--	send_command('gs c damagetaken')
--	send_command('gs c ranged')
--	send_command('gs c accmode')
--	send_command('gs c dw')
--	send_command('gs c hastemode')
--	send_command('gs equip idle')
--	send_command('gs c cycle runaway')
--	send_command('gs c cycle runaway2')
--	send_command('gs c magicevasion')

	if(customincludes) then 
		include('custom-aliases.lua')
	end
	select_default_macro_book()
end

function user_unload()
	send_command('unbind f1')
	send_command('unbind f2')
	send_command('unbind f3')
	send_command('unbind f4')
	send_command('unbind f5')
	send_command('unbind f6')
	send_command('unbind f7')
	send_command('unbind f8')
	send_command('unbind home')
	send_command('unbind !home')
	send_command('unbind `')
end

function init_gear_sets()

	------------------------------------------------------------------------------------------------
	-------------------------------------- Belenus's Cape ------------------------------------------
	------------------------------------------------------------------------------------------------

	Belenus										= {}
	Belenus.MeleeTP								= { name="Belenus's Cape", augments={'DEX+20','Accuracy+20 Attack+20','Accuracy+10','"Dual Wield"+10','Phys. dmg. taken-10%',}}
	Belenus.RangeTP								= { name="Belenus's Cape", augments={'AGI+20','Rng.Acc.+20 Rng.Atk.+20','Rng.Acc.+10','"Store TP"+10',}}
	Belenus.Snapshot							= { name="Belenus's Cape", augments={'HP+60','Eva.+20 /Mag. Eva.+20','Mag. Evasion+10','"Snapshot"+10','Phys. dmg. taken-10%',}}
	Belenus.DA									= { name="Belenus's Cape", augments={'STR+20','Accuracy+20 Attack+20','Accuracy+9','"Dbl.Atk."+10',}}
	Belenus.CritWS								= { name="Belenus's Cape", augments={'DEX+20','Rng.Acc.+20 Rng.Atk.+20','DEX+10','Crit.hit rate+10',}}
	Belenus.AGIWS								= { name="Belenus's Cape", augments={'AGI+20','Rng.Acc.+20 Rng.Atk.+20','AGI+10','Weapon skill damage +10%',}}
	Belenus.STRWS								= { name="Belenus's Cape", augments={'STR+20','Accuracy+20 Attack+20','STR+10','Weapon skill damage +10%',}}
	Belenus.TF									= { name="Belenus's Cape", augments={'AGI+20','Mag. Acc+20 /Mag. Dmg.+20','AGI+10','Weapon skill damage +10%',}}

	------------------------------------------------------------------------------------------------
	---------------------------------------- Utility Sets ------------------------------------------
	------------------------------------------------------------------------------------------------	
	
	sets.cpmode									= {back="Mecisto. Mantle"}
	sets.alt									= {}
	sets.rangetype								= {}
	sets.rangetype.None							= {}
	sets.rangetype.Fomalhaut					= {
													range="Fomalhaut",
													ammo="Chrono Bullet"}
	sets.rangetype.Annihilator					= {
													range="Annihilator",
													ammo="Chrono Bullet"}
--	sets.rangetype.Gastraphetes					= {
--													range="Gastraphetes",
--													ammo="Quelling Bolt"}
	sets.rangetype.Accipiter					= {
													range="Accipiter",
													ammo="Hauksbok Arrow"}
	sets.rangetype.FailNot						= {
													range="Fail-Not",
													ammo="Chrono Arrow"}
	sets.bullets								= {}
	sets.bullets.Racc							= {ammo="Eradicating Bullet"}
	sets.defdown								= {ammo="Abrasion Bolt"}
		
	------------------------------------------------------------------------------------------------
	---------------------------------------- Midcast Sets ------------------------------------------
	------------------------------------------------------------------------------------------------
	
	sets.midcast.RA								= {
													head		="Arcadian Beret +3",
													body		="Orion Jerkin +3",
													hands		="Malignance Gloves",
													legs		="Adhemar Kecks +1",
													feet		="Adhemar Gamashes +1",
													neck		="Scout's Gorget +2",
													waist		="Yemaya Belt",
													left_ear	="Dedition Earring",
													right_ear	="Telos Earring",
													left_ring	="Ilabrat Ring",
													right_ring	="Dingir Ring",
													back		=Belenus.RangeTP}
	sets.midcast.RA.Acc							= set_combine(sets.midcast.RA, {
													head		="Malignance Chapeau",
													body		="Malignance Tabard",
													legs		="Malignance Tights",
													feet		="Malignance Boots",
													right_ring	="Petrov Ring",})
	sets.midcast.RA.AccExtreme					= set_combine(sets.midcast.RA.Acc, {
													head		="Orion Beret +3",
													feet		="Orion Socks +3",
													left_ring	="Regal Ring",})
	sets.buff.Barrage							= {
													head		="Arcadian Beret +3",
													body		="Arc. Jerkin +3",
													hands		="Orion Bracers +3",
													legs		="Arc. Braccae +3",
													feet		="Arcadian Socks +3",
													neck		="Scout's Gorget +2",
													waist		="Yemaya Belt",
													left_ear	="Enervating Earring",
													right_ear	="Telos Earring",
													left_ring	="Ilabrat Ring",
													right_ring	="Dingir Ring",
													back		=Belenus.CritWS}
	sets.BarrageExtra							= {}

	------------------------------------------------------------------------------------------------
	---------------------------------------- Precast Sets ------------------------------------------
	------------------------------------------------------------------------------------------------

	sets.precast.JA['Bounty Shot']				= {hands="Amini Glovelettes +1"}
	sets.precast.JA['Camouflage']				= {body="Orion Jerkin +3"}
--	sets.precast.JA['Sharpshot']				= {legs="Orion Braccae +1"}
	sets.precast.JA['Velocity Shot']			= {body="Amini Caban +1"}
	sets.precast.JA['Scavenge']					= {feet="Orion Socks +3"}
--	sets.precast.JA['Unlimited Shot']			= {feet="Amini Bottillons +1"}
	sets.precast.JA['Shadowbind']				= {hands="Orion Bracers +3"}
	sets.precast.JA['Eagle Eye Shot']			= {--EES maxes accuracy, only worry about crit chance, boost to EES from relic, attack and crit damage
													head		="Adhemar Bonnet +1",
													body		="Meghanada Cuirie +2",
													hands		="Mummu Wrists +2",
													legs		="Mummu Kecks +2",
													feet		="Adhemar Gamashes +1",
													neck		="Scout's Gorget +2",
													waist		="Yemaya Belt",
													left_ear	="Odr Earring",
													right_ear	="Sherida Earring",
													left_ring	="Mummu Ring",
													right_ring	="Begrudging Ring",
													back		=Belenus.CritWS}
	sets.precast.Waltz							= {}
	sets.precast.FC								= {
													head		="Carmine Mask +1",
													body		="Taeon Tabard",
													hands		="Leyline Gloves",
													legs		=HerculeanLegs.FC,
													feet		="Carmine Greaves +1",
													neck		="Baetyl Pendant",
													left_ear	="Etiolation Earring",
													right_ear	="Loquac. Earring",
													right_ring	="Weatherspoon Ring"}
	sets.precast.FC.Utsusemi					= set_combine(sets.precast.FC, {body="Passion Jacket",neck="Magoraga Beads"})

	-- No Flurry --
	sets.precast.RA								= {
													head		="Taeon Chapeau",
													body		="Oshosi Vest +1",
													hands		="Carmine Finger Gauntlets +1",
													legs		="Adhemar Kecks +1",
													feet		="Adhemar Gamashes +1",
													waist		="Yemaya Belt",
													back		=Belenus.Snapshot}
	sets.precast.RA.Gastra						= set_combine(sets.precast.RA, {body="Amini Caban +1"})
	
	-- Flurry Set --
	sets.precast.RA.Flurry						= set_combine(sets.precast.RA, {body="Amini Caban +1"})
	sets.precast.RA.Flurry.Gastra				= set_combine(sets.precast.RA.Gastra, {head="Orion Beret +3"})

	-- Flurry 2 -- 
	sets.precast.RA.Flurry2						= set_combine(sets.precast.RA.Flurry, {head="Orion Beret +3",feet="Arcadian Socks +3"})
	sets.precast.RA.Flurry2.Gastra				= set_combine(sets.precast.RA.Flurry.Gastra, {legs="Adhemar Kecks",feet="Arcadian Socks +3"})
	
	------------------------------------------------------------------------------------------------
	------------------------------------ Weaponskill Sets ------------------------------------------
	------------------------------------------------------------------------------------------------

	sets.precast.WS								= {

													head		="Orion Beret +3",
													body		=HerculeanBody.RangeWS,
													hands		="Meghanada Gloves +2",
													legs		="Arcadian Braccae +3",
													feet		=HerculeanFeet.RangeWS,
													neck		="Fotia Gorget",
													waist		="Fotia Belt",
													left_ear	="Ishvara Earring",
													right_ear	="Moonshade Earring",
													left_ring	="Regal Ring",
													right_ring	="Dingir Ring",
													back		=Belenus.AGIWS}
	sets.precast.MeleeWS						= {neck="Fotia Gorget",waist="Fotia Belt"}
	sets.precast.MagicWS						= {
													head=HerculeanHead.MAB,
													body=HerculeanBody.MAB,
													hands="Carmine Finger Gauntlets +1",
													legs=HerculeanLegs.WS,
													feet=HerculeanFeet.MAB,
													neck="Baetyl Pendant",
													waist="Eschan Stone",
													left_ear="Ishvara Earring",
													right_ear="Moonshade Earring",
													left_ring="Shiva Ring +1",
													right_ring="Dingir Ring",
													back=Belenus.TF}
	
	-- Marksmanship
	sets.precast.WS['Last Stand']				= sets.precast.WS
	sets.precast.WS['Last Stand'].Acc			= set_combine(sets.precast.WS, {})
	sets.precast.WS['Last Stand'].AccExtreme	= set_combine(sets.precast.WS['Last Stand'].Acc, {})
	sets.precast.WS['Detonator']				= sets.precast.WS
	sets.precast.WS['Detonator'].Acc			= set_combine(sets.precast.WS, {})
	sets.precast.WS['Detonator'].AccExtreme		= set_combine(sets.precast.WS['Detonator'].Acc, {})
	sets.precast.WS['Coronach']					= set_combine(sets.precast.WS, {})
	sets.precast.WS['Coronach'].Acc				= set_combine(sets.Coronach, {})
	sets.precast.WS['Coronach'].AccExtreme		= set_combine(sets.precast.WS['Coronach'].Acc, {})

	sets.precast.WS['Trueflight']				= set_combine(sets.precast.MagicWS, {left_ring="Weatherspoon Ring"})
	sets.precast.WS['Wildfire']					= set_combine(sets.precast.MagicWS, {right_ear="Crematio Earring",left_ring="Fenrir Ring +1"})	
	sets.precast.WS['Hot Shot']					= sets.precast.MagicWS
	
	-- Archery
	sets.precast.WS['Jishnu\'s Radiance']		= set_combine(sets.precast.WS, {
													body		="Meghanada Cuirie +2",
													feet		="Arcadian Socks +3",
													left_ear	="Odr Earring",
													back		=Belenus.CritWS})
	sets.precast.WS['Jishnu\'s Radiance'].Acc	= set_combine(sets.precast.WS['Jishnu\'s Radiance'], {})
	sets.precast.WS['Refulgent Arrow']			= sets.precast.WS
	sets.precast.WS['Apex Arrow']				= set_combine(sets.precast.WS, {
													body		="Arcadian Jerkin +3",
													feet		="Arcadian Socks +3",
													neck		="Scout's Gorget +2",
													waist		="Yemaya Belt",
													right_ear	="Telos Earring",})
	sets.precast.WS['Apex Arrow'].Acc			= set_combine(sets.precast.WS['Apex Arrow'], {})
	sets.precast.WS['Apex Arrow'].AccExtreme	= set_combine(sets.precast.WS['Apex Arrow'].Acc, {})
	
	-- Dagger
	sets.Evisceration							= {
													head="Adhemar Bonnet +1",
													body="Abnoba Kaftan",
													hands="Mummu Wrists +2",
													legs="Mummu Kecks +2",
													feet="Mummu Gamash. +2",
													neck="Fotia Gorget",
													waist="Fotia Belt",
													left_ear="Odr Earring",
													right_ear="Moonshade Earring",
													left_ring="Mummu Ring",
													right_ring="Ilabrat Ring",
													back=Belenus.CritWS}
	sets.precast.WS['Evisceration']				= sets.Evisceration
	sets.precast.WS['Evisceration'].Acc			= set_combine(sets.Evisceration, {})
	sets.precast.WS['Evisceration'].AccExtreme	= set_combine(sets.precast.WS['Evisceration'].Acc, {})
	
	-- Sword
	sets.Savage									= {
													head="Orion Beret +3",
													body=HerculeanBody.WS,
													hands="Meghanada Gloves +2",
													legs="Arcadian Braccae +3",
													feet=HerculeanFeet.WS,
													neck="Fotia Gorget",
													waist="Sailfi Belt +1",
													left_ear="Ishvara Earring",
													right_ear="Moonshade Earring",
													left_ring="Shukuyu Ring",
													right_ring="Regal Ring",
													back=Belenus.STRWS}
	sets.precast.WS['Savage Blade']				= sets.Savage
	
	-- Axe
	sets.Decimation								= {
													head="Adhemar Bonnet +1",
													body="Adhemar Jacket +1",
													hands="Adhemar Wrist. +1",
													legs="Samnuha Tights",
													feet=HerculeanFeet.TA,
													neck="Fotia Gorget",
													waist="Fotia Belt",
													left_ear="Brutal Earring",
													right_ear="Sherida Earring",
													left_ring="Epona's Ring",
													right_ring="Regal Ring",
													back=Belenus.DA}
	sets.precast.WS['Decimation']				= sets.Decimation
	sets.precast.WS['Ruinator']					= sets.Decimation
	sets.precast.WS['Rampage']					= sets.Evisceration

	sets.precast.WS['Shining Blade']			= set_combine(sets.precast.MagicWS, {right_ring="Weatherspoon Ring"})
	sets.precast.WS['Seraph Blade']				= set_combine(sets.precast.MagicWS, {right_ring="Weatherspoon Ring"})
	sets.precast.WS['Flaming Arrow']			= sets.precast.MagicWS
	sets.precast.WS['Flash Nova']				= sets.precast.MagicWS
	
	------------------------------------------------------------------------------------------------
	---------------------------------------- Town Sets ---------------------------------------------
	------------------------------------------------------------------------------------------------	

	sets.farmer									= {}
	sets.crafting								= {}
--	sets.adoulinmovement						= {body="Councilor's Garb"}

	------------------------------------------------------------------------------------------------
	--------------------------------------- Idle/DT Sets -------------------------------------------
	------------------------------------------------------------------------------------------------

	sets.resting								= {}
	sets.idle									= {
													head="Meghanada Visor +2",
													body="Meghanada Cuirie +2",
													hands="Meghanada Gloves +2",
													legs="Meghanada Chausses +2",
													feet="Meghanada Jambeaux +2",
													neck="Bathy Choker +1",
													waist="Flume Belt +1",
													left_ear="Infused Earring",
													right_ear="Eabani Earring",
													left_ring="Sheltered Ring",
													right_ring="Paguroidea Ring",
													back=Belenus.Snapshot}
	sets.idle.Town								= set_combine(sets.idle, {feet="Jute Boots +1"})
    sets.defense.PDT							= {
													head="Malignance Chapeau",
													body="Malignance Tabard",
													hands="Malignance Gloves",
													legs="Malignance Tights",
													feet="Malignance Boots",
													neck="Loricate Torque +1",
													waist="Flume Belt +1",
													left_ear="Telos Earring",
													right_ear="Eabani Earring",
													left_ring="Defending Ring",
													right_ring="Ilabrat Ring",
													back="Shadow Mantle"}
    sets.defense.MDT							= set_combine(sets.defense.PDT, {
													neck="Warder's Charm +1",
													waist="Flume Belt +1",
													left_ear="Odnowa Earring +1",
													right_ring="Archon Ring",
													back="Reiki Cloak",})

	------------------------------------------------------------------------------------------------
	---------------------------------------- Engaged Sets ------------------------------------------
	------------------------------------------------------------------------------------------------

	sets.engaged								= {
													head="Malignance Chapeau",
													body="Malignance Tabard",
													hands="Malignance Gloves",
													legs="Malignance Tights",
													feet="Malignance Boots",
													neck="Loricate Torque +1",
													waist="Kentarch Belt +1",
													left_ear="Telos Earring",
													right_ear="Dignitary's Earring",
													left_ring="Cacoethic Ring +1",
													right_ring="Ilabrat Ring",
													back=Belenus.MeleeTP}
	sets.hastemode								= {}
	if player.sub_job == 'NIN' or player.sub_job=='DNC' then
		sets.hastemode.NoHaste					= {}
		sets.hastemode.HasteI					= sets.hastemode.NoHaste
		sets.hastemode.HasteII					= sets.hastemode.NoHaste
		sets.hastemode.Capped					= {}
	end
	sets.engaged.Acc							= {}
	sets.engaged.Acc							= set_combine(sets.engaged,sets.engaged.Acc)
	sets.engaged.AccExtreme						= {}
	sets.engaged.AccExtreme						=set_combine(sets.engaged,sets.engaged.AccExtreme)
	sets.engaged.kclub							= {}
	sets.engaged.kclub							= sets.engaged.AccExtreme

	sets.buff.Camouflage						= {body="Orion Jerkin +3"}
	sets.Doubleshot								= set_combine(sets.midcast.RA, {
													head="Oshosi Mask +1",
													body="Arcadian Jerkin +3",
													hands="Oshosi Gloves +1",
													legs="Oshosi Trousers +1",
													feet="Oshosi Leggings +1"})
	sets.Overkill								= set_combine(sets.midcast.RA, {
													head="Oshosi Mask +1",
													body="Mummu Jacket +2",
													heads="Mummu Wrists +2",
													legs="Mummu Kecks +2",
													feet="Oshosi Leggings +1"})
	sets.Overkill.Preshot						= sets.precast.RA.Flurry2.Gastra
end

function job_precast(spell, action, spellMap, eventArgs)
end

function job_post_precast(spell, action, spellMap, eventArgs)
	if state.Buff.Camouflage then
		equip(sets.buff.Camouflage)
	--elseif state.Buff.Overkill then
		--equip(sets.Overkill.Preshot)
	end
	--log_data_structure(midshot_real)
	if spell.action_type=="Ranged Attack" then
		gastra_preshot = false
		if(player.equipment.range == "Gastraphetes") then 
			gastra_preshot = true
		end
		if not midshot_real then
			if buffactive['Flurry'] then
				if state.flurrymode.value == 'FlurryII' then
					if not gastra_preshot then
						equip(sets.precast.RA.Flurry2)
					else
						equip(sets.precast.RA.Flurry2.Gastra)
					end
				else
					if not gastra_preshot then
						equip(sets.precast.RA.Flurry)
					else
						equip(sets.precast.RA.Flurry.Gastra)
					end
				end
				--add_to_chat(122,"Flurry found")
			else
					if not gastra_preshot then
						equip(sets.precast.RA)
					else
						equip(sets.precast.RA.Gastra)
					end
				--equip(sets.precast.RA.noFlurry)
				--add_to_chat(122,"No flurry")
			end
		end
	end
	if elemental_ws:contains(spell.name) then
            -- Matching double weather (w/o day conflict).
		if spell.element == world.weather_element and (get_weather_intensity() == 2 and spell.element ~= elements.weak_to[world.day_element]) then
			equip({waist="Hachirin-no-Obi"})
            -- Target distance under 1.7 yalms.
--		elseif spell.target.distance < (1.7 + spell.target.model_size) then
--			equip({waist="Orpheus's Sash"})
            -- Matching day and weather.
		elseif spell.element == world.day_element and spell.element == world.weather_element then
			equip({waist="Hachirin-no-Obi"})
            -- Target distance under 8 yalms.
--		elseif spell.target.distance < (8 + spell.target.model_size) then
--			equip({waist="Orpheus's Sash"})
            -- Match day or weather.
		elseif spell.element == world.day_element or spell.element == world.weather_element then
			equip({waist="Hachirin-no-Obi"})
		end
	end
	if spell.english == "Trueflight" and player.tp > 2700 then
		equip({right_ear="Crematio Earring"})
	end
	if spell.english == "Savage Blade" and player.tp > 2700 then
		equip({right_ear="Sherida Earring"})
	end
end

-- Run after the general midcast() set is constructed.
function job_post_midcast(spell, action, spellMap, eventArgs)
	--    if state.TreasureMode.value ~= 'None' and spell.action_type == 'Ranged Attack' then
	--        equip(sets.TreasureHunter)
	--    end
	if spell.name == 'Ranged' then
		--print('ranged')
		if buffactive.Barrage then
			--print('equipping barrage')
			equip(sets.buff.Barrage)
		end
	end
	if spell.action_type == 'Ranged Attack' then
        if buffactive['Double Shot'] then
            equip(sets.Doubleshot)
        elseif buffactive['Overkill'] then
            equip(sets.Overkill)
		end
	end
end

function job_aftercast(spell, action, spellMap, eventArgs)
	if spell.type == 'WeaponSkill' and not spell.interrupted then
		state.Buff['Sneak Attack'] = false
		state.Buff['Trick Attack'] = false
		state.Buff['Feint'] = false
	end
end

function job_post_aftercast(spell, action, spellMap, eventArgs)
end

hastetbl = S{'haste','march','geo-haste','indi-haste','embrava','haste samba','aftermath','mighty guard'}
function job_buff_change(buff, gain)
	buff_lower = buff:lower()
	--print(buff_lower)
	if hastetbl:contains(buff_lower) then
		--print('buff '..buff)
		check_haste_level()
		handle_equipping_gear(player.status)
		--handle_equipping_gear(player.status)
	end
	if state.Buff[buff] ~= nil then
		if not midaction() then

			handle_equipping_gear(player.status)
		end
	end
end

function get_custom_wsmode(spell, spellMap, defaut_wsmode)
	local wsmode
	if state.RangedMode.current == 'Normal' then 
	elseif state.RangedMode.current == "Acc" then
		wsmode = 'Acc'
	elseif state.RangedMode.current == 'AccExtreme' then
		wsmode = 'AccExtreme'
	end

	if state.Buff['Sneak Attack'] then
		wsmode = 'SA'
	end
	if state.Buff['Trick Attack'] then
		wsmode = (wsmode or '') .. 'TA'
	end
	return wsmode
end

function check_ammo(spell, action, spellMap, eventArgs)
	-- Filter ammo checks depending on Unlimited Shot
	if state.Buff['Unlimited Shot'] then
		if player.equipment.ammo ~= U_Shot_Ammo[player.equipment.range] then
			if player.inventory[U_Shot_Ammo[player.equipment.range]] or player.wardrobe[U_Shot_Ammo[player.equipment.range]] then
				add_to_chat(122,"Unlimited Shot active. Using custom ammo.")
				equip({ammo=U_Shot_Ammo[player.equipment.range]})
			elseif player.inventory[DefaultAmmo[player.equipment.range]] or player.wardrobe[DefaultAmmo[player.equipment.range]] then
				add_to_chat(122,"Unlimited Shot active but no custom ammo available. Using default ammo.")
				equip({ammo=DefaultAmmo[player.equipment.range]})
			else
				add_to_chat(122,"Unlimited Shot active but unable to find any custom or default ammo.")
			end
		end
	else
		if player.equipment.ammo == U_Shot_Ammo[player.equipment.range] and player.equipment.ammo ~= DefaultAmmo[player.equipment.range] then
			if DefaultAmmo[player.equipment.range] then
				if player.inventory[DefaultAmmo[player.equipment.range]] then
					add_to_chat(122,"Unlimited Shot not active. Using Default Ammo")
					equip({ammo=DefaultAmmo[player.equipment.range]})
				else
					add_to_chat(122,"Default ammo unavailable.  Removing Unlimited Shot ammo.")
					equip({ammo=empty})
				end
			else
				add_to_chat(122,"Unable to determine default ammo for current weapon.  Removing Unlimited Shot ammo.")
				equip({ammo=empty})
			end
		elseif player.equipment.ammo == 'empty' then
			if DefaultAmmo[player.equipment.range] then
				if player.inventory[DefaultAmmo[player.equipment.range]] then
					add_to_chat(122,"Using Default Ammo")
					equip({ammo=DefaultAmmo[player.equipment.range]})
				else
					add_to_chat(122,"Default ammo unavailable.  Leaving empty.")
				end
			else
				add_to_chat(122,"Unable to determine default ammo for current weapon.  Leaving empty.")
			end
		elseif player.inventory[player.equipment.ammo].count < 15 then
			add_to_chat(122,"Ammo '"..player.inventory[player.equipment.ammo].shortname.."' running low ("..player.inventory[player.equipment.ammo].count..")")
		end
	end
end

function job_handle_equipping_gear(playerStatus, eventArgs)
	-- Check for SATA when equipping gear.  If either is active, equip
	-- that gear specifically, and block equipping default gear.
	check_buff('Haste', eventArgs)
end

function check_haste_level()
	hastelevel = 0
	if buffactive[33] and hastetype==1 then
		hastelevel=hastelevel+15
		add_to_chat(122,'Haste I detected')
	elseif buffactive[33] and hastetype==2 then
		hastelevel=hastelevel+30
		add_to_chat(122,'Haste II detected')
	end
	if hastesambatype==1 then
		hastelevel=hastelevel+5
		add_to_chat(122,'Haste samba detected')
	end
	if hastesambatype==2 then
		hastelevel=hastelevel+10
		add_to_chat(122,'Haste samba (dnc) detected')
	end
	if buffactive.march ==2 then --assuming song +3 at least
		hastelevel=hastelevel+25
		--add_to_chat(122,'2 marches detected')
	elseif buffactive.march ==1 then
		hastelevel=hastelevel+15
		--add_to_chat(122,'1 march detected')
	end
	if buffactive[580] then --assuming non idris, indi/geo haste
		hastelevel=hastelevel+33
		--add_to_chat(122,'Geo Haste detected')
	end
	if buffactive['Mighty Guard'] then
		hastelevel=hastelevel+15
		--add_to_chat(122,'Mighty Guard detected')
	end
	if buffactive['Slow'] then
		hastelevel=hastelevel-15
		add_to_chat(122,'Slow Detected')
	end
	add_to_chat(122,'Haste level '..hastelevel)
	if hastelevel == 0 then
		add_to_chat(122,'Haste level set to NoHaste')
		state.hastemode:set('NoHaste')
	elseif hastelevel >= 40 then
		add_to_chat(122,'Haste level set to Capped')
		state.hastemode:set('Capped')
	elseif hastelevel >= 25 then
		add_to_chat(122,'Haste level set to HasteII')
		state.hastemode:set('HasteII')
	elseif hastelevel >= 15 then
		add_to_chat(122,'Haste level set to HasteI')
		state.hastemode:set('HasteI')
	end
end

function customize_idle_set(idleSet)
	if state.RangedMode.current == 'Normal' then 
		idleSet = set_combine(sets.midcast.RA,idleSet) 
	else 
		idleSet = set_combine(sets.midcast.RA[state.RangedMode.current],idleSet) 
	end
	if state.rangetype.value ~= "None" then idleSet = set_combine(idleSet,sets.rangetype[state.rangetype.value]) end
	if state.idlemode.value ~= "Normal" then idleSet = set_combine(idleSet,sets.idle[state.idlemode.value]) end
	if state.cpmode.current == 'on' then idleSet = set_combine(idleSet,sets.cpmode) end
	if areas.Cities:contains(world.area) and world.area:contains("Adoulin") then
		idleSet = set_combine(idleSet, sets.adoulinmovement)
	elseif  world.area:contains("Mog Garden") then
		enable('main','sub')
		idleSet = set_combine(idleSet, sets.farmer)
		--windower.send_command('input /ja Release <me>;wait 2;input /ma '..tosummon..' <me>')
	end
	return idleSet
end

mainswap = 1

function customize_melee_set(meleeSet)
	meleeSet = set_combine(meleeSet,sets.hastemode[state.hastemode.value])
	if state.RangedMode.current == 'Normal' then meleeSet = set_combine(sets.midcast.RA,meleeSet)
	else meleeSet = set_combine(sets.midcast.RA[state.RangedMode.current],meleeSet) end

	if state.rangetype.value ~= "None" then meleeSet = set_combine(meleeSet,sets.rangetype[state.rangetype.value]) end
	if rangeswap then
		rangeswap=0
		equip(sets.rangetype[state.rangetype.value])
		if state.rangetype.value == "None" then 
			enable('ranged','ammo')
		else
			disable('ranged','ammo')
		end
	end
	if state.OffenseMode.current ~= 'Normal' then meleeSet = set_combine(meleeSet,sets.engaged[state.OffenseMode.current]) end
	if state.cpmode.current == 'on' then meleeSet = set_combine(meleeSet,sets.cpmode) end
	return meleeSet
end
function customize_resting_set(restingSet)
	if state.cpmode.current == 'on' then restingSet = set_combine(restingSet,sets.cpmode) end
	return restingSet
end

function job_update(cmdParams, eventArgs)
end
dw = 0;
dtmode = 0;
accmode = 0;
runaway = 0;
rangeswap = 0;
use_dualbox=false
statusammo = S{'Sleep Bolt','Blind Bolt','Bloody Bolt','Abrasion Bolt','Gashing Bolt','Oxidant Bolt','Acid Bolt','Kabura Arrow','Paralysis Arrow','Poison Arrow','Sleep Arrow','Spartun Bullet','Venom Bolt','Righteous Bolt','Holy Bolt','Darkling Bolt','Demon Arrow','Fire Arrow','Earth Arrow','Wind Arrow','Ice Arrow','Lightning Arrow','Water Arrow'}
priorrangedmode = 'Normal';
function job_self_command(cmdParams, eventArgs)
	command = cmdParams[1]:lower()
	if command=='hastetype' then
		if hastetype == 1 then hastetype=2 
		else hastetype = 1 end
		add_to_chat(122,'Haste '..hastetype)
		check_haste_level()
		handle_equipping_gear(player.status)
	elseif command=='shoot' then
		send_command('input /shoot <t>')
		if player.status == 'Engaged' then
			autora = true
		end
	elseif command=='setws' then
		ws_set = string.gsub(cmdParams[2],"_"," ")
		if ws_set =="Jishnus" then
			ws_set ="Jishnu's Radiance"
		end
		add_to_chat(005,'Default WS set to '..ws_set)
		default_ws = ws_set
		send_command('bind ^f6 input /ws '..ws_set..'')
	elseif command=='checkandshoot' then
		if player.status == 'Engaged' and autora == true and not midshot_real then
			send_command('input /shoot <t>')
			midshot = true
		end
	elseif command=='shootstop' then
		--print('stopping ')
		--print(autora)
		autora = false
		midshot = false
		midshot_real = false
	elseif command=='hastesambatype' then
		if hastesambatype == 0 then hastesambatype=1 
		elseif hastesambatype == 1 then hastesambatype = 2 
		else hastesambatype = 0 end
	elseif command=='rangetype' then
		enable('range','ammo')
		rangeswap=1
		send_command('gs c cycle rangetype')
		if state.rangetype.value == "Aeonic" then
			default_ws = "Last Stand"
			send_command('bind ^f6 input /ws "Last Stand" <t>')
		elseif state.rangetype.value == "Bow" then
			default_ws = "Jishnu's Radiance"
			send_command('bind ^f6 input /ws "Jishnu\'s Radiance" <t>')
		end
	elseif command=='ammotype' then 
		if state.rangetype.value ~= "None" then 
			atype = string.gsub(cmdParams[2],"_"," ")
			add_to_chat(122,atype)
			sets.rangetype[state.rangetype.value] = set_combine(sets.rangetype[state.rangetype.value],{ammo=atype})
			enable('ammo')
			equip(sets.rangetype[state.rangetype.value])
			disable('ammo')
			if statusammo:contains(atype) then
				if state.RangedMode.value ~= 'StatusAmmo' then 
					priorrangedmode = state.RangedMode.value 
				end
				state.RangedMode:set('StatusAmmo')
			else
				state.RangedMode:set(priorrangedmode)
			end
			add_to_chat(122,'Ranged Attack Mode set to ' .. state.RangedMode.value)
		end
	elseif command=='test' then
		print('equipping set')
		equip(sets.precast.WS["Rudra's Storm SA"])
	elseif command == 'demring' then
		equip({left_ring="Dimensional Ring (Dem)"})
		send_command('gs disable left_ring;wait 10;input /item "Dimensional Ring (Dem)" <me>;wait 1;input /item "Dimensional Ring (Dem)" <me>;wait 1;input /item "Dimensional Ring (Dem)" <me>;wait 10;gs enable left_ring')
	elseif cmdParams[1] == "switch_dualbox_binds" then
		if use_dualbox then
			send_command('alias stp_m6 gs c toggle hasteknife')
			send_command('alias stp_m7 gs c toggle mabdagger')
			use_dualbox=false
		else
			send_command('alias stp_m1 nil')
			send_command('alias stp_m2 nil')
			send_command('alias stp_m3 nil')
			send_command('alias stp_m4 nil')
			send_command('alias stp_m5 nil')
			send_command('alias stp_m6 nil')
			send_command('alias stp_m7 nil')
			send_command('alias stp_m8 nil')
			send_command('alias stp_m9 nil')
			use_dualbox=true
		end
	end
	command = cmdParams[1]:lower()
	command2 = cmdParams[2]
	if(customincludes) then 
		include('custom-commands.lua')
	end
end

function display_current_job_state(eventArgs)
	local msg = 'RNG狩'

	msg = msg .. ' :: '
	msg = msg .. '[Weapon: '..state.rangetype.current..']'
	msg = msg .. ' '
	msg = msg .. '[Range: '..state.RangedMode.current..']'
	msg = msg .. ' '
	msg = msg .. '[Flurry: '..state.flurrymode.current..']'
	msg = msg .. ' '
	if state.DefenseMode.value ~= 'None' then
		msg = msg .. '[ Defense: ' .. state.DefenseMode.value .. state[state.DefenseMode.value .. 'DefenseMode'].value .. ' ]'
	end
	add_to_chat(060, msg)

	eventArgs.handled = true
end

function check_buff(buff_name, eventArgs)
	if state.Buff[buff_name] then
		equip(sets.buff[buff_name] or {})
		eventArgs.handled = true
	end
end

function select_default_macro_book()
	if player.sub_job == 'WAR' then
		set_macro_page(1, 10)
	elseif player.sub_job == 'NIN' or player.sub_job == 'DNC' then
		set_macro_page(1, 10)
	end
end

require 'actions-custom'

midshot = false
function event_action(raw_actionpacket)
	local actionpacket = ActionPacket.new(raw_actionpacket)
	if not autora or not enableautora then 
		return 
	end
	
	actionstr = actionpacket:get_category_string() 

	if actionstr == 'ranged_begin' then
		--print('ranged begin')
		midshot_real=true
	end
	if actionstr == 'ranged_finish' and player.status == 'Engaged' then
		--print('ranged end')
		--send_command('wait .5;input /shoot <t>')
		--send_command('wait .6;input /shoot <t>')
		midshot=false
		midshot_real=false
		--print('autora')
		if autora and player.tp >= 1000 and state.autows.current == 'on' then
			send_command('wait 1;input /ws "'..default_ws..'" <t>;wait 3.5;gs c checkandshoot')
			--send_command('wait 1.3;input /ws "'..default_ws..'" <t>;')
		elseif autora then 
			--send_command('wait .7;input /shoot <t>')
			--send_command('wait .8;input /shoot <t>')
			--send_command('wait .9;input /shoot <t>')
			--send_command('wait .6;gs c checkandshoot')
			--send_command('wait .7;gs c checkandshoot')
			--send_command('wait .8;gs c checkandshoot')
			--send_command('wait .9;gs c checkandshoot')
			send_command('wait 1;gs c checkandshoot')
			--send_command('wait 1.1;gs c checkandshoot')
			--send_command('wait 1.3;gs c checkandshoot')
			--send_command('wait 1;gs c checkandshoot')
			--send_command('wait 1.3;gs c checkandshoot')
		end
	end
	
end
function ActionPacket.open_raw_listener(funct)
    if not funct or type(funct) ~= 'function' then return end
    local id = windower.raw_register_event('incoming chunk',function(id, org, modi, is_injected, is_blocked)
        if id == 0x28 then
            local act_org = windower.packets.parse_action(org)
            act_org.size = org:byte(5)
            local act_mod = windower.packets.parse_action(modi)
            act_mod.size = modi:byte(5)
            return act_to_string(org,funct(act_org,act_mod))
        end
    end)
    return id
end

ActionPacket.open_raw_listener(event_action)
