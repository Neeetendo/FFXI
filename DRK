--[[     
=== Features ===
If you want auto Reive detection for Ygnas Resolve+1, and Gavialis Helm for some of your WS, then you will need my User-Globals.lua
Otherwise, you might be able to get away without it.  (not tested)

If you don't use organizer, then remove the include('organizer-lib') in get_sets() and remove sets.Organizer

This lua has a few MODES you can toggle with hotkeys or macros, and there's a few situational RULES that activate without hotkeys

::MODES::

SouleaterMode 
Status: OFF by default. 
Hotkey: Toggle this with @F9 (window key + F9). 
Macro: /console gs c togggle SouleaterMode

Notes: This mode makes it possible to use Souleater in situations where you would normally avoid using it. When SouleaterMode 
is ON, Souleater will be canceled automatically after the first Weaponskill used. CAVEAT -. If Bloodweapon 
is active, or if Drain's HP Boost buff is active, then Souleater will remain active until the next WS used after 
either buff wears off. 

CapacityMode
Status: OFF by default. 
Hotkey: with ALT + = 
Macro: /console cs c toggle CapacityMode

Notes: It will full-time whichever piece of gear you specify in sets.CapacityMantle 

Extra Info: You can change the default (true|false) status of any MODE by changing their values in job_setup()

::RULES::

Gavialis helm
Status: enabled
Setting: set use_gavialis = true below in job_setup. 

Notes: wslist defines weaponskills uused with Gavialis helm. This is a recent change Jan/2020, as it 
used to be the opposite, where you defined ws's that you didn't want to use it.

Ygna's Resolve +1 
Status: enabled in Reive
Setting: n/a

Notes: Will automatically be used when you're in a reive. If you have my User-Globals.lua this will work
with all your jobs that use mote's includes. Not just this one! 

Moonshade earring
Status: Not used for WS's at 3000 TP. 
Setting: n/a

You can hit F12 to display custom MODE status as well as the default stuff. 

Single handed weapons are handled in the sets.engaged.SW set. (sword + shield, etc.)

::NOTES::

My sets have a specific order, or they will not function correctly. 
sets.engaged.[CombatForm][CombatWeapon][Offense or HybridMode][CustomMeleeGroups or CustomClass]

CombatForm = Haste, DW, SW
CombatWeapon = GreatSword, Scythe, Apocalypse, Ragnarok, Caladbolg, Liberator, Anguta
OffenseMode = Mid, Acc
HybridMode = PDT
CustomMeleeGroups = AM3, AM, Haste
CustomClass = OhShit 

CombatForm Haste is used when Last Resort + Hasso AND either Haste, March, Indi-Haste Geo-Haste is on you.

CombatForm DW will activate with /dnc or /nin AND a weapon listed in drk_sub_weapons equipped offhand. 
SW is active with an empty sub-slot, or a shield listed in the shields = S{} list.  

CombatWeapon GreatSword will activate when you equip a GS listed in gsList in job_setup(). 
CombatWeapon Scythe will activate when you equip a Scythe listed in scytheList in job_setup(). 
Weapons that do not fall into these groups, or have sets by weapon name, will use default sets.engaged

most gear sets derrive themselves from sets.engaged, so try to keep it updated. It's much smarter to derrive sets than to 
completely re-invent each gear set for every weapon. Let your gear inherit. Less code written means less errors. 

CustomMeleeGroups AM3 will activate when Aftermath lvl 3 is up, and CustomMeleeGroups AM will activate when relic Aftermath is up.
There are no empy AM sets for now.

--]]
--
-- Initialization function for this job file.
function get_sets()
    mote_include_version = 2
    include('Mote-Include.lua')
    include('organizer-lib')
end

function job_setup()
    include('Mote-TreasureHunter')
    state.TreasureMode:set('None')
    state.CapacityMode			= M(false, 'Capacity Point Mantle')
    state.Buff.Souleater		= buffactive.souleater or false
    state.Buff['Last Resort']	= buffactive['Last Resort'] or false
    -- Set the default to false if you'd rather SE always stay acitve
    state.SouleaterMode			= M(true, 'Soul Eater Mode')
    -- state.LastResortMode = M(false, 'Last Resort Mode')
    -- Use Gavialis helm?
    use_gavialis				= false
    -- Weaponskills you want Gavialis helm used with (only considered if use_gavialis = true)
    wsList						= S{'Entropy', 'Resolution'}
    -- Greatswords you use. 
    gsList						= S{'Ragnarok', 'Caladbolg', 'Nandaka' }
    scytheList					= S{'Liberator', 'Apocalypse', 'Anguta', 'Raetic Scythe', 'Deathbane', 'Twilight Scythe' }
    remaWeapons					= S{'Apocalypse', 'Anguta', 'Liberator', 'Caladbolg', 'Ragnarok', 'Redemption'}
    shields						= S{'Blurred Shield +1'}
    -- Mote has capitalization errors in the default Absorb mappings, so we use our own
    absorbs						= S{'Absorb-STR', 'Absorb-DEX', 'Absorb-VIT', 'Absorb-AGI', 'Absorb-INT', 'Absorb-MND', 'Absorb-CHR', 'Absorb-Attri', 'Absorb-ACC', 'Absorb-TP'}
    -- Offhand weapons used to activate DW mode
    swordList					= S{"Sangarius", "Sangarius +1", "Usonmunku", "Perun +1", "Tanmogayi"}
    get_combat_form()
    get_combat_weapon()
    update_melee_groups()
end

function user_setup()
    state.OffenseMode:options('Normal', 'Mid', 'Acc')
    state.HybridMode:options('Normal', 'PDT')
    state.WeaponskillMode:options('Normal', 'Mid', 'Acc')
    state.CastingMode:options('Normal', 'Acc')
    state.IdleMode:options('Normal', 'Sphere')
    state.RestingMode:options('Normal')
    state.PhysicalDefenseMode:options('PDT', 'Reraise')
    state.MagicalDefenseMode:options('MDT')
	state.weapontype = M{['description'] = 'Weapon Type'}
	state.weapontype:options('Anguta', 'Apocalypse', 'Nandaka', 'Naegling', 'Mace')
	war_sj = player.sub_job == 'WAR' or false

		---.Key Binds.---
	send_command('bind f2 ws Entropy')
	send_command('bind f3 ws CrossReaper')
	send_command('bind f4 ws Quietus')
	send_command('bind f5 ws Catastrophe')
	send_command('bind f6 ws Insurgency')
	send_command('bind f7 ws Shockwave')
	
	-- CTRL
	send_command('bind ^q gs c weapontype')
	send_command('bind ^1 input /ja "Scarlet Delirium" <me>')
	send_command('bind ^2 input /ja "Last Resort" <me>')
	send_command('bind ^3 input /ja "Consume Mana" <me>')
	send_command('bind ^4 input /ja "Weapon Bash" <t>')
	send_command('bind ^5 input /ja "Souleater" <me>')
	send_command('bind ^6 input /ja "Arcane Circle" <me>;wait 1;input /ja "Arcane Crest <t>')

	send_command('bind ^numpad0 input /ja "Nether Void" <me>;wait 1;input /ja "Dark Seal" <me>')
	send_command('bind ^numpad1 input /ma "Absorb-ACC" <t>')
	send_command('bind ^numpad2 input /ma "Absorb-STR" <t>')
	send_command('bind ^numpad3 input /ma "Absorb-TP" <t>')
	send_command('bind ^numpad4 input /ma "Stun" <t>')
	send_command('bind ^numpad5 input /ma "Drain III" <t>')
	send_command('bind ^numpad6 input /ma "Dread Spikes" <me>')
	send_command('bind ^numpad7 input /ma "Endark II" <me>')

	-- ALT
    send_command('bind !1 input /ja "Hasso" <me>')
    send_command('bind !2 input /ja "Meditate" <me>')
    send_command('bind !3 input /ja "Third Eye" <me>')
    send_command('bind !4 input /ja "Sekkanoki" <me>')
    send_command('bind !5 input /ja "Seigan" <me>')
    send_command('bind !6 input /ja "Warding Circle" <me>')
	
    if player.sub_job == 'DRG' then
		send_command('bind !1 input /ja "Jump" <t>')
		send_command('bind !2 input /ja "High Jump" <t>')
		send_command('bind !3 input /ja "Super Jump" <t>')
		send_command('bind !4 input /ja "Ancient Circle" <me>')
	end	

	send_command('bind ^= gs c cycle treasuremode')
	send_command('bind != gs c toggle CapacityMode')
	send_command('bind @f9 gs c toggle SouleaterMode')
	send_command('bind !- gs equip sets.crafting')
--	send_command('bind ^` gs c toggle LastResortMode')
		---.Key Binds End.---
	
    select_default_macro_book()
end

function file_unload()
    send_command('unbind ^`')
    send_command('unbind !=')
    send_command('unbind ^[')
    send_command('unbind ![')
    send_command('unbind @f9')
	
	send_command('unbind f1')
	send_command('unbind f2')
	send_command('unbind f3')
	send_command('unbind f4')
	send_command('unbind f5')
	send_command('unbind f6')
	send_command('unbind f7')
	send_command('unbind f8')
	send_command('unbind `')
    send_command('unbind !`')
    send_command('unbind ^1')
    send_command('unbind ^2')
    send_command('unbind ^3')
    send_command('unbind ^4')
    send_command('unbind ^5')
    send_command('unbind ^6')
    send_command('unbind ^7')
    send_command('unbind ^8')
    send_command('unbind ^9')
    send_command('unbind ^0')
    send_command('unbind !1')
    send_command('unbind !2')
    send_command('unbind !3')
    send_command('unbind !4')
    send_command('unbind !5')
    send_command('unbind !6')
    send_command('unbind !7')
    send_command('unbind !8')
    send_command('unbind !9')
    send_command('unbind !0')
	send_command('unbind ^numpad0')
	send_command('unbind ^numpad1')
	send_command('unbind ^numpad2')
	send_command('unbind ^numpad3')
	send_command('unbind ^numpad4')
	send_command('unbind ^numpad5')
	send_command('unbind ^numpad6')
	send_command('unbind ^numpad7')
	send_command('unbind ^numpad8')
	send_command('unbind ^numpad9')
	send_command('unbind !numpad0')
	send_command('unbind !numpad1')
	send_command('unbind !numpad2')
	send_command('unbind !numpad3')
	send_command('unbind !numpad4')
	send_command('unbind !numpad5')
	send_command('unbind !numpad6')
	send_command('unbind !numpad7')
	send_command('unbind !numpad8')
	send_command('unbind !numpad9')
end

function init_gear_sets()

	------------------------------------------------------------------------------------------------
	-------------------------------------- Ankou's Mantle ------------------------------------------
	------------------------------------------------------------------------------------------------
	
	Ankou										= {}
	Ankou.FC									= { name="Ankou's Mantle", augments={'INT+20','Mag. Acc+20 /Mag. Dmg.+20','"Fast Cast"+10','Spell interruption rate down-10%',}}	
	Ankou.MAB									= {}
	Ankou.STRDA									= { name="Ankou's Mantle", augments={'STR+20','Accuracy+20 Attack+20','STR+10','"Dbl.Atk."+10','Phys. dmg. taken-10%',}}
	Ankou.DEXDA									= { name="Ankou's Mantle", augments={'DEX+20','Accuracy+20 Attack+20','Accuracy+10','"Dbl.Atk."+10','Phys. dmg. taken-10%',}}
	Ankou.INTDA									= { name="Ankou's Mantle", augments={'INT+20','Accuracy+20 Attack+20','INT+10','"Dbl.Atk."+10','Phys. dmg. taken-10%',}}
	Ankou.VITWS									= { name="Ankou's Mantle", augments={'VIT+20','Accuracy+20 Attack+20','VIT+10','Weapon skill damage +10%','Phys. dmg. taken-10%',}}
	Ankou.STRWS									= { name="Ankou's Mantle", augments={'STR+20','Accuracy+20 Attack+20','STR+10','Weapon skill damage +10%','Phys. dmg. taken-10%',}}
	Ankou.Crit									= { name="Ankou's Mantle", augments={'DEX+20','Accuracy+20 Attack+20','DEX+10','Crit.hit rate+10','Phys. dmg. taken-10%',}}
	Ankou.Haste									= { name="Ankou's Mantle", augments={'DEX+20','Accuracy+20 Attack+20','Accuracy+10','Haste+10','Phys. dmg. taken-10%',}}
	Ankou.Hybrid								= { name="Ankou's Mantle", augments={'HP+60','Eva.+20 /Mag. Eva.+20','Mag. Evasion+10','"Dbl.Atk."+10','Phys. dmg. taken-10%',}}
	
	------------------------------------------------------------------------------------------------
	------------------------------------------ Weapons ---------------------------------------------
	------------------------------------------------------------------------------------------------
	
	sets.weapontype										= {}
	sets.weapontype.None								= {}
	sets.weapontype.Anguta								= { main="Anguta",			sub="Utu Grip" }
	sets.weapontype.Apocalypse							= { main="Apocalypse",		sub="Utu Grip" }
--	sets.weapontype.Redemption							= { main="Redemption",		sub="Utu Grip" }
	sets.weapontype.Nandaka								= { main="Nandaka",			sub="Utu Grip" }
--	sets.weapontype.Caladbolg							= { main="Caladbolg",		sub="Utu Grip" }
	sets.weapontype.Naegling							= { main="Naegling",		sub="Blurred Shield +1"}
	sets.weapontype.Mace								= { main="Loxotic Mace +1",	sub="Blurred Shield +1"}
	
	------------------------------------------------------------------------------------------------
	------------------------------------ Job Abilities Sets ----------------------------------------
	------------------------------------------------------------------------------------------------
	
	sets.precast.JA['Nether Void']				= {	legs		="Heath. Flanchard +2" }
	sets.precast.JA['Dark Seal']				= {	head		="Fall. Burgeonet +3" }
	sets.precast.JA['Souleater']				= {	head		="Ig. Burgeonet +3" }
	sets.precast.JA['Weapon Bash']				= {	hands		="Ig. Gauntlets +3" }
	sets.precast.JA['Blood Weapon']				= {	body		="Fall. Cuirass +3" }
	sets.precast.JA['Arcane Circle']			= { feet		="Ig. Sollerets +2" }
    sets.precast.JA['Jump']						= {
													ammo		="Coiste Bodhar",
													head		="Hjarrandi Helm",
													body		="Hjarrandi Breast.",
													hands		="Crusher Gauntlets",
													legs		="Odyssean Cuisses",
													feet		="Flam. Gambieras +2",
													neck		="Abyssal Beads +2",
													waist		="Ioskeha Belt +1",
													left_ear	="Schere Earring",
													right_ear	="Telos Earring",
													left_ring	="Niqmaddu Ring",
													right_ring	="Chirich Ring +1",
													back		=Ankou.DEXDA}
    sets.precast.JA['High Jump']				= sets.precast.JA.Jump
	
	------------------------------------------------------------------------------------------------
	---------------------------------------- Precast Sets ------------------------------------------
	------------------------------------------------------------------------------------------------

    sets.precast.FC								= {
													ammo		="Sapience Orb",
													head		="Carmine Mask +1",
													body		="Sacro Breastplate",
													hands		="Leyline Gloves",
													legs		="Eschite Cuisses",
													feet		="Odyssean Greaves",
													neck		="Baetyl Pendant",
													waist		="Austerity Belt +1",
													left_ear	="Etiolation Earring",
													right_ear	="Loquac. Earring",
													left_ring	="Kishar Ring",
													right_ring	="Weather. Ring",
													back		=Ankou.FC}
    sets.precast.FC['Drain']					= {
													main		="Misanthropy",
													sub			="Khonsu",
													range		="Ullr",
													head		="Carmine Mask +1",
													body		="Sacro Breastplate",
													hands		="Leyline Gloves",
													legs		="Eschite Cuisses",
													feet		="Odyssean Greaves",
													neck		="Baetyl Pendant",
													waist		="Austerity Belt +1",
													left_ear	="Etiolation Earring",
													right_ear	="Loquac. Earring",
													left_ring	="Kishar Ring",
													right_ring	="Weather. Ring",
													back		=Ankou.FC}
    sets.precast.FC['Aspir']					= sets.precast.FC['Drain']
    sets.precast.FC['Elemental Magic']			= set_combine(sets.precast.FC, {})
    sets.precast.FC['Enfeebling Magic']			= set_combine(sets.precast.FC, {})
    sets.precast.FC.Cure						= set_combine(sets.precast.FC, {})
	
	------------------------------------------------------------------------------------------------
	---------------------------------------- Utility Sets ------------------------------------------
	------------------------------------------------------------------------------------------------
	
--	sets.CapacityMantle							= { back="Mecistopins Mantle" }
--	sets.WSDayBonus								= { head="Gavialis Helm" }
--	sets.WSBack									= { back="Trepidity Mantle" }
    sets.BrutalLugra							= { left_ear="Brutal Earring", right_ear="Lugra Earring +1" }
    sets.IshvaraLugra							= { left_ear="Ishvara Earring", right_ear="Lugra Earring +1" }
    sets.Lugra									= { right_ear="Lugra Earring +1" }
    sets.Brutal									= { right_ear="Brutal Earring" }
    sets.Ishvara								= { right_ear="Ishvara Earring" }
												
	------------------------------------------------------------------------------------------------
	---------------------------------------- Midcast Sets ------------------------------------------
	------------------------------------------------------------------------------------------------
	
    sets.midcast.FastRecast						= {}
    sets.midcast.Utsusemi						= {}
    sets.midcast['Dark Magic']					= {
													ammo		="Pemphredo Tathlum",
													head		="Ig. Burgeonet +3",
													body		="Carm. Sc. Mail +1",
													hands		="Fall. Fin. Gaunt. +3",
													legs		="Fall. Flanchard +3",
													feet		="Rat. Sollerets +1",
													neck		="Erra Pendant",
													waist		="Eschan Stone",
													left_ear	="Dark Earring",
													right_ear	="Mani Earring",
													left_ring	="Archon Ring",
													right_ring	="Evanescence Ring",
													back		="Niht Mantle"}
    sets.midcast['Dark Magic'].Acc				= set_combine(sets.midcast['Dark Magic'], {})
    sets.midcast.Endark							= set_combine(sets.midcast['Dark Magic'], {})
    sets.midcast['Enfeebling Magic']			= set_combine(sets.midcast['Dark Magic'], {})
    sets.midcast['Elemental Magic']				= {
													ammo		="Ghastly Tathlum +1",
													head		="Nyame Helm",
													body		="Fall. Cuirass +3",
													hands		="Fall. Fin. Gaunt. +3",
													legs		="Nyame Flanchard",
													feet		="Heath. Sollerets +2",
													neck		="Baetyl Pendant",
													waist		="Eschan Stone",
													left_ear	="Malignance Earring",
													right_ear	="Crematio Earring",
													left_ring	="Shiva Ring +1",
													right_ring	="Fenrir Ring +1",
													back		=Ankou.FC}
	sets.midcast['Dread Spikes']				= {
													ammo		="Staunch Tathlum +1",
													head		="Hjarrandi Helm",
													body		="Heath. Cuirass +2",
													hands		="Sakpata's Gauntlets",
													legs		="Sakpata's Cuisses",
													feet		="Rat. Sollerets +1",
													neck		="Unmoving Collar +1",
													waist		="Eschan Stone",
													left_ear	="Odnowa Earring +1",
													right_ear	="Tuisto Earring",
													left_ring	="Gelatinous Ring +1",
													right_ring	="Moonlight Ring",
													back		=Ankou.FC}
    sets.midcast['Dread Spikes'].Acc			= set_combine(sets.midcast['Dark Magic'], {})
    sets.midcast.Drain							= {
													main		="Misanthropy",
													sub			="Khonsu",
													range		="Ullr",
													head		="Fall. Burgeonet +3",
													body		="Acro Surcoat",
													hands		="Fall. Fin. Gaunt. +3",
													legs		="Heath. Flanchard +2",
													feet		="Rat. Sollerets +1",
													neck		="Erra Pendant",
													waist		="Austerity Belt +1",
													left_ear	="Hirudinea Earring",
													right_ear	="Mani Earring",
													left_ring	="Archon Ring",
													right_ring	="Evanescence Ring",
													back		="Niht Mantle"}
    sets.midcast.Aspir							= sets.midcast.Drain
    sets.midcast.Drain.Acc						= set_combine(sets.midcast.Drain, {})
    sets.midcast.Aspir.Acc						= sets.midcast.Drain.Acc
    sets.midcast.Drain.OhShit					= set_combine(sets.midcast.Drain, {})
    sets.midcast.Absorb							= set_combine(sets.midcast['Dark Magic'], {
													hands		="Pavor Gauntlets",
													back		="Chuparrosa Mantle"})
    sets.midcast['Absorb-TP']					= set_combine(sets.midcast['Dark Magic'], {
													head		="Fall. Burgeonet +3",
													hands		="Heath. Gauntlets +2"})
    sets.midcast.Absorb.Acc						= set_combine(sets.midcast['Dark Magic'].Acc, {})
    sets.midcast['Absorb-TP'].Acc				= set_combine(sets.midcast['Dark Magic'], {})
    sets.midcast['Blue Magic']					= set_combine(sets.midcast['Dark Magic'], {})

    sets.precast.RA								= {}
    sets.midcast.RA								= {}

	------------------------------------------------------------------------------------------------
	------------------------------------ Weaponskill Sets ------------------------------------------
	------------------------------------------------------------------------------------------------

	sets.precast.WS								= {
													ammo		="Knobkierrie",
													head		="Nyame Helm",
													body		="Ignominy Cuirass +3",
													hands		="Nyame Gauntlets",
													legs		="Nyame Flanchard",
													feet		="Nyame Sollerets",
													neck		="Abyssal Beads +2",
													waist		="Sailfi Belt +1",
													left_ear	="Thrud Earring",
													right_ear	="Moonshade Earring",
													left_ring	="Niqmaddu Ring",
													right_ring	="Regal Ring",
													back		=Ankou.STRWS}
    sets.precast.WS.Mid							= set_combine(sets.precast.WS, {})
    sets.precast.WS.Acc							= set_combine(sets.precast.WS.Mid, {})

									------- Great Sword -------
    -- Resolution (STR 86-100%)
    sets.precast.WS.Resolution					= set_combine(sets.precast.WS, {
													ammo		="Coiste Bodhar",
													head		="Flam. Zucchetto +2",
													body		="Sakpata's Plate",
													hands		="Sakpata' Gauntlets",
													legs		="Sakpata's Cuisses",
													feet		="Flam. Gambieras +2",
													neck		="Fotia Gorget",
													waist		="Fotia Belt",
													left_ear	="Schere Earring",
													back		=Ankou.STRDA})
    sets.precast.WS.Resolution.Mid				= set_combine(sets.precast.WS.Resolution, {})
    sets.precast.WS.Resolution.Acc				= set_combine(sets.precast.WS.Resolution.Mid, {}) 

    -- Torcleaver (VIT 80%)
    sets.precast.WS.Torcleaver					= set_combine(sets.precast.WS, {
--													ammo		="Crepuscular Pebble",
--													hands		="Sakpata's Gauntlets",
													back		=Ankou.VITWS})
    sets.precast.WS.Torcleaver.Mid				= set_combine(sets.precast.WS.Torcleaver, {})
    sets.precast.WS.Torcleaver.Acc				= set_combine(sets.precast.WS.Torcleaver.Mid, {})


									------- Scythe -------
    -- Insurgency (STR/INT 20%)
    sets.precast.WS.Insurgency					= set_combine(sets.precast.WS, {
													head		="Heath. Burgeon. +2",
													left_ear	="Schere Earring",
													back		=Ankou.STRDA})
    sets.precast.WS.Insurgency.Mid				= set_combine(sets.precast.WS.Insurgency, {})
    sets.precast.WS.Insurgency.Acc				= set_combine(sets.precast.WS.Insurgency.Mid, {})

	-- Catastrophe (STR/INT 40%)
    sets.precast.WS.Catastrophe					= set_combine(sets.precast.WS, {
													head		="Heath. Burgeon. +2",
													ammo		="Crepuscular Pebble",
													right_ear	="Lugra Earring +1",})
    sets.precast.WS.Catastrophe.Mid				= set_combine(sets.precast.WS.Catastrophe, {})
    sets.precast.WS.Catastrophe.Acc				= set_combine(sets.precast.WS.Catastrophe.Mid, {})

    -- Cross Reaper (STR/MND 60%)
    sets.precast.WS['Cross Reaper']				= set_combine(sets.precast.WS, {
													ammo		="Crepuscular Pebble",
													head		="Heath. Burgeon. +2",
--													body		="Sakpata's Plate",
													hands		="Sakpata's Gauntlets"})
    sets.precast.WS['Cross Reaper'].Mid			= set_combine(sets.precast.WS['Cross Reaper'], {})
    sets.precast.WS['Cross Reaper'].Acc			= set_combine(sets.precast.WS['Cross Reaper'].Mid, {})
	
	-- Entropy (INT 86-100%) 
    sets.precast.WS.Entropy						= set_combine(sets.precast.WS, {
													ammo		="Crepuscular Pebble",
--													ammo		="Coiste Bodhar",
													head		="Heath. Burgeon. +2",
													hands		="Sakpata' Gauntlets",
													waist		="Fotia Belt",
													left_ear	="Lugra Earring +1",
													right_ring	="Metamor. Ring +1",
													back		=Ankou.INTDA})
    sets.precast.WS.Entropy.Mid					= set_combine(sets.precast.WS.Entropy, {})
    sets.precast.WS.Entropy.Acc					= set_combine(sets.precast.WS.Entropy.Mid, {})

    -- Quietus (STR/MND 60%)
    sets.precast.WS.Quietus						= set_combine(sets.precast.WS, {
													ammo		="Crepuscular Pebble",
													head		="Heath. Burgeon. +2",
													hands		="Sakpata's Gauntlets",})
    sets.precast.WS.Quietus.Mid					= set_combine(sets.precast.WS.Quietus, {})
    sets.precast.WS.Quietus.Acc					= set_combine(sets.precast.WS.Quietus.Mid, {})

    -- Spiral Hell (STR/INT 50%)
    sets.precast.WS['Spiral Hell']				= set_combine(sets.precast.WS, {
													head		="Heath. Burgeon. +2",
													back		=Ankou.STRDA})
    sets.precast.WS['Spiral Hell'].Mid			= set_combine(sets.precast.WS['Spiral Hell'], sets.precast.WS.Mid, { })
    sets.precast.WS['Spiral Hell'].Acc			= set_combine(sets.precast.WS['Spiral Hell'], sets.precast.WS.Acc, { })

    -- Shadow of Death (STR/INT 40%)
    sets.precast.WS['Shadow of Death']			= set_combine(sets.precast.WS, {
													ammo		="Seeth. Bomblet +1",
													head		="Pixie Hairpin +1",
													body		="Fall. Cuirass +3",
													neck		="Sibyl Scarf",
													left_ear	="Lugra Earring +1",
													right_ring	="Archon Ring",
													back		=Ankou.STRWS})
    sets.precast.WS['Shadow of Death'].Mid		= set_combine(sets.precast.WS['Shadow of Death'], {})
    sets.precast.WS['Shadow of Death'].Acc		= set_combine(sets.precast.WS['Shadow of Death'].Mid, {})

    -- Dark Harvest (STR/INT 40%)
    sets.precast.WS['Dark Harvest']				= set_combine(sets.precast.WS, {
													ammo		="Seeth. Bomblet +1",
													head		="Pixie Hairpin +1",
													body		="Fall. Cuirass +3",
													neck		="Sibyl Scarf",
													left_ear	="Lugra Earring +1",
													right_ring	="Archon Ring",
													back		=Ankou.STRWS})
    sets.precast.WS['Dark Harvest'].Mid			= set_combine(sets.precast.WS['Dark Harvest'], {})
    sets.precast.WS['Dark Harvest'].Acc			= set_combine(sets.precast.WS['Dark Harvest'].Mid, {})


									------- Sword -------
	-- Savage Blade (STR/MND 50%)
    sets.precast.WS['Savage Blade']				= set_combine(sets.precast.WS, {
													ammo		="Crepuscular Pebble",
													legs		="Sakpata's Cuisses",})
    sets.precast.WS['Savage Blade'].Mid			= set_combine(sets.precast.WS, {})
    sets.precast.WS['Savage Blade'].Acc			= set_combine(sets.precast.WS['Savage Blade'], {})
	
    -- Sanguine Blade (STR/MND 50%)
    sets.precast.WS['Sanguine Blade']			= set_combine(sets.precast.WS, {
													ammo		="Seeth. Bomblet +1",
													head		="Pixie Hairpin +1",
													body		="Fall. Cuirass +3",
													neck		="Baetyl Pendant",
													waist		="Eschan Stone",
													right_ring	="Archon Ring",})
    sets.precast.WS['Sanguine Blade'].Mid		= set_combine(sets.precast.WS['Sanguine Blade'])
    sets.precast.WS['Sanguine Blade'].Acc		= set_combine(sets.precast.WS['Sanguine Blade'].Mid)

    -- Requiescat (MND 73%)
    sets.precast.WS.Requiescat					= set_combine(sets.precast.WS, {
													ammo  		="Coiste Bodhar",
													head		="Sakpata's Helm",
													body		="Sakpata's Plate",
													hands		="Sakpata's Gauntlets",
													legs		="Sakpata's Cuisses",
													feet		="Sakpata's Leggings",
													waist		="Fotia Belt",
													left_ear	="Schere Earring",
													back		=Ankou.STRDA})
    sets.precast.WS.Requiescat.Mid				= set_combine(sets.precast.WS.Requiscat, sets.precast.WS.Mid)
    sets.precast.WS.Requiescat.Acc				= set_combine(sets.precast.WS.Requiscat, sets.precast.WS.Acc)

									------- Great Axe -------
	
	-- Fell Cleave (STR 60%)
    sets.precast.WS['Fell Cleave']				= set_combine(sets.precast.WS, {})
	
	-- Armor Break (STR/VIT 60%)
    sets.precast.WS['Armor Break']				= set_combine(sets.precast.WS, {
													ammo		="Pemphredo Tathlum",
													body		="Nyame Mail",
													legs		="Nyame Flanchard",
													waist		="Eschan Stone",
													left_ear	="Malignance Earring",
													right_ear	="Crep. Earring",
													left_ring	="Crepuscular Ring",
													right_ring	="Metamor. Ring +1",
													back		=Ankou.FC})
	
	------------------------------------------------------------------------------------------------
	---------------------------------------- Idle Sets ---------------------------------------------
	------------------------------------------------------------------------------------------------
	
    sets.idle									= {
													ammo		="Staunch Tathlum +1",
													head		="Jumalik Helm",
													body		="Chozor. Coselete",
													hands		="Sakpata's Gauntlets",
													legs		="Carmine Cuisses +1",
													feet		="Sakpata's Leggings",
													neck		="Coatl Gorget +1",
													waist		="Flume Belt +1",
													left_ear	="Hearty Earring",
													right_ear	="Ethereal Earring",
													left_ring	="Shadow Ring",
													right_ring	="Defending Ring",
													back		=Ankou.Hybrid}
	sets.idle.Town								= set_combine(sets.idle, {})
	sets.idle.Field								= set_combine(sets.idle, {})
	sets.idle.Regen								= set_combine(sets.idle.Field, {})
	sets.idle.Refresh							= set_combine(sets.idle.Regen, {})
	sets.idle.Weak								= set_combine(sets.defense.PDT, {})
	sets.idle.Sphere							= set_combine(sets.idle, { body="Makora Meikogai"  })

    -- Defense sets
    sets.defense.PDT							= {
													ammo		="Crepuscular Pebble",
													head		="Sakpata's Helm",
													body		="Sakpata's Plate",
													hands		="Sakpata's Gauntlets",
													legs		="Sakpata's Cuisses",
													feet		="Sakpata's Leggings",
													neck		="Loricate Torque +1",
													waist		="Flume Belt +1",
													left_ear	="Tuisto Earring",
													right_ear	="Odnowa Earring +1",
													left_ring	="Shadow Ring",
													right_ring	="Gelatinous Ring +1",
													back		="Shadow Mantle"}
    sets.defense.MDT							= set_combine(sets.defense.PDT, {
													neck		="Warder's Charm +1",
													waist		="Carrier's Sash",
													back		=Ankou.Hybrid})
    sets.defense.Reraise						= sets.idle.Weak
    sets.Kiting									= {}
    sets.Reraise								= {head="Twilight Helm",body="Twilight Mail"}

    -- Defensive sets to combine with various weapon-specific sets below
    -- These allow hybrid acc/pdt sets for difficult content
    -- do not specify a cape so that DA/STP capes are used appropriately
    sets.Defensive								= {}
    sets.Defensive_Mid							= {}
    -- Higher DT, less haste
    sets.DefensiveHigh							= set_combine(sets.Defensive, {})
    sets.Defensive_Acc							= set_combine(sets.Defensive_Mid, sets.DefensiveHigh)

	------------------------------------------------------------------------------------------------
	---------------------------------------- Engage Sets -------------------------------------------
	------------------------------------------------------------------------------------------------
	
    sets.engaged								= {
													ammo		="Coiste Bodhar",
													head		="Sakpata's Helm",
													body		="Dagon Breast.",
													hands		="Sakpata's Gauntlets",
													legs		="Ig. Flanchard +3",
													feet		="Sakpata's Leggings",
													neck		="Abyssal Beads +2",
													waist		="Ioskeha Belt +1",
													left_ear	="Schere Earring",
													right_ear	="Telos Earring",
													left_ring	="Niqmaddu Ring",
													right_ring	="Chirich Ring +1",
													back		=Ankou.DEXDA}
    sets.engaged.Mid							= set_combine(sets.engaged, {
													head		="Flam. Zucchetto +2",
													body		="Valorous Mail",
													feet		="Flam. Gambieras +2"})
    sets.engaged.Acc							= set_combine(sets.engaged, {
													ammo		="Seeth. Bomblet +1",
													body		="Hjarrandi Breast.",
													legs		="Sakpata's Cuisses",})

    -- These only apply when delay is capped.
    sets.engaged.Haste							= set_combine(sets.engaged, {})
    sets.engaged.Haste.Mid						= set_combine(sets.engaged.Mid, {})
    sets.engaged.Haste.Acc						= set_combine(sets.engaged.Acc, {})

    -- Hybrid
    sets.engaged.PDT							= set_combine(sets.engaged, {})
    sets.engaged.Mid.PDT						= set_combine(sets.engaged, {})
    sets.engaged.Acc.PDT						= set_combine(sets.engaged, {})

    -- Hybrid with capped delay
    sets.engaged.Haste.PDT						= set_combine(sets.engaged, {})
    sets.engaged.Haste.Mid.PDT					= set_combine(sets.engaged, {})
    sets.engaged.Haste.Acc.PDT					= set_combine(sets.engaged, {})

    -- Liberator
    sets.engaged.Liberator						= sets.engaged
    sets.engaged.Liberator.Mid					= sets.engaged.Mid
    sets.engaged.Liberator.Acc					= set_combine(sets.engaged.Acc, {})

    -- Liberator AM3
    sets.engaged.Liberator.AM3					= set_combine(sets.engaged.Liberator, {})
    sets.engaged.Liberator.Mid.AM3				= set_combine(sets.engaged.Liberator.AM3, {})
    sets.engaged.Liberator.Acc.AM3				= set_combine(sets.engaged.Liberator.Mid.AM3, {})
    sets.engaged.Haste.Liberator				= set_combine(sets.engaged.Liberator, {})
    sets.engaged.Haste.Liberator.Mid			= set_combine(sets.engaged.Liberator.Mid, {})
    sets.engaged.Haste.Liberator.Acc			= sets.engaged.Liberator.Acc
    
    sets.engaged.Haste.Liberator.AM3			= set_combine(sets.engaged.Liberator.AM3, {})
    sets.engaged.Haste.Liberator.Mid.AM3		= sets.engaged.Liberator.Mid.AM3
    sets.engaged.Haste.Liberator.Acc.AM3		= sets.engaged.Liberator.Acc.AM3
    
    -- Hybrid
    sets.engaged.Liberator.PDT					= set_combine(sets.engaged.Liberator, {})
    sets.engaged.Liberator.Mid.PDT				= set_combine(sets.engaged.Liberator.PDT, {})
    sets.engaged.Liberator.Acc.PDT				= set_combine(sets.engaged.Liberator.Acc, sets.DefensiveHigh)
    -- Hybrid with AM3 up
    sets.engaged.Liberator.PDT.AM3				= set_combine(sets.engaged.Liberator.AM3, sets.Defensive)
    sets.engaged.Liberator.Mid.PDT.AM3			= set_combine(sets.engaged.Liberator.Mid.AM3, sets.Defensive_Mid)
    sets.engaged.Liberator.Acc.PDT.AM3			= set_combine(sets.engaged.Liberator.Acc.AM3, sets.DefensiveHigh)
    -- Hybrid with capped delay
    sets.engaged.Haste.Liberator.PDT			= set_combine(sets.engaged.Liberator.PDT, sets.DefensiveHigh)
    sets.engaged.Haste.Liberator.Mid.PDT		= set_combine(sets.engaged.Liberator.Mid.PDT, sets.DefensiveHigh)
    sets.engaged.Haste.Liberator.Acc.PDT		= set_combine(sets.engaged.Liberator.Acc.PDT, sets.DefensiveHigh)
    -- Hybrid with capped delay + AM3 up	
    sets.engaged.Haste.Liberator.PDT.AM3		= set_combine(sets.engaged.Liberator.PDT.AM3, sets.Defensive)
    sets.engaged.Haste.Liberator.Mid.PDT.AM3	= set_combine(sets.engaged.Liberator.Mid.PDT.AM3, sets.Defensive_Mid)
    sets.engaged.Haste.Liberator.Acc.PDT.AM3	= set_combine(sets.engaged.Liberator.Acc.PDT.AM3, sets.DefensiveHigh)

    -- Apocalypse
    sets.engaged.Apocalypse						= set_combine(sets.engaged, {
													neck		="Vim Torque +1",})
    sets.engaged.Apocalypse.Mid					= set_combine(sets.engaged.Mid, {
													body		="Hjarrandi Breast.",
													neck		="Vim Torque +1",})
    sets.engaged.Apocalypse.Acc					= set_combine(sets.engaged.Acc, {
													body		="Hjarrandi Breast.",
													neck		="Vim Torque +1",})
    
	sets.engaged.Apocalypse.AM					= set_combine(sets.engaged.Apocalypse, {
													neck		="Vim Torque +1",})
	sets.engaged.Apocalypse.Mid.AM				= set_combine(sets.engaged.Apocalypse.AM, {
													body		="Hjarrandi Breast.",
													neck		="Vim Torque +1",})
	sets.engaged.Apocalypse.Acc.AM				= set_combine(sets.engaged.Apocalypse.Mid.AM, {
													body		="Hjarrandi Breast.",
													neck		="Vim Torque +1",})
	
    sets.engaged.Haste.Apocalypse				= set_combine(sets.engaged, {
													neck		="Vim Torque +1",})
    sets.engaged.Haste.Apocalypse.Mid			= set_combine(sets.engaged.Mid, {
													body		="Hjarrandi Breast.",
													neck		="Vim Torque +1",})
    sets.engaged.Haste.Apocalypse.Acc			= set_combine(sets.engaged.Acc, {
													body		="Hjarrandi Breast.",
													neck		="Vim Torque +1",})

    -- Hybrid
    sets.engaged.Apocalypse.PDT					= set_combine(sets.engaged.Apocalypse, {})
    sets.engaged.Apocalypse.Mid.PDT				= set_combine(sets.engaged.Apocalypse.Mid, sets.Defensive_Mid)
    sets.engaged.Apocalypse.Acc.PDT				= set_combine(sets.engaged.Apocalypse.Acc, sets.Defensive_Acc)
    -- Hybrid with relic AM 
    -- sets.engaged.Apocalypse.PDT.AM			= set_combine(sets.engaged.Apocalypse, sets.Defensive)
    -- sets.engaged.Apocalypse.Mid.PDT.AM		= set_combine(sets.engaged.Apocalypse.Mid, sets.Defensive_Mid)
    -- sets.engaged.Apocalypse.Acc.PDT.AM		= set_combine(sets.engaged.Apocalypse.Acc, sets.Defensive_Acc)
    -- Hybrid with capped delay
    sets.engaged.Haste.Apocalypse.PDT			= set_combine(sets.engaged.Apocalypse.PDT, sets.DefensiveHigh)
    sets.engaged.Haste.Apocalypse.Mid.PDT		= set_combine(sets.engaged.Apocalypse.Mid.PDT, sets.DefensiveHigh)
    sets.engaged.Haste.Apocalypse.Acc.PDT		= set_combine(sets.engaged.Apocalypse.Acc.PDT, sets.DefensiveHigh)
    -- Hybrid with capped delay + AM3 up
    -- sets.engaged.Haste.Apocalypse.PDT.AM3	= set_combine(sets.engaged.Apocalypse.PDT.AM3, sets.DefensiveHigh)
    -- sets.engaged.Haste.Apocalypse.Mid.PDT.AM3= set_combine(sets.engaged.Apocalypse.Mid.PDT.AM3, sets.DefensiveHigh)
    -- sets.engaged.Haste.Apocalypse.Acc.PDT.AM3= set_combine(sets.engaged.Apocalypse.Acc.PDT.AM3, sets.DefensiveHigh)

    -- Generic Scythe
    sets.engaged.Scythe							= set_combine(sets.engaged, {})
    sets.engaged.Scythe.Mid						= set_combine(sets.engaged.Mid, {})
    sets.engaged.Scythe.Acc						= set_combine(sets.engaged.Acc, {})

    sets.engaged.Scythe.PDT						= set_combine(sets.engaged.Scythe, sets.Defensive)
    sets.engaged.Scythe.Mid.PDT					= set_combine(sets.engaged.Scythe.Mid, sets.Defensive_Mid)
    sets.engaged.Scythe.Acc.PDT					= set_combine(sets.engaged.Scythe.Acc, sets.Defensive_Acc)

    sets.engaged.Haste.Scythe					= set_combine(sets.engaged.Haste, {})
    sets.engaged.Haste.Scythe.Mid				= set_combine(sets.engaged.Haste.Mid, {})
    sets.engaged.Haste.Scythe.Acc				= set_combine(sets.engaged.Haste.Acc, {})

    sets.engaged.Haste.Scythe.PDT				= set_combine(sets.engaged.Scythe.PDT, sets.DefensiveHigh)
    sets.engaged.Haste.Scythe.Mid.PDT			= set_combine(sets.engaged.Scythe.Mid.PDT, sets.DefensiveHigh)
    sets.engaged.Haste.Scythe.Acc.PDT			= set_combine(sets.engaged.Scythe.Acc.PDT, sets.DefensiveHigh)

    -- Generic Great Sword
    sets.engaged.GreatSword						= set_combine(sets.engaged, {
													ammo		="Seeth. Bomblet +1",
													head		="Hjarrandi Helm",
													body		="Hjarrandi Breast.",
													neck		="Vim Torque +1",})
    sets.engaged.GreatSword.Mid					= set_combine(sets.engaged.Mid, {})
    sets.engaged.GreatSword.Acc					= set_combine(sets.engaged.Acc, {})

    sets.engaged.GreatSword.PDT					= set_combine(sets.engaged.GreatSword, sets.Defensive)
    sets.engaged.GreatSword.Mid.PDT				= set_combine(sets.engaged.GreatSword.Mid, sets.Defensive_Mid)
    sets.engaged.GreatSword.Acc.PDT				= set_combine(sets.engaged.GreatSword.Acc, sets.Defensive_Acc)

    sets.engaged.Haste.GreatSword				= set_combine(sets.engaged.Haste, {})
    sets.engaged.Haste.GreatSword.Mid			= set_combine(sets.engaged.Haste.Mid, {})
    sets.engaged.Haste.GreatSword.Acc			= set_combine(sets.engaged.Haste.Acc, {})

    sets.engaged.Haste.GreatSword.PDT			= set_combine(sets.engaged.GreatSword.PDT, sets.DefensiveHigh)
    sets.engaged.Haste.GreatSword.Mid.PDT		= set_combine(sets.engaged.GreatSword.Mid.PDT, sets.DefensiveHigh)
    sets.engaged.Haste.GreatSword.Acc.PDT		= set_combine(sets.engaged.GreatSword.Acc.PDT, sets.DefensiveHigh)

    -- Ragnarok
    sets.engaged.Ragnarok						= set_combine(sets.engaged.GreatSword, {})
    sets.engaged.Ragnarok.Mid					= set_combine(sets.engaged.GreatSword.Mid, {})
    sets.engaged.Ragnarok.Acc					= set_combine(sets.engaged.GreatSword.Acc, {})
    
    sets.engaged.Ragnarok.PDT					= set_combine(sets.engaged.Ragnarok, sets.Defensive)
    sets.engaged.Ragnarok.Mid.PDT				= set_combine(sets.engaged.Ragnarok.Mid, sets.Defensive_Mid)
    sets.engaged.Ragnarok.Acc.PDT				= set_combine(sets.engaged.Ragnarok.Acc, sets.Defensive_Acc)
    
    -- Caladbolg
    sets.engaged.Caladbolg						= set_combine(sets.engaged.GreatSword, {})
    sets.engaged.Caladbolg.Mid					= set_combine(sets.engaged.GreatSword.Mid, {})
    sets.engaged.Caladbolg.Acc					= set_combine(sets.engaged.GreatSword.Acc, {})
    
    sets.engaged.Caladbolg.PDT					= set_combine(sets.engaged.Caladbolg, sets.Defensive)
    sets.engaged.Caladbolg.Mid.PDT				= set_combine(sets.engaged.Caladbolg.Mid, sets.Defensive_Mid)
    sets.engaged.Caladbolg.Acc.PDT				= set_combine(sets.engaged.Caladbolg.Acc, sets.Defensive_Acc)
    
    sets.engaged.Haste.Caladbolg				= set_combine(sets.engaged.Caladbolg, {})
    sets.engaged.Haste.Caladbolg.Mid			= set_combine(sets.engaged.Caladbolg.Mid, {})
    sets.engaged.Haste.Caladbolg.Acc			= set_combine(sets.engaged.Caladbolg.Acc, {})

    sets.engaged.Haste.Caladbolg.PDT			= set_combine(sets.engaged.Caladbolg.PDT, sets.DefensiveHigh)
    sets.engaged.Haste.Caladbolg.Mid.PDT		= set_combine(sets.engaged.Caladbolg.Mid.PDT, sets.DefensiveHigh)
    sets.engaged.Haste.Caladbolg.Acc.PDT		= set_combine(sets.engaged.Caladbolg.Acc.PDT, sets.DefensiveHigh)

    sets.engaged.DW								= set_combine(sets.engaged, {})
    sets.engaged.DW.Mid							= set_combine(sets.engaged.DW, {})
    sets.engaged.DW.Acc							= set_combine(sets.engaged.DW.Mid, {})

    sets.engaged.SW								= set_combine(sets.engaged, {})
    sets.engaged.SW.Mid							= set_combine(sets.engaged.Mid, {})
    sets.engaged.SW.Acc							= set_combine(sets.engaged.Acc, {})

    sets.engaged.Reraise						= set_combine(sets.engaged, {})
	
	sets.phalanx								= {
													head		="Yorium Barbuta",
													body		="Yorium Cuirass",
													hands		="Yorium Gauntlets",
													legs		="Sakpata's Cuisses"}
    sets.buff.Souleater							= {}
    sets.MadrigalBonus							= {}
--	sets.buff['Last Resort']					= { 
--													feet="Fallen's Sollerets +1"}
end

function job_pretarget(spell, action, spellMap, eventArgs)
    if spell.type:endswith('Magic') and buffactive.silence then
        eventArgs.cancel = true
        send_command('input /item "Echo Drops" <me>')
    end
end
-- Set eventArgs.handled to true if we don't want any automatic gear equipping to be done.
-- Set eventArgs.useMidcastGear to true if we want midcast gear equipped on precast.
function job_precast(spell, action, spellMap, eventArgs)
    aw_custom_aftermath_timers_precast(spell)
end

function job_post_precast(spell, action, spellMap, eventArgs)
    local recast = windower.ffxi.get_ability_recasts()
    -- Make sure abilities using head gear don't swap 
    if spell.type:lower() == 'weaponskill' then
        -- handle Gavialis Helm
--		if use_gavialis then
--			if is_sc_element_today(spell) then
--				if wsList:contains(spell.english) then
--					equip(sets.WSDayBonus)
--				end
--			end
--		end
        -- CP mantle must be worn when a mob dies, so make sure it's equipped for WS.
        if state.CapacityMode.value then
            equip(sets.CapacityMantle)
        end
		if player.tp > 2499 then
			equip({right_ear="Heathen's Earring"})
		end
        -- if spell.english == 'Entropy' and recast[95] == 0 then
        --     eventArgs.cancel = true
        --     send_command('@wait 4.0;input /ja "Consume Mana" <me>')
        --     --windower.chat.input:schedule(1, '/ws "Entropy" <t>')
        --     return
        -- end
        if spell.english == 'Insurgency' then
            if world.time >= (17*60) or world.time <= (7*60) then
                equip(sets.Lugra)
            end
        end

        -- if player.tp > 2999 then
        --     if wsList:contains(spell.english) then
        --         equip(sets.IshvaraLugra)
        --     else
        --         equip(sets.BrutalLugra)
        --     end
        -- else -- use Lugra + moonshade
        --     if world.time >= (17*60) or world.time <= (7*60) then
        --         equip(sets.Lugra)
        --     else
        --         if wsList:contains(spell.english) then
        --             equip(sets.Ishvara)
        --         else
        --             equip(sets.Brutal)
        --         end
        --     end
        -- end
    end
end

-- Set eventArgs.handled to true if we don't want any automatic gear equipping to be done.
function job_midcast(spell, action, spellMap, eventArgs)
end

-- Run after the default midcast() is done.
-- eventArgs is the same one used in job_midcast, in case information needs to be persisted.
function job_post_midcast(spell, action, spellMap, eventArgs)
    if spell.english:startswith('Drain') then
        if player.status == 'Engaged' and state.CastingMode.current == 'Normal' and player.hpp < 70 then
            classes.CustomClass = 'OhShit'
        end
    end

    if (state.HybridMode.current == 'PDT' and state.PhysicalDefenseMode.current == 'Reraise') then
        equip(sets.Reraise)
    end
end

-- Set eventArgs.handled to true if we don't want any automatic gear equipping to be done.
function job_aftercast(spell, action, spellMap, eventArgs)
    aw_custom_aftermath_timers_aftercast(spell)
    if state.Buff[spell.english] ~= nil then
        state.Buff[spell.english] = not spell.interrupted or buffactive[spell.english]
    end
end

function job_post_aftercast(spell, action, spellMap, eventArgs)
    if spell.type == 'WeaponSkill' then
        if state.Buff.Souleater and state.SouleaterMode.value then
            send_command('@wait 1.0;cancel souleater')
            --enable("head")
        end
    end
end
-------------------------------------------------------------------------------------------------------------------
-- Customization hooks for idle and melee sets, after they've been automatically constructed.
-------------------------------------------------------------------------------------------------------------------
-- Called before the Include starts constructing melee/idle/resting sets.
-- Can customize state or custom melee class values at this point.
-- Set eventArgs.handled to true if we don't want any automatic gear equipping to be done.
function job_handle_equipping_gear(status, eventArgs)
end
-- Modify the default idle set after it was constructed.
function customize_idle_set(idleSet)
    if player.hpp < 50 then
        idleSet = set_combine(idleSet, sets.idle.Regen)
    elseif player.mpp < 50 then
        idleSet = set_combine(idleSet, sets.idle.Refresh)
    end
    if state.IdleMode.current == 'Sphere' then
        idleSet = set_combine(idleSet, sets.idle.Sphere)
    end
    if state.HybridMode.current == 'PDT' then
        idleSet = set_combine(idleSet, sets.defense.PDT)
    end
	if state.weapontype.value ~= "None" then idleSet = set_combine(idleSet,sets.weapontype[state.weapontype.value]) end
    return idleSet
end

-- Modify the default melee set after it was constructed.
function customize_melee_set(meleeSet)
    if state.TreasureMode.value == 'Fulltime' then
        meleeSet = set_combine(meleeSet, sets.TreasureHunter)
    end
    if state.CapacityMode.value then
        meleeSet = set_combine(meleeSet, sets.CapacityMantle)
    end
    if state.Buff['Souleater'] then
        meleeSet = set_combine(meleeSet, sets.buff.Souleater)
    end
	if state.weapontype.value ~= "None" then meleeSet = set_combine(meleeSet,sets.weapontype[state.weapontype.value]) end
	if weaponswap then
		weaponswap=0
		equip(sets.weapontype[state.weapontype.value])
		if state.weapontype.value == "None" then 
			enable('main','sub')
		else
			disable('main','sub')
		end
	end
    return meleeSet
end

-------------------------------------------------------------------------------------------------------------------
-- General hooks for other events.
-------------------------------------------------------------------------------------------------------------------

-- Called when the player's status changes.
function job_status_change(newStatus, oldStatus, eventArgs)
    if newStatus == "Engaged" then
        --if state.Buff['Last Resort'] then
        --    send_command('@wait 1.0;cancel hasso')
        --end
        -- handle weapon sets
    if remaWeapons:contains(player.equipment.main) then
        state.CombatWeapon:set(player.equipment.main)
    end
        -- if gsList:contains(player.equipment.main) then
        --     state.CombatWeapon:set("GreatSword")
        -- elseif scytheList:contains(player.equipment.main) then
        --     state.CombatWeapon:set("Scythe")
        -- elseif remaWeapons:contains(player.equipment.main) then
        --     state.CombatWeapon:set(player.equipment.main)
        -- else -- use regular set, which caters to Liberator
        --     state.CombatWeapon:reset()
        -- end
        --elseif newStatus == 'Idle' then
        --    determine_idle_group()
    end
end

-- Called when a player gains or loses a buff.
-- buff == buff gained or lost
-- gain == true if the buff was gained, false if it was lost.
function job_buff_change(buff, gain)

    if state.Buff[buff] ~= nil then
        handle_equipping_gear(player.status)
    end

    if S{'madrigal'}:contains(buff:lower()) then
        if buffactive.madrigal and state.OffenseMode.value == 'Acc' then
            equip(sets.MadrigalBonus)
        end
    end
    if S{'haste', 'march', 'embrava', 'geo-haste', 'indi-haste', 'last resort'}:contains(buff:lower()) then
        if (buffactive['Last Resort']) then
            if (buffactive.embrava or buffactive.haste) and buffactive.march then
                state.CombatForm:set("Haste")
                if not midaction() then
                    handle_equipping_gear(player.status)
                end
            end
        else
            if state.CombatForm.current ~= 'DW' and state.CombatForm.current ~= 'SW' then
                state.CombatForm:reset()
            end
            if not midaction() then
                handle_equipping_gear(player.status)
            end
        end
    end
    -- Drain II/III HP Boost. Set SE to stay on.
    -- if buff == "Max HP Boost" and state.SouleaterMode.value then
    --     if gain or buffactive['Max HP Boost'] then
    --         state.SouleaterMode:set(false)
    --     else
    --         state.SouleaterMode:set(true)
    --     end
    -- end
    -- Make sure SE stays on for BW
    if buff == 'Blood Weapon' and state.SouleaterMode.value then
        if gain or buffactive['Blood Weapon'] then
            state.SouleaterMode:set(false)
        else
            state.SouleaterMode:set(true)
        end
    end
    -- AM custom groups
    if buff:startswith('Aftermath') then
        if player.equipment.main == 'Liberator' then
            classes.CustomMeleeGroups:clear()

            if (buff == "Aftermath: Lv.3" and gain) or buffactive['Aftermath: Lv.3'] then
                classes.CustomMeleeGroups:append('AM3')
                add_to_chat(8, '-------------Mythic AM3 UP-------------')
            -- elseif (buff == "Aftermath: Lv.3" and not gain) then
            --     add_to_chat(8, '-------------Mythic AM3 DOWN-------------')
            end

            if not midaction() then
                handle_equipping_gear(player.status)
            end
        else
            classes.CustomMeleeGroups:clear()

            if buff == "Aftermath" and gain or buffactive.Aftermath then
                classes.CustomMeleeGroups:append('AM')
            end

            if not midaction() then
                handle_equipping_gear(player.status)
            end
        end
    end
    
    -- if  buff == "Samurai Roll" then
    --     classes.CustomRangedGroups:clear()
    --     if (buff == "Samurai Roll" and gain) or buffactive['Samurai Roll'] then
    --         classes.CustomRangedGroups:append('SamRoll')
    --     end
       
    -- end

    --if buff == "Last Resort" then
    --    if gain then
    --        send_command('@wait 1.0;cancel hasso')
    --    else
    --        if not midaction() then
    --            send_command('@wait 1.0;input /ja "Hasso" <me>')
    --        end
    --    end
    --end
end


-------------------------------------------------------------------------------------------------------------------
-- User code that supplements self-commands.
-------------------------------------------------------------------------------------------------------------------

-- Called by the 'update' self-command, for common needs.
-- Set eventArgs.handled to true if we don't want automatic equipping of gear.
function job_update(cmdParams, eventArgs)

    war_sj = player.sub_job == 'WAR' or false
    get_combat_form()
    get_combat_weapon()
    update_melee_groups()
    select_default_macro_book()
end

-- State buff checks that will equip buff gear and mark the event as handled.
function check_buff(buff_name, eventArgs)
    if state.Buff[buff_name] then
        equip(sets.buff[buff_name] or {})
        if state.TreasureMode.value == 'SATA' or state.TreasureMode.value == 'Fulltime' then
            equip(sets.TreasureHunter)
        end
        eventArgs.handled = true
    end
end
-- Check for various actions that we've specified in user code as being used with TH gear.
-- This will only ever be called if TreasureMode is not 'None'.
-- Category and Param are as specified in the action event packet.
--function th_action_check(category, param)
--    if category == 2 or -- any ranged attack
--        --category == 4 or -- any magic action
--        (category == 3 and param == 30) or -- Aeolian Edge
--        (category == 6 and info.default_ja_ids:contains(param)) or -- Provoke, Animated Flourish
--        (category == 14 and info.default_u_ja_ids:contains(param)) -- Quick/Box/Stutter Step, Desperate/Violent Flourish
--        then 
--            return true
--    end
--end
-- function get_custom_wsmode(spell, spellMap, default_wsmode)
--     if state.OffenseMode.current == 'Mid' then
--         if buffactive['Aftermath: Lv.3'] then
--             return 'AM3Mid'
--         end
--     elseif state.OffenseMode.current == 'Acc' then
--         if buffactive['Aftermath: Lv.3'] then
--             return 'AM3Acc'
--         end
--     else
--         if buffactive['Aftermath: Lv.3'] then
--             return 'AM3'
--         end
--     end
-- end
-------------------------------------------------------------------------------------------------------------------
-- Utility functions specific to this job.
-------------------------------------------------------------------------------------------------------------------
function get_combat_form()

    if S{'NIN', 'DNC'}:contains(player.sub_job) and swordList:contains(player.equipment.main) then
        state.CombatForm:set("DW")
    --elseif player.equipment.sub == '' or shields:contains(player.equipment.sub) then
    elseif swordList:contains(player.equipment.main) then
        state.CombatForm:set("SW")
--	elseif buffactive['Last Resort'] then
--		if (buffactive.embrava or buffactive.haste) and buffactive.march then
--			add_to_chat(8, '-------------Delay Capped-------------')
--			state.CombatForm:set("Haste")
--		else
--			state.CombatForm:reset()
--		end
    else
        state.CombatForm:reset()
    end
end

function get_combat_weapon()
    state.CombatWeapon:reset()
    if remaWeapons:contains(player.equipment.main) then
        state.CombatWeapon:set(player.equipment.main)
    end
    -- if remaWeapons:contains(player.equipment.main) then
    --     state.CombatWeapon:set(player.equipment.main)
    -- elseif gsList:contains(player.equipment.main) then
    --     state.CombatWeapon:set("GreatSword")
    -- elseif scytheList:contains(player.equipment.main) then
    --     state.CombatWeapon:set("Scythe")
    -- end
end

function aw_custom_aftermath_timers_precast(spell)
    if spell.type == 'WeaponSkill' then
        info.aftermath = {}

        local mythic_ws = "Insurgency"

        info.aftermath.weaponskill = mythic_ws
        info.aftermath.duration = 0

        info.aftermath.level = math.floor(player.tp / 1000)
        if info.aftermath.level == 0 then
            info.aftermath.level = 1
        end

        if spell.english == mythic_ws and player.equipment.main == 'Liberator' then
            -- nothing can overwrite lvl 3
            if buffactive['Aftermath: Lv.3'] then
                return
            end
            -- only lvl 3 can overwrite lvl 2
            if info.aftermath.level ~= 3 and buffactive['Aftermath: Lv.2'] then
                return
            end

            if info.aftermath.level == 1 then
                info.aftermath.duration = 90
            elseif info.aftermath.level == 2 then
                info.aftermath.duration = 120
            else
                info.aftermath.duration = 180
            end
        end
    end
end

-- Call from job_aftercast() to create the custom aftermath timer.
function aw_custom_aftermath_timers_aftercast(spell)
    if not spell.interrupted and spell.type == 'WeaponSkill' and
        info.aftermath and info.aftermath.weaponskill == spell.english and info.aftermath.duration > 0 then

        local aftermath_name = 'Aftermath: Lv.'..tostring(info.aftermath.level)
        send_command('timers d "Aftermath: Lv.1"')
        send_command('timers d "Aftermath: Lv.2"')
        send_command('timers d "Aftermath: Lv.3"')
        send_command('timers c "'..aftermath_name..'" '..tostring(info.aftermath.duration)..' down abilities/aftermath'..tostring(info.aftermath.level)..'.png')

        info.aftermath = {}
    end
end

function display_current_job_state(eventArgs)
    local msg = 'DRK暗 '

	msg = msg .. ' :: '	msg = msg .. ' '
    if state.CombatWeapon.current ~= '' then 
        msg = msg .. '[Weapon: '.. state.CombatWeapon.current ..']'
    end
	msg = msg .. ' '
	msg = msg .. '[Offense: '..state.OffenseMode.current..']'
	msg = msg .. ' '
    msg = msg .. '[Hybrid: '..state.HybridMode.current..']'
    if state.DefenseMode.value ~= 'None' then
        local defMode = state[state.DefenseMode.value ..'DefenseMode'].current
        msg = msg .. ', Defense: '..state.DefenseMode.value..' '..defMode
    end
	msg = msg .. ' '
--	if state.CombatForm.current ~= '' then 
--		msg = msg .. '[Form: '.. state.CombatForm.current..']'
--	end
--	msg = msg .. ' '
--	if state.CapacityMode.value then
--		msg = msg .. ', Capacity: ON, '
--	end
--	msg = msg .. ' '
--	if state.SouleaterMode.value then
--		msg = msg .. '[SE: Cancel]'
--	end
--	msg = msg .. ' '
--	if state.LastResortMode.value then
--		msg = msg .. ', LR Defense, '
--	end
--	msg = msg .. ' '
    if state.PCTargetMode.value ~= 'default' then
        msg = msg .. ', Target PC: '..state.PCTargetMode.value
    end
	msg = msg .. ' '
    if state.SelectNPCTargets.value then
        msg = msg .. ', Target NPCs'
    end

    add_to_chat(060, msg)
    eventArgs.handled = true
end

function job_self_command(cmdParams, eventArgs)
	command = cmdParams[1]:lower()
	if command=='weapontype' then
		enable('main','sub')
		rangeswap=1
		send_command('gs c cycle weapontype')
	command = cmdParams[1]:lower()
	command2 = cmdParams[2]
	end
end

-- Set eventArgs.handled to true if we don't want the automatic display to be run.
-- Handle notifications of general user state change.
function job_state_change(stateField, newValue, oldValue)
end

-- Creating a custom spellMap, since Mote capitalized absorbs incorrectly
function job_get_spell_map(spell, default_spell_map)
    if spell.skill == 'Dark Magic' and absorbs:contains(spell.english) then
        return 'Absorb'
    end
--	if spell.type == 'Trust' then
--		return 'Trust'
--	end
end

function select_earring()
    if world.time >= (17*60) or world.time <= (7*60) then
        return sets.Lugra
    else
        return sets.Brutal
    end
end

function update_melee_groups()

    classes.CustomMeleeGroups:clear()
    -- mythic AM	
    if player.equipment.main == 'Liberator' then
        if buffactive['Aftermath: Lv.3'] then
            classes.CustomMeleeGroups:append('AM3')
        end
    else
        -- relic AM
        if buffactive['Aftermath'] then
            classes.CustomMeleeGroups:append('AM')
        end
        -- if buffactive['Samurai Roll'] then
        --     classes.CustomRangedGroups:append('SamRoll')
        -- end
    end
end

function select_default_macro_book()
	--Default macro set/book
		if player.sub_job == 'DRG' then
			set_macro_page(2, 11)
		else
			set_macro_page(1, 11)
		end
--	if scytheList:contains(player.equipment.main) then
--		set_macro_page(1, 11)
--	elseif gsList:contains(player.equipment.main) then
--		set_macro_page(1, 11)
--	elseif player.sub_job == 'SAM' then
--		set_macro_page(1, 11)
--	end
end
