--[[     
=== Features ===
!!!!Make sure you have my User-Globals.lua!!! Do not rename it. It goes in the data folder along side this file.

If you don't use organizer, then remove the include('organizer-lib') in get_sets() and remove sets.Organizer

This lua has a few MODES you can toggle with hotkeys, and there's a few situational RULES that activate without hotkeys
I'd recommend reading and understanding the following information if you plan on using this file.

::MODES::

SouleaterMode: OFF by default. Toggle this with @F9 (window key + F9). 
This mode makes it possible to use Souleater in situations where you would normally avoid using it. When SouleaterMode 
is ON, Souleater will be canceled automatically after the first Weaponskill used, WITH THESE EXCEPTIONS. If Bloodweapon 
is active, or if Drain's HP Boost buff is active, then Souleater will remain active until the next WS used after 
either buff wears off. If you use DRK at events, I'd recommend making this default to ON, as it's damn useful.

LastResortMode: Removed.  In it's place, I'm testing a rule that automatically applies / removes hasso

CapacityMode OFF by default. Toggle with ALT + = 
It will full-time whichever piece of gear you specify in sets.CapacityMantle 

NOTE: You can change the default (true|false) status of any MODE by changing their values in job_setup()

::RULES::

Gavialis Helm will automatically be used for all weaponskills on their respective days of the week. If you don't want
it used for a ws, then you have to add the WS to wsList = {} in job_setup. You also need my User-Globals.lua for this
to even work. 

Ygna's Resolve +1 will automatically be used when you're in a reive. If you have my User-Globals.lua this will work
with all your jobs that use mote's includes. Not just this one! 

Moonshade earring is not used for WS's at 3000 TP. 

You can hit F12 to display custom MODE status as well as the default stuff. 

Single handed weapons are han

::NOTES::

All of the default sets are geared around scythe. There is support for great sword by using 
sets.engaged.GreatSword but you will have to edit gsList in job_setup so that your GS is present. IF you would rather
all the default sets (like sets.engaged, etc.) cater to great sword instead of scyth, then simply remove the great swords 
listed in gsList and ignore sets.engaged.GreatSword. (but dont delete it)  

Set format is as follows: 
sets.engaged.[CombatForm][CombatWeapon][Offense or HybridMode][CustomMeleeGroups]

CombatForm = Haste, DW, SW
CombatWeapon = GreatSword, Apocalypse, Ragnarok
OffenseMode = Normal, Mid, Acc
HybridMode = Normal, PDT
CustomMeleeGroups = AM3, AM

CombatForm Haste is used when Last Resort AND either Haste, March, Indi-Haste Geo-Haste is on you.
This allows you to equip full acro, even though it doesn't have 25% gear haste. You still cap. 

CombatForm DW will activate with /dnc or /nin AND a weapon listed in drk_sub_weapons equipped offhand. 
           SW is active with an empty sub-slot, or a shield listed in the shields = S{} list.  

CombatWeapon GreatSword will activate when you equip a GS listed in gsList in job_setup(). Apocalypse and Ragnarok are
active when either weapon is equipped. If you have trouble creating sets for Ragnarok, study how I've defined Apoc's sets.

CustomMeleeGroups AM3 will activate when Aftermath lvl 3 is up, and AM will activate when relic Aftermath is up.

--]]

function get_sets()
	mote_include_version = 2
	include('Mote-Include.lua')
	send_command('gs enable all')
end


-- Setup vars that are user-independent.
function job_setup()
    state.CapacityMode = M(false, 'Capacity Point Mantle')

    state.Buff.Souleater = buffactive.souleater or false
    state.Buff['Last Resort'] = buffactive['Last Resort'] or false
    state.SouleaterMode = M(true, 'Soul Eater Mode')
    state.LastResortMode = M(false, 'Last Resort Mode')
    -- If you have a fully upgraded Apoc, set this to true 
    state.ApocHaste = M(false, 'Apoc Haste Mode')   
    -- Weaponskills you do NOT want Gavialis helm used with
    wsList = S{'Spiral Hell', 'Torcleaver', 'Insurgency', 'Quietus'}
    -- Greatswords you use. 
    gsList = S{'Montante +1','Ragnarok'}
    shields = S{'Rinda Shield'}
    -- Mote has capitalization errors in the default Absorb mappings, so we correct them
    absorbs = S{'Absorb-STR', 'Absorb-DEX', 'Absorb-VIT', 'Absorb-AGI', 'Absorb-INT', 'Absorb-MND', 'Absorb-CHR', 'Absorb-Attri', 'Absorb-ACC', 'Absorb-TP'}
    -- Offhand weapons used to activate DW mode
    drk_sub_weapons = S{"Sangarius", "Usonmunku", "Perun", "Tanmogayi"}

    get_combat_form()
    get_combat_weapon()
    update_melee_groups()
end


-- Setup vars that are user-dependent.  Can override this function in a sidecar file.
function user_setup()
    -- Options: Override default values
    state.OffenseMode:options('Normal', 'Mid', 'Acc')
    state.HybridMode:options('Normal', 'PDT')
    state.WeaponskillMode:options('Normal', 'Mid', 'Acc')
    state.CastingMode:options('Normal', 'Acc')
    state.IdleMode:options('Normal')
    state.RestingMode:options('Normal')
    state.PhysicalDefenseMode:options('PDT', 'Reraise')
    state.MagicalDefenseMode:options('MDT')

    war_sj = player.sub_job == 'WAR' or false

    -- Additional local binds
	send_command('bind f2 gs c toggle CapacityMode')
	send_command('bind f3')
	send_command('bind f4')
	send_command('bind f5')
	send_command('bind f6')
	send_command('bind f7')
	send_command('bind f8')
	send_command('bind home gs c warpring')
	
    --send_command('bind f7 gs c toggle CapacityMode')
    --send_command('bind f7 gs c toggle SouleaterMode')
    --send_command('bind f7 gs c toggle LastResortMode')
	
    select_default_macro_book()
end

function file_unload()
	send_command('unbind f1')
	send_command('unbind f2')
	send_command('unbind f3')
	send_command('unbind f4')
	send_command('unbind f5')
	send_command('unbind f6')
	send_command('unbind f7')
	send_command('unbind f8')
	send_command('unbind home')
end

function init_gear_sets()
   	------------------------------------------------------------------------------------------------
	---------------------------------------- Ankou's Cape ------------------------------------------
	------------------------------------------------------------------------------------------------
    Ankou = {}
    Ankou.STP = { name="Ankou's Mantle", augments={'DEX+20','Accuracy+20 Attack+20','"Store TP"+10',}}
    Ankou.DA = { name="Ankou's Mantle", augments={'STR+20','Accuracy+20 Attack+20','"Dbl.Atk."+10',}}
	Ankou.VITWS = { name="Ankou's Mantle", augments={'VIT+20','Accuracy+20 Attack+20','Weapon skill damage +10%',}}

	------------------------------------------------------------------------------------------------
	---------------------------------------- Utility Sets ------------------------------------------
	------------------------------------------------------------------------------------------------	
	
    sets.CapacityMantle = {back="Mecistopins Mantle"}
    sets.WSDayBonus = {head="Gavialis Helm"}
    sets.WSBack = {}
    sets.BrutalLugra = {ear1="Cessance Earring",ear2="Lugra Earring +1"}
    sets.Lugra = {ear2="Lugra Earring +1"}
    sets.Brutal = {ear2="Brutal Earring"}
    sets.Lugra2 = {ear1="Lugra Earring",ear2="Lugra Earring +1"}
	
	------------------------------------------------------------------------------------------------
	---------------------------------- Job Abilities Sets ------------------------------------------
	------------------------------------------------------------------------------------------------
	
    sets.buff.Souleater = {}
    sets.buff['Last Resort'] = {}
	
    sets.precast.JA['Diabolic Eye'] = {hands="Fallen's Finger Gauntlets +1"}
    sets.precast.JA['Nether Void'] = {}
    sets.precast.JA['Dark Seal'] = {head="Fallen's burgeonet +1"}
    sets.precast.JA['Souleater'] = {head="Ignominy burgeonet +1"}
    sets.precast.JA['Blood Weapon'] = {body="Fallen's Cuirass +1"}
    sets.precast.JA['Last Resort'] = {back=Ankou.WS}
    sets.precast.Waltz = {}

	------------------------------------------------------------------------------------------------
	---------------------------------------- Idle Sets ---------------------------------------------
	------------------------------------------------------------------------------------------------
	
    sets.idle.Town = {
		ammo="Staunch Tathlum",
		head="Jumalik Helm",
		neck="Coatl Gorget +1",
		ear1="Genmei Earring",
		ear2="Etiolation Earring",
		body="Jumalik Mail",
		hands="Sulevia's Gauntlets +2",
		ring1="Gelatinous Ring +1",
		ring2="Defending Ring",
		back="Solemnity Cape",
		waist="Flume Belt",
		legs="Carmine Cuisses +1",
		feet="Sulevia's Leggings +2"}
    sets.idle.Field = sets.idle.Town
    sets.idle.Regen = sets.idle.Town
    sets.idle.Refresh = sets.idle.Town
    sets.idle.Weak = sets.idle.Town
	
	------------------------------------------------------------------------------------------------
	---------------------------------------- Precast Sets ------------------------------------------
	------------------------------------------------------------------------------------------------
	
    sets.precast.FC = {
		ammo="Sapience Orb", --2
		head="",
		neck="Baetyl Pendant", --4
		ear1="Loquacious Earring", --2
		ear2="Etiolation Earring", --1
		body=OdyBody.FC,
		hands="Leyline Gloves", --8
		ring1="Kishar Ring", --4
		ring2="Weatherspoon ring", --5
		back="",
		waist="",
		legs="Eschite Cuisses", --5
		feet=OdyFeet.FC} --11
    sets.precast.FC['Elemental Magic'] = set_combine(sets.precast.FC, {})
    sets.precast.FC['Enfeebling Magic'] = set_combine(sets.precast.FC, {})
    sets.precast.FC.Cure = set_combine(sets.precast.FC, {})
    sets.precast.RA = {}

	------------------------------------------------------------------------------------------------
	---------------------------------------- Midcast Sets ------------------------------------------
	------------------------------------------------------------------------------------------------
	
    sets.midcast.FastRecast = {
		ammo="Staunch Tathlum",
		head="Sulevia's Mask +1",
		neck="Incanter's Torque",
		ear1="Genmei Earring",
		ear2="Etiolation Earring",
		body="Sulevia's Platemail +1",
		hands="Sulevia's Gauntlets +1",
		ring1="Gelatinous Ring +1",
		ring2="Defending Ring",
		back="Xucau Mantle",
		waist="Flume Belt",
		legs="Sulevia's Cuisses +1",
		feet="Sulevia's Leggings +2"}
    sets.midcast.Utsusemi = {}
    sets.midcast['Dark Magic'] = {
		ammo="Pemphredo Tathlum",
		head="Flamma Zucchetto +1",
		neck="Sanctity Necklace",
		ear1="Dignitary's Earring",
		ear2="Etiolation Earring",
		body="",
		hands="Leyline Gloves",
		ring1="Stikini Ring",
		ring2="Weatherspoon Ring",
		back="",
		waist="Eschan Stone",
		legs="Eschite Cuisses",
		feet="Flamma Gambieras +1"}
    sets.midcast.Endark = set_combine(sets.midcast['Dark Magic'], {})
    sets.midcast['Dark Magic'].Acc = set_combine(sets.midcast['Dark Magic'], {})
    sets.midcast['Enfeebling Magic'] = set_combine(sets.midcast['Dark Magic'], {})
    sets.midcast['Elemental Magic'] = {}
    sets.midcast['Dread Spikes'] = {
		ammo="Psilomene",
		head="Gavialis Helm",
		neck="Dualism Collar +1",
		ear1="Odnowa Earring +1",
		ear2="Etiolation Earring",
		body="Heathen's Cuirass",
		hands="Despair Finger Gauntlets",
		ring1="Moonbeam Ring",
		ring2="Moonbeam Ring",
		back="Reiki Cloak",
		waist="Eschan Stone",
		legs="Odyssean Cuisses",
		feet="Amm Greaves"}
    sets.midcast['Dread Spikes'].Acc = set_combine(sets.midcast['Dark Magic'], {}) 
    sets.midcast.Drain = set_combine(sets.midcast['Dark Magic'], {})
    sets.midcast.Aspir = sets.midcast.Drain
    sets.midcast.Drain.Acc = set_combine(sets.midcast.Drain, {})
    sets.midcast.Aspir.Acc = sets.midcast.Drain.Acc
    sets.midcast.Drain.OhShit = set_combine(sets.midcast.Drain, {})
    sets.midcast.Absorb = sets.midcast['Dark Magic']
    sets.midcast['Absorb-TP'] = set_combine(sets.midcast.Absorb, {hands="Heathen's Gauntlets"})
    sets.midcast.Absorb.Acc = set_combine(sets.midcast['Dark Magic'].Acc, {back="Chuparrosa Mantle",})
    sets.midcast['Absorb-TP'].Acc = set_combine(sets.midcast.Absorb.Acc, {hands="Heathen's Gauntlets"})
    sets.midcast.RA = {}

	------------------------------------------------------------------------------------------------
	---------------------------------------- Engaged Sets ------------------------------------------
	------------------------------------------------------------------------------------------------
	
    sets.engaged.GreatSword = set_combine(sets.engaged, {})
    sets.engaged.GreatSword.Mid = set_combine(sets.engaged.Mid, {})
    sets.engaged.GreatSword.Acc = set_combine(sets.engaged.Acc, {})

    sets.engaged.GreatSword.PDT = set_combine(sets.engaged.GreatSword, sets.Defensive)
    sets.engaged.GreatSword.Mid.PDT = set_combine(sets.engaged.GreatSword.Mid, sets.Defensive_Mid)
    sets.engaged.GreatSword.Acc.PDT = set_combine(sets.engaged.GreatSword.Acc, sets.Defensive_Acc)

    -- Engaged set, assumes Liberator
    sets.engaged = {
		ammo="Ginsen",
		head="Flamma Zucchetto +1",
		neck="Ainia Collar",
		ear1="Brutal Earring",
		ear2="Telos Earring",
		body=ValorousBody.STP,
		hands="Sulevia's Gauntlets +2",
		ring1="Hetairoi Ring",
		ring2="Petrov Ring",
		back=Ankou.DA,
		waist="Ioskeha Belt",
		legs="Odyssean Cuisses",
		feet="Carmine Greaves +1"}
    sets.engaged.Mid = set_combine(sets.engaged, {
		ring2="Ramuh Ring +1",
		waist="Kentarch Belt +1",
		legs="Hizamaru Hizayoroi +1"})
    sets.engaged.Acc = set_combine(sets.engaged.Mid, {})
    -- Liberator AM3
    sets.engaged.AM3 = set_combine(sets.engaged, {})
    sets.engaged.Mid.AM3 = set_combine(sets.engaged.AM3, {})
    sets.engaged.Acc.AM3 = set_combine(sets.engaged.Mid.AM3, {})

    sets.engaged.Apocalypse = set_combine(sets.engaged, {})
    sets.engaged.Apocalypse.Mid = set_combine(sets.engaged.Mid, {})
    sets.engaged.Apocalypse.Acc = set_combine(sets.engaged.Acc, {})
    sets.engaged.Apocalypse.AM = set_combine(sets.engaged.Apocalypse, {})
    sets.engaged.Apocalypse.Mid.AM = set_combine(sets.engaged.Apocalypse.AM, {})
    sets.engaged.Apocalypse.Acc.AM = set_combine(sets.engaged.Apocalypse.Mid.AM, {})

    sets.engaged.PDT = set_combine(sets.engaged, sets.Defensive)
    sets.engaged.Mid.PDT = set_combine(sets.engaged.Mid, sets.Defensive_Mid)
    sets.engaged.Acc.PDT = set_combine(sets.engaged.Acc, sets.Defensive_Acc)

    sets.engaged.PDT.AM3 = set_combine(sets.engaged.AM3, sets.Defensive)
    sets.engaged.Mid.PDT.AM3 = set_combine(sets.engaged.Mid.AM3, sets.Defensive_Mid)
    sets.engaged.Acc.PDT.AM3 = set_combine(sets.engaged.Acc.AM3, sets.Defensive_Acc)

    sets.engaged.Apocalypse.PDT = set_combine(sets.engaged.Apocalypse, sets.Sulevia)
    sets.engaged.Apocalypse.Mid.PDT = set_combine(sets.engaged.Apocalypse.Mid, sets.Sulevia)
    sets.engaged.Apocalypse.Acc.PDT = set_combine(sets.engaged.Apocalypse.Acc, sets.Sulevia)

    sets.engaged.DW = set_combine(sets.engaged, {})
    sets.engaged.DW.Mid = set_combine(sets.engaged.DW, {})
    sets.engaged.DW.Acc = set_combine(sets.engaged.DW.Mid, {})

    sets.engaged.SW = set_combine(sets.engaged, {})
    sets.engaged.SW.Mid = set_combine(sets.engaged.Mid, {})
    sets.engaged.SW.Acc = set_combine(sets.engaged.Acc, {})
	
    sets.engaged.Reraise = set_combine(sets.engaged, {head="Twilight Helm",body="Twilight Mail"})
	
	------------------------------------------------------------------------------------------------
	------------------------------------ Weaponskill Sets ------------------------------------------
	------------------------------------------------------------------------------------------------
	
    sets.precast.WS = {}
    sets.precast.WS.Mid = set_combine(sets.precast.WS, {})
    sets.precast.WS.Acc = set_combine(sets.precast.WS.Mid, {})

	sets.Reso = {
		ammo="Seething Bomblet +1",
		head="Flamma Zucchetto +1",
		neck="Fotia Gorget",
		ear1="Brutal Earring",
		ear2="Moonshade Earring",
		body=ValorousBody.WS,
		hands="Argosy Mufflers",
		ring1="Ifrit Ring +1",
		ring2="Regal Ring",
		back=Ankou.DA,
		waist="Fotia Belt",
		legs="Argosy Breeches",
		feet="Sulevia's Leggings +2"}
    sets.precast.WS.Resolution = sets.Reso
    sets.precast.WS.Resolution.Mid = set_combine(sets.Reso, {ear2="Telos Earring",ring1="Rufescent Ring"})
    sets.precast.WS.Resolution.Acc = set_combine(sets.Reso, {})

	sets.Torcleaver = {
		ammo="Knobkierrie",
		head="Sulevia's Mask +1",
		neck="Fotia Gorget",
		ear1="Moonshade Earring",
		ear2="Ishvara Earring",
		body=ValorousBody.WS,
		hands="Sulevia's Gauntlets +2",
		ring1="Supershear Ring",
		ring2="Regal Ring",
		back=Ankou.VITWS,
		waist="Fotia Belt",
		legs="Sulevia's Cuisses +1",
		feet="Sulevia's Leggings +2"}
    sets.precast.WS.Torcleaver = sets.Torcleaver
    sets.precast.WS.Torcleaver.Mid = set_combine(sets.Torcleaver, {})
    sets.precast.WS.Torcleaver.Acc = set_combine(sets.Torcleaver, {})
	
	sets.Scourge = {
		ammo="Knobkierrie",
		head="Sulevia's Mask +1",
		neck="Fotia Gorget",
		ear1="Moonshade Earring",
		ear2="Ishvara Earring",
		body=ValorousBody.WS,
		hands="Sulevia's Gauntlets +2",
		ring1="Supershear Ring",
		ring2="Regal Ring",
		back=Ankou.VITWS,
		waist="Fotia Belt",
		legs="Sulevia's Cuisses +1",
		feet="Sulevia's Leggings +2"}
    sets.precast.WS.Scourge = sets.Scourge
    sets.precast.WS.Scourge.Mid = set_combine(sets.Scourge, {})
    sets.precast.WS.Scourge.Acc = set_combine(sets.Scourge, {})
	
	sets.Insurgecy = {}
    sets.precast.WS.Insurgency = set_combine(sets.precast.WS, sets.Insurgecy)
    sets.precast.WS.Insurgency.AM3 = set_combine(sets.precast.WS, sets.Insurgecy, {})
    sets.precast.WS.Insurgency.Mid = set_combine(sets.precast.WS, sets.Insurgecy, {})
    sets.precast.WS.Insurgency.AM3Mid = set_combine(sets.precast.WS, sets.Insurgecy, {})
    sets.precast.WS.Insurgency.Acc = set_combine(sets.precast.WS, sets.Insurgecy, {})
    sets.precast.WS.Insurgency.AM3Acc = set_combine(sets.precast.WS, sets.Insurgecy, {})

	sets.Catastrophe = {}
    sets.precast.WS.Catastrophe = set_combine(sets.precast.WS, sets.Catastrophe)
    sets.precast.WS.Catastrophe.Mid = set_combine(sets.precast.WS, sets.Catastrophe, {})
    sets.precast.WS.Catastrophe.Acc = set_combine(sets.precast.WS, sets.Catastrophe, {})
	
	sets.Reaper = {
		ammo="Seething Bomblet +1",
		head="Flamma Zucchetto +1",
		neck="Caro Necklace",
		ear1="Brutal Earring",
		ear2="Moonshade Earring",
		body="Sulevia's Platemail +1",
		hands="Argosy Mufflers",
		ring1="Rajas Ring",
		ring2="Ifrit Ring",
		back=Ankou.WS,
		waist="Grunfeld Rope",
		legs="Argosy Breeches",
		feet="Flamma Gambieras +1"}
    sets.precast.WS['Cross Reaper'] = set_combine(sets.precast.WS, sets.Reaper)
    sets.precast.WS['Cross Reaper'].AM3 = set_combine(sets.precast.WS, sets.Reaper, {})
    sets.precast.WS['Cross Reaper'].Mid = set_combine(sets.precast.WS, sets.Reaper, {})
    sets.precast.WS['Cross Reaper'].AM3Mid = set_combine(sets.precast.WS, sets.Reaper, {})
    sets.precast.WS['Cross Reaper'].Acc = set_combine(sets.precast.WS, sets.Reaper, {})

	sets.Entropy = {
		ammo="Seething Bomblet +1",
		head="Flamma Zucchetto +1",
		neck=gear.ElementalGorget,
		ear1="Brutal Earring",
		ear2="Telos Earring",
		body="Argosy Hauberk",
		hands="Argosy Mufflers",
		ring1="Rajas Ring",
		ring2="Ifrit Ring",
		back=Ankou.WS,
		waist=gear.ElementalBelt,
		legs="Argosy Breeches",
		feet="Flamma Gambieras +1"}
    sets.precast.WS.Entropy = set_combine(sets.precast.WS, sets.Entropy)
    sets.precast.WS.Entropy.AM3 = set_combine(sets.precast.WS.Entropy, {})
    sets.precast.WS.Entropy.Mid = set_combine(sets.precast.WS, sets.Entropy, {})
    sets.precast.WS.Entropy.AM3Mid = set_combine(sets.precast.WS, sets.Entropy, {})
    sets.precast.WS.Entropy.Acc = set_combine(sets.precast.WS, sets.Entropy, {})

	sets.Quietus = {
		ammo="Seething Bomblet +1",
		head="Sulevia's Mask +1",
		neck=gear.ElementalGorget,
		ear1="Moonshade Earring",
		ear2="Ishvara Earring",
		body="Sulevia's Platemail +1",
		hands="Sulevia's Gauntlets +2",
		ring1="Rajas Ring",
		ring2="Petrov Ring",
		back="",
		waist=gear.ElementalBelt,
		legs="Sulevia's Cuisses +1",
		feet="Sulevia's Leggings +2"}
    sets.precast.WS.Quietus = set_combine(sets.precast.WS, sets.Quietus)
    sets.precast.WS.Quietus.AM3 = set_combine(sets.precast.WS.Quietus, {})
    sets.precast.WS.Quietus.Mid = set_combine(sets.precast.WS, sets.Quietus, {})
    sets.precast.WS.Quietus.AM3Mid = set_combine(sets.precast.WS, sets.Quietus, {})
    sets.precast.WS.Quietus.Acc = set_combine(sets.precast.WS, sets.Quietus, {})
	
	------------------------------------------------------------------------------------------------
	------------------------------------------- Misc Sets ------------------------------------------
	------------------------------------------------------------------------------------------------
	
    sets.defense.PDT = {
		ammo="Staunch Tathlum",
		head="Sulevia's Mask +1",
		neck="Loricate Torque +1",
		ear1="Genmei Earring",
		ear2="Etiolation Earring",
		body="Sulevia's Platemail +1",
		hands="Sulevia's Gauntlets +1",
		ring1="Gelatinous Ring +1",
		ring2="Defending Ring",
		back="Xucau Mantle",
		waist="Flume Belt",
		legs="Sulevia's Cuisses +1",
		feet="Sulevia's Leggings +2"}
    sets.defense.Reraise = sets.idle.Weak
    sets.defense.MDT = set_combine(sets.defense.PDT, {})
    sets.Kiting = {}
    sets.Reraise = {head="Twilight Helm",body="Twilight Mail"}
    sets.Defensive = {}
    sets.Defensive_Mid = set_combine(sets.Defensive, {})
    sets.Defensive_Acc = sets.Defensive_Mid
    sets.Sulevia = set_combine(sets.Defensive_Mid, {})
end

function job_pretarget(spell, action, spellMap, eventArgs)
    if spell.type:endswith('Magic') and buffactive.silence then
        eventArgs.cancel = true
        send_command('input /item "Echo Drops" <me>')
    end
end
-- Set eventArgs.handled to true if we don't want any automatic gear equipping to be done.
-- Set eventArgs.useMidcastGear to true if we want midcast gear equipped on precast.
function job_precast(spell, action, spellMap, eventArgs)
    aw_custom_aftermath_timers_precast(spell)
end

function job_post_precast(spell, action, spellMap, eventArgs)

    -- Make sure abilities using head gear don't swap 
    if spell.type:lower() == 'weaponskill' then
        -- handle Gavialis Helm
        if is_sc_element_today(spell) then
            if wsList:contains(spell.english) then
                -- do nothing
            else
                equip(sets.WSDayBonus)
            end
        end
        -- CP mantle must be worn when a mob dies, so make sure it's equipped for WS.
        if state.CapacityMode.value then
            equip(sets.CapacityMantle)
        end

        --if player.tp > 2999 then
        --    equip(sets.BrutalLugra)
        --else -- use Lugra + moonshade
        --    if world.time >= (17*60) or world.time <= (7*60) then
        --        equip(sets.Lugra)
        --    else
        --        equip(sets.Brutal)
        --    end
        --end
    end
end

-- Set eventArgs.handled to true if we don't want any automatic gear equipping to be done.
function job_midcast(spell, action, spellMap, eventArgs)
end

-- Run after the default midcast() is done.
-- eventArgs is the same one used in job_midcast, in case information needs to be persisted.
function job_post_midcast(spell, action, spellMap, eventArgs)
    if spell.english:startswith('Drain') then
        if player.status == 'Engaged' and state.CastingMode.current == 'Normal' and player.hpp < 70 then
            classes.CustomClass = 'OhShit'
        end
    end

    if (state.HybridMode.current == 'PDT' and state.PhysicalDefenseMode.current == 'Reraise') then
        equip(sets.Reraise)
    end
end

-- Set eventArgs.handled to true if we don't want any automatic gear equipping to be done.
function job_aftercast(spell, action, spellMap, eventArgs)
    aw_custom_aftermath_timers_aftercast(spell)
    if state.Buff[spell.english] ~= nil then
        state.Buff[spell.english] = not spell.interrupted or buffactive[spell.english]
    end
end

function job_post_aftercast(spell, action, spellMap, eventArgs)
    if spell.type == 'WeaponSkill' then
        if state.Buff.Souleater and state.SouleaterMode.value then
            send_command('@wait 1.0;cancel souleater')
            --enable("head")
        end
    end
end
-------------------------------------------------------------------------------------------------------------------
-- Customization hooks for idle and melee sets, after they've been automatically constructed.
-------------------------------------------------------------------------------------------------------------------
-- Called before the Include starts constructing melee/idle/resting sets.
-- Can customize state or custom melee class values at this point.
-- Set eventArgs.handled to true if we don't want any automatic gear equipping to be done.
function job_handle_equipping_gear(status, eventArgs)
end
-- Modify the default idle set after it was constructed.
function customize_idle_set(idleSet)
    if player.mpp < 70 then
        idleSet = set_combine(idleSet, sets.idle.Refresh)
    end
    if player.hpp < 70 then
        idleSet = set_combine(idleSet, sets.idle.Regen)
    end
    if state.HybridMode.current == 'PDT' then
        idleSet = set_combine(idleSet, sets.defense.PDT)
    end
    return idleSet
end

-- Modify the default melee set after it was constructed.
function customize_melee_set(meleeSet)
    if state.CapacityMode.value then
        meleeSet = set_combine(meleeSet, sets.CapacityMantle)
    end
    if state.Buff['Souleater'] then
        meleeSet = set_combine(meleeSet, sets.buff.Souleater)
    end
    --meleeSet = set_combine(meleeSet, select_earring())
    return meleeSet
end

-------------------------------------------------------------------------------------------------------------------
-- General hooks for other events.
-------------------------------------------------------------------------------------------------------------------

-- Called when the player's status changes.
function job_status_change(newStatus, oldStatus, eventArgs)
    if newStatus == "Engaged" then
        --if state.Buff['Last Resort'] then
        --    send_command('@wait 1.0;cancel hasso')
        --end
        -- handle weapon sets
        if gsList:contains(player.equipment.main) then
            state.CombatWeapon:set("GreatSword")
        elseif player.equipment.main == 'Apocalypse' then
            state.CombatWeapon:set('Apocalypse')
        elseif player.equipment.main == 'Ragnarok' then
            state.CombatWeapon:set('Ragnarok')
        else -- use regular set, which caters to Liberator
            state.CombatWeapon:reset()
        end
        --elseif newStatus == 'Idle' then
        --    determine_idle_group()
    end
end

-- Called when a player gains or loses a buff.
-- buff == buff gained or lost
-- gain == true if the buff was gained, false if it was lost.
function job_buff_change(buff, gain)

    if state.Buff[buff] ~= nil then
        handle_equipping_gear(player.status)
    end

    if S{'haste', 'march', 'embrava', 'geo-haste', 'indi-haste'}:contains(buff:lower()) and gain then
        if (buffactive['Last Resort'] or (buffactive.hasso and (state.ApocHaste.value and buffactive['Aftermath']))) then
            if (buffactive.embrava or buffactive.haste) and buffactive.march then
                state.CombatForm:set("Haste")
                if not midaction() then
                    handle_equipping_gear(player.status)
                end
            end
        else
            if state.CombatForm.current ~= 'DW' and state.CombatForm.current ~= 'SW' then
                state.CombatForm:reset()
            end
            if not midaction() then
                handle_equipping_gear(player.status)
            end
        end
    end
    -- Drain II HP Boost. Set SE to stay on.
    if buff == "Max HP Boost" and state.SouleaterMode.value then
        if gain or buffactive['Max HP Boost'] then
            state.SouleaterMode:set(false)
        else
            state.SouleaterMode:set(true)
        end
    end
    -- Make sure SE stays on for BW
    if buff == 'Blood Weapon' and state.SouleaterMode.value then
        if gain or buffactive['Blood Weapon'] then
            state.SouleaterMode:set(false)
        else
            state.SouleaterMode:set(true)
        end
    end
    -- AM custom groups
    if buff:startswith('Aftermath') then
        if player.equipment.main == 'Liberator' then
            classes.CustomMeleeGroups:clear()

            if (buff == "Aftermath: Lv.3" and gain) or buffactive['Aftermath: Lv.3'] then
                classes.CustomMeleeGroups:append('AM3')
                add_to_chat(8, '-------------AM3 UP-------------')
            end

            if not midaction() then
                handle_equipping_gear(player.status)
            end
        else
            classes.CustomMeleeGroups:clear()

            if buff == "Aftermath" and gain or buffactive.Aftermath then
                classes.CustomMeleeGroups:append('AM')
            end

            if not midaction() then
                handle_equipping_gear(player.status)
            end
        end
    end
    
    if  buff == "Samurai Roll" then
        classes.CustomRangedGroups:clear()
        if (buff == "Samurai Roll" and gain) or buffactive['Samurai Roll'] then
            classes.CustomRangedGroups:append('SamRoll')
        end
       
    end

    --if buff == "Last Resort" then
    --    if gain then
    --        send_command('@wait 1.0;cancel hasso')
    --    else
    --        if not midaction() then
    --            send_command('@wait 1.0;input /ja "Hasso" <me>')
    --        end
    --    end
    --end
end


-------------------------------------------------------------------------------------------------------------------
-- User code that supplements self-commands.
-------------------------------------------------------------------------------------------------------------------

-- Called by the 'update' self-command, for common needs.
-- Set eventArgs.handled to true if we don't want automatic equipping of gear.
function job_update(cmdParams, eventArgs)

    war_sj = player.sub_job == 'WAR' or false
    get_combat_form()
    get_combat_weapon()
    update_melee_groups()

end

function get_custom_wsmode(spell, spellMap, default_wsmode)
    if state.OffenseMode.current == 'Mid' then
        if buffactive['Aftermath: Lv.3'] then
            return 'AM3Mid'
        end
    elseif state.OffenseMode.current == 'Acc' then
        if buffactive['Aftermath: Lv.3'] then
            return 'AM3Acc'
        end
    else
        if buffactive['Aftermath: Lv.3'] then
            return 'AM3'
        end
    end
end
-------------------------------------------------------------------------------------------------------------------
-- Utility functions specific to this job.
-------------------------------------------------------------------------------------------------------------------
function get_combat_form()

    if S{'NIN', 'DNC'}:contains(player.sub_job) and drk_sub_weapons:contains(player.equipment.sub) then
        state.CombatForm:set("DW")
    elseif player.equipment.sub == '' or shields:contains(player.equipment.sub) then
        state.CombatForm:set("SW")
    elseif (buffactive['Last Resort'] or (buffactive.hasso and (state.ApocHaste.value and buffactive['Aftermath']))) then
        if (buffactive.embrava or buffactive.haste) and buffactive.march then
            add_to_chat(8, '-------------Delay Capped-------------')
            state.CombatForm:set("Haste")
        else
            state.CombatForm:reset()
        end
    else
        state.CombatForm:reset()
    end
end

function get_combat_weapon()
    if gsList:contains(player.equipment.main) then
        state.CombatWeapon:set("GreatSword")
    elseif player.equipment.main == 'Apocalypse' then
        state.CombatWeapon:set('Apocalypse')
    else -- use regular set, which caters to Liberator
        state.CombatWeapon:reset()
    end
end

function aw_custom_aftermath_timers_precast(spell)
    if spell.type == 'WeaponSkill' then
        info.aftermath = {}

        local mythic_ws = "Insurgency"

        info.aftermath.weaponskill = mythic_ws
        info.aftermath.duration = 0

        info.aftermath.level = math.floor(player.tp / 1000)
        if info.aftermath.level == 0 then
            info.aftermath.level = 1
        end

        if spell.english == mythic_ws and player.equipment.main == 'Liberator' then
            -- nothing can overwrite lvl 3
            if buffactive['Aftermath: Lv.3'] then
                return
            end
            -- only lvl 3 can overwrite lvl 2
            if info.aftermath.level ~= 3 and buffactive['Aftermath: Lv.2'] then
                return
            end

            if info.aftermath.level == 1 then
                info.aftermath.duration = 90
            elseif info.aftermath.level == 2 then
                info.aftermath.duration = 120
            else
                info.aftermath.duration = 180
            end
        end
    end
end

-- Call from job_aftercast() to create the custom aftermath timer.
function aw_custom_aftermath_timers_aftercast(spell)
    if not spell.interrupted and spell.type == 'WeaponSkill' and
        info.aftermath and info.aftermath.weaponskill == spell.english and info.aftermath.duration > 0 then

        local aftermath_name = 'Aftermath: Lv.'..tostring(info.aftermath.level)
        send_command('timers d "Aftermath: Lv.1"')
        send_command('timers d "Aftermath: Lv.2"')
        send_command('timers d "Aftermath: Lv.3"')
        send_command('timers c "'..aftermath_name..'" '..tostring(info.aftermath.duration)..' down abilities/aftermath'..tostring(info.aftermath.level)..'.png')

        info.aftermath = {}
    end
end

function display_current_job_state(eventArgs)
    local msg = 'DRK暗'

	msg = msg .. ': '
	msg = msg .. '[Offense: '..state.OffenseMode.current..']'
	msg = msg .. ' '

    if state.SouleaterMode.value then
        msg = msg .. '[Souleater: Auto Cancel]'
    end
	msg = msg .. ' '
    if state.LastResortMode.value then
        msg = msg .. '[LR Defense]'
    end
	msg = msg .. ' '
    if state.CombatForm.current == 'Haste' then
        msg = msg .. 'High Haste'
    end
	msg = msg .. ' '
    if state.DefenseMode.value ~= 'None' then
        local defMode = state[state.DefenseMode.value ..'DefenseMode'].current
		msg = msg .. '['..state.DefenseMode.value .. ']'
    end
	
    add_to_chat(060, msg)
    eventArgs.handled = true
end

-- Set eventArgs.handled to true if we don't want the automatic display to be run.
-- Handle notifications of general user state change.
function job_state_change(stateField, newValue, oldValue)
end

-- Creating a custom spellMap, since Mote capitalized absorbs incorrectly
function job_get_spell_map(spell, default_spell_map)
    if spell.skill == 'Dark Magic' and absorbs:contains(spell.english) then
        return 'Absorb'
    end
    if spell.type == 'Trust' then
        return 'Trust'
    end
end

function select_earring()
    if spell.type == 'WeaponSkill' then
        if spell.english == 'Resolution' then
            if world.time >= (17*60) or world.time <= (7*60) then
                equip(sets.Lugra)
            else
                equip{sets.Brutal}
            end
		end
	end
end

function job_self_command(cmdParams, eventArgs)
	command = cmdParams[1]:lower()
	if command == 'warpring' then
		equip({left_ring="Warp Ring"})
		send_command('gs disable left_ring;wait 10;input /item "Warp Ring" <me>;wait 1;input /item "Warp Ring" <me>;wait 1;input /item "Warp Ring" <me>;wait 10;gs enable left_ring')
	elseif command == 'demring' then
		equip({left_ring="Dimensional Ring (Dem)"})
		send_command('gs disable left_ring;wait 10;input /item "Dimensional Ring (Dem)" <me>;wait 1;input /item "Dimensional Ring (Dem)" <me>;wait 10;gs enable left_ring')
	end
	--if command=='mainweapon' then
	--	enable('main','sub')
	--	mainswap=1
	--	send_command('gs c cycle mainweapon')
	--end
	command2 = cmdParams[2]
end

function update_melee_groups()
    classes.CustomMeleeGroups:clear()
    -- mythic AM	
    if player.equipment.main == 'Liberator' then
        if buffactive['Aftermath: Lv.3'] then
            classes.CustomMeleeGroups:append('AM3')
        end
    else
        -- relic AM
        if buffactive['Aftermath'] then
            classes.CustomMeleeGroups:append('AM')
        end
        if buffactive['Samurai Roll'] then
            classes.CustomRangedGroups:append('SamRoll')
        end
    end
end

function select_default_macro_book()
    if player.sub_job == 'DNC' then
        set_macro_page(6, 2)
    elseif player.sub_job == 'SAM' then
        set_macro_page(7, 4)
    else
        set_macro_page(8, 4)
    end
end
