function get_sets()
	-- Load and initialize the include file.
    mote_include_version = 2
	include('Mote-Include.lua')
	include('organizer-lib')
end

function job_setup()
    get_combat_form()
    --get_combat_weapon()
    update_melee_groups()
	send_command('gs enable all')
    state.CapacityMode = M(false, 'Capacity Point Mantle')
    state.YoichiAM = M(false, 'Cancel Yoichi AM Mode')
    -- list of weaponskills that make better use of otomi helm in low acc situations
    wsList = S{'Tachi: Fudo', 'Tachi: Shoha'}
    gear.RAarrow = {name="Eminent Arrow"}
    LugraWSList = S{'Tachi: Fudo', 'Tachi: Shoha', 'Namas Arrow'}
    state.Buff.Sekkanoki = buffactive.sekkanoki or false
    state.Buff.Sengikori = buffactive.sengikori or false
    state.Buff['Third Eye'] = buffactive['Third Eye'] or false
    state.Buff['Meikyo Shisui'] = buffactive['Meikyo Shisui'] or false
	state.mainweapon = M{['description'] = 'Main Weapon'}
	state.mainweapon:options('Dojikiri','Soboro')
end

function user_setup()
    state.OffenseMode:options('Normal','Mid','Acc')
    state.HybridMode:options('Normal','PDT','Reraise')
    state.WeaponskillMode:options('Normal','Mid','Acc')
    state.IdleMode:options('Normal')
    state.RestingMode:options('Normal')
    state.PhysicalDefenseMode:options('PDT', 'Reraise')
    state.MagicalDefenseMode:options('MDT')
    
	send_command('bind ^f1 ja ThirdEye') --MX1--
	send_command('bind ^f2 ja Meditate') --MX2--
	send_command('bind ^f3 ja Hagakure') --MX3--
	send_command('bind ^f4 ja Sengikori') --MX4--
	send_command('bind ^f5 ja Sekkanoki') --MX5--
	send_command('bind ^f6 ws Tachi:Rana;input /echo Next Weapon Skill || Tachi: Shoha') --MX6--
	send_command('bind ^f7 ws Tachi:Shoha;input /echo Next Weapon Skill || Tachi: Fudo') --MX7--
	send_command('bind ^f8 ws Tachi:Fudo;input /echo Next Weapon Skill || Tachi: Kasha') --MX8--
	send_command('bind ^f9 ws Tachi:Kasha;input /echo Next Weapon Skill || (L)Tachi: Shoha (D)Tachi: Rana') --MX9--
	send_command('bind ^f10 ws Tachi: Jinpu') --MX10--
	
	send_command('bind !f1 gs c cycle mainweapon') --M1--
	send_command('bind !f2 input //warcry;wait1;//berserk;wait 1;//aggressor') --M2--
	send_command('bind !f3 ja Shikikoyo stpc') --M3--
	send_command('bind ^!f4 ja Konzen-ittai') --M4--
	send_command('bind !f5 ja Hasso') --M5--
	send_command('bind !f6 ja Seigan') --M6--
	send_command('bind !f7') --M7--
	send_command('bind !f8') --M8--
	send_command('bind !f9') --M9--
	send_command('bind !f10') --M10--
	send_command('bind !f11 input /kingofhearts;wait 5;/arciela;wait 5;/qultada;wait 5;/selh\'teus;wait 5;/apururu(uc)') --M11--
	send_command('bind !f12 gs c warpring') --M12--
    
    select_default_macro_book()
	set_lockstyle()
end

function file_unload()
	send_command('unbind ^f1')
	send_command('unbind ^f2')
	send_command('unbind ^f3')
	send_command('unbind ^f4')
	send_command('unbind ^f5')
	send_command('unbind ^f6')
	send_command('unbind ^f7')
	send_command('unbind ^f8')
	send_command('unbind ^f9')
	send_command('unbind ^f10')
	
	send_command('unbind !f1')
	send_command('unbind !f2')
	send_command('unbind !f3')
	--send_command('unbind !f4')
	send_command('unbind !f5')
	send_command('unbind !f6')
	send_command('unbind !f7')
	send_command('unbind !f8')
	send_command('unbind !f9')
	send_command('unbind !f10')
	send_command('unbind !f11')
	send_command('unbind !f12')
end
--[[
-- SC's
Rana > Shoha > Fudo > Kasha > Shoha > Fudo - light
Rana > Shoha > Fudo > Kasha > Rana > Fudo - dark

Kasha > Shoha > Fudo
Fudo > Kasha > Shoha > fudo
Shoha > Fudo > Kasha > Shoha > Fudo

--]]
function init_gear_sets()
	------------------------------------------------------------------------------------------------
	------------------------------------ Smertrios's Cape ------------------------------------------
	------------------------------------------------------------------------------------------------
    
	Smertrio = {}
	Smertrio.TP = { name="Smertrios's Mantle", augments={'DEX+20','Accuracy+20 Attack+20','"Dbl.Atk."+10',}}
	Smertrio.WS = { name="Smertrios's Mantle", augments={'STR+20','Accuracy+20 Attack+20','STR+10','Weapon skill damage +10%',}}
	
	------------------------------------------------------------------------------------------------
	---------------------------------- Job Abilities Sets ------------------------------------------
	------------------------------------------------------------------------------------------------
	
    sets.precast.JA.Meditate = {head="Wakido Kabuto +1",hands="Sakonji Kote +1",back="Smertrios's Mantle"}
    --sets.precast.JA.Seigan = {head="Unkai Kabuto +2"}
    sets.precast.JA['Warding Circle'] = {head="Wakido Kabuto +1"}
    sets.precast.JA['Third Eye'] = {legs="Sakonji Haidate +1"}	
    sets.precast.JA['Blade Bash'] = {hands="Sakonji Kote +1"}
    sets.precast.Waltz = {
		ammo="Charitoni Sling",
		head="Genmei Kabuto",
		neck="Dualism Collar +1",
		ear1="Genmei Earring",
		ear2="Odnowa Earring +1",
		body="Emet Harness +1",
		hands="Macabre Gauntlets +1",
		ring1="Supershear Ring",
		ring2="Regal Ring",
		back="Solemnity Cape",
		waist="Aristo Belt",
		legs="Hizamaru Hizayoroi +2",
		feet="Amm Greaves"}
    sets.precast.Waltz['Healing Waltz'] = {}
    
	------------------------------------------------------------------------------------------------
	---------------------------------------- Utility Sets ------------------------------------------
	------------------------------------------------------------------------------------------------
	
	sets.mainweapon = {}
	sets.mainweapon.Dojikiri = {main="Dojikiri Yasutsuna",sub="Utu Grip"}
	sets.mainweapon.Soboro = {main="Soboro Sukehiro",sub="Utu Grip"}
	
    sets.CapacityMantle  = {back="Mecistopins Mantle"}
    --sets.Berserker       = { neck="Berserker's Torque" }
    sets.WSDayBonus      = {head="Gavialis Helm"}
    sets.LugraMoonshade  = {ear1="Lugra Earring +1", ear2="Moonshade Earring"}
    sets.BrutalMoonshade = {ear1="Brutal Earring", ear2="Moonshade Earring"}
    sets.LugraFlame      = {ear1="Lugra Earring +1", ear2="Flame Pearl"}
    sets.FlameFlame      = {ear1="Flame Pearl", ear2="Flame Pearl"}
	
	------------------------------------------------------------------------------------------------
	---------------------------------------- Precast Sets ------------------------------------------
	------------------------------------------------------------------------------------------------
	
    sets.precast.FC = {
		ammo="Sapience Orb", --2
		neck="Baetyl Pendant", --4
		ear1="Loquacious Earring", --2
		ear2="Etiolation Earring", --1
		body="Dread Jupon", --7
		hands="Leyline Gloves", --8
		ring1="Kishar Ring", --4
		ring2="Weatherspoon ring"} --5
       
	------------------------------------------------------------------------------------------------
	------------------------------------ Weaponskill Sets ------------------------------------------
	------------------------------------------------------------------------------------------------
	
    sets.precast.WS = {neck="Fotia Gorget",waist="Fotia Belt",}
    sets.precast.WS.Mid = set_combine(sets.precast.WS, {})
    sets.precast.WS.Acc = set_combine(sets.precast.WS.Mid, {})
    
    sets.precast.WS['Namas Arrow'] = {}
    sets.precast.WS['Namas Arrow'].Mid = set_combine(sets.precast.WS['Namas Arrow'], {})
    sets.precast.WS['Namas Arrow'].Acc = set_combine(sets.precast.WS['Namas Arrow'].Mid, { })
    
    sets.precast.WS['Apex Arrow'] = set_combine(sets.precast.WS['Namas Arrow'], {})
    sets.precast.WS['Apex Arrow'].Mid = sets.precast.WS['Apex Arrow']
    sets.precast.WS['Apex Arrow'].Acc = set_combine(sets.precast.WS['Apex Arrow'], {})
    
	set.Fudo = {
		ammo="Knobkierrie",
		head=ValorousHead.WS,
		neck="Caro Necklace",
		ear1="Ishvara Earring",
		ear2="Moonshade Earring",
		body=ValorousBody.WS,
		hands=ValorousHands.WS,
		ring1="Ifrit Ring +1",
		ring2="Regal Ring",
		back=Smertrio.WS,
		waist="Prosilio Belt +1",
		legs="Hizamaru Hizayoroi +2",
		feet="Flamma Gambieras +1"}
    sets.precast.WS['Tachi: Fudo'] = set.Fudo
    sets.precast.WS['Tachi: Fudo'].Mid = set_combine(set.Fudo, {})
    sets.precast.WS['Tachi: Fudo'].Acc = set_combine(set.Fudo, {})
		
	set.Kasha = {
		ammo="Knobkierrie",
		head=ValorousHead.WS,
		neck="Caro Necklace",
		ear1="Brutal Earring",
		ear2="Moonshade Earring",
		body=ValorousBody.WS,
		hands=ValorousHands.WS,
		ring1="Ifrit Ring +1",
		ring2="Regal Ring",
		back=Smertrio.WS,
		waist="Prosilio Belt +1",
		legs="Hizamaru Hizayoroi +2",
		feet="Flamma Gambieras +1"}
    sets.precast.WS['Tachi: Kasha'] = set.Fudo
    sets.precast.WS['Tachi: Kasha'].Mid = set_combine(set.Fudo, {})
    sets.precast.WS['Tachi: Kasha'].Acc = set_combine(set.Fudo, {})
	
	sets.Shoha = {
		ammo="Ginsen",
		head=ValorousHead.WS,
		neck="Caro Necklace",
		ear1="Brutal Earring",
		ear2="Moonshade Earring",
		body=ValorousBody.WS,
		hands=ValorousHands.WS,
		ring1="Ifrit Ring +1",
		ring2="Regal Ring",
		back=Smertrio.WS,
		waist="Windbuffet Belt +1",
		legs="Hizamaru Hizayoroi +2",
		feet="Flamma Gambieras +1"}
    sets.precast.WS['Tachi: Shoha'] = sets.Shoha
    sets.precast.WS['Tachi: Shoha'].Mid = set_combine(sets.Shoha, {})
    sets.precast.WS['Tachi: Shoha'].Acc = set_combine(sets.precast.WS['Tachi: Shoha'].Mid, {})
    
	sets.Rana = {
		ammo="Ginsen",
		head=ValorousHead.WS,
		neck="Caro Necklace",
		ear1="Brutal Earring",
		ear2="Moonshade Earring",
		body=ValorousBody.WS,
		hands=ValorousHands.WS,
		ring1="Ifrit Ring +1",
		ring2="Regal Ring",
		back=Smertrio.WS,
		waist="Windbuffet Belt +1",
		legs="Hizamaru Hizayoroi +2",
		feet="Flamma Gambieras +1"}
    sets.precast.WS['Tachi: Rana'] = sets.Rana
    sets.precast.WS['Tachi: Rana'].Mid = set_combine(sets.Rana, {})
    sets.precast.WS['Tachi: Rana'].Acc = set_combine(sets.precast.WS['Tachi: Rana'].Mid, {})

    sets.precast.WS['Tachi: Ageha'] = {}
	
    sets.precast.WS['Tachi: Jinpu'] = sets.precast.WS['Tachi: Ageha']
    
    sets.precast.WS['Tachi: Gekko'] = set_combine(sets.precast.WS, {neck="Aqua Gorget",waist="Windbuffet Belt +1"})
    
    sets.precast.WS['Tachi: Yukikaze'] = set_combine(sets.precast.WS, {neck="Breeze Gorget",waist="Windbuffet Belt +1"})
    
    sets.precast.WS['Tachi: Jinpu'] = set_combine(sets.precast.WS, {neck="Shadow Gorget",waist="Soil Belt"})
    
	------------------------------------------------------------------------------------------------
	---------------------------------------- Midcast Sets ------------------------------------------
	------------------------------------------------------------------------------------------------
	
    sets.midcast.FastRecast = {}

	------------------------------------------------------------------------------------------------
	----------------------------------------- Idle Sets --------------------------------------------
	------------------------------------------------------------------------------------------------
    sets.resting = {}
    sets.idle.Town = {
		ammo="Staunch Tathlum",
		head="Genmei Kabuto",
		neck="Loricate Torque +1",
		ear1="Genmei Earring",
		ear2="Etiolation Earring",
		body="Emet Harness +1",
		hands="Macabre Gauntlets +1",
		ring1="Gelatinous Ring +1",
		ring2="Defending Ring",
		back="Solemnity Cape",
		waist="Flume Belt",
		legs="Arjuna Breeches",
		feet="Danzo sune-ate"}
    sets.idle.Town.Adoulin = set_combine(sets.idle.Town, {})
    sets.idle.Field = set_combine(sets.idle.Town, {})
    sets.idle.Regen = set_combine(sets.idle.Town, {})
    sets.idle.Weak = set_combine(sets.idle.Field, {})
    sets.idle.Yoichi = set_combine(sets.idle.Field, {})
    
	------------------------------------------------------------------------------------------------
	---------------------------------------- Defense Sets ------------------------------------------
	------------------------------------------------------------------------------------------------
	
    sets.defense.PDT = {
		ammo="Staunch Tathlum",
		head="Genmei Kabuto",
		neck="Loricate Torque +1",
		ear1="Genmei Earring",
		ear2="Etiolation Earring",
		body="Emet Harness +1",
		hands="Macabre Gauntlets +1",
		ring1="Gelatinous Ring +1",
		ring2="Defending Ring",
		back="Solemnity Cape",
		waist="Flume Belt",
		legs="Arjuna Breeches",
		feet="Amm Greaves"}
    sets.defense.Reraise = set_combine(sets.defense.PDT, {head="Twilight Helm",body="Twilight Mail"})
    sets.defense.MDT = set_combine(sets.defense.PDT, {})
    sets.Kiting = {feet="Danzo Sune-ate"}
    sets.Reraise = {head="Twilight Helm",body="Twilight Mail"}
    
	------------------------------------------------------------------------------------------------
	---------------------------------------- Engaged Sets ------------------------------------------
	------------------------------------------------------------------------------------------------
	
    -- Variations for TP weapon and (optional) offense/defense modes.  Code will fall back on previous
    -- sets if more refined versions aren't defined.
    -- If you create a set with both offense and defense modes, the offense mode should be first.
    -- EG: sets.engaged.Dagger.Accuracy.Evasion
    
    -- I generally use Anahera outside of Adoulin areas, so this set aims for 47 STP + 5 from Anahera (52 total)
    -- Note, this set assumes use of Cibitshavore (hence the arrow as ammo)
    sets.engaged = {
		ammo="Ginsen",
		head="Flamma Zucchetto +1",
		--neck="Ganesha's Mala",
		neck="Moonbeam Nodowa",
		ear1="Brutal Earring",
		ear2="Telos Earring",
		body=ValorousBody.STP,
		hands="Wakido Kote +2",
		ring1="Hetairoi Ring",
		ring2="Petrov Ring",
		back=Smertrio.TP,
		waist="Ioskeha Belt",
		legs="Ryuo Hakama",
		feet="Flamma Gambieras +1"}
    sets.engaged.Mid = set_combine(sets.engaged, {
		--neck="Moonbeam Nodowa",
		ear1="Zennaroi Earring",
		ring2="Regal Ring"})
    sets.engaged.Acc = set_combine(sets.engaged.Mid, {})
    
    sets.engaged.Yoichi = set_combine(sets.engaged, {})
    sets.engaged.Yoichi.Mid = set_combine(sets.engaged.Yoichi, {})
    sets.engaged.Yoichi.Acc = set_combine(sets.engaged.Yoichi.Mid, {})
    
    sets.engaged.PDT = set_combine(sets.engaged, {})
    sets.engaged.Yoichi.PDT = set_combine(sets.engaged.PDT,  {})
    sets.engaged.Acc.PDT = set_combine(sets.engaged.Acc, {})
    sets.engaged.Reraise = set_combine(sets.engaged.PDT, {head="Twilight Helm", body="Twilight Mail",})
    sets.engaged.Reraise.Yoichi = set_combine(sets.engaged.Reraise, {})
    sets.engaged.Acc.Reraise = set_combine(sets.engaged.Reraise, {})
    sets.engaged.Acc.Reraise.Yoichi = set_combine(sets.engaged.Acc.Reraise, {})

    sets.engaged.Adoulin = sets.engaged
    sets.engaged.Adoulin.Mid = set_combine(sets.engaged.Adoulin, {})
    sets.engaged.Adoulin.Acc = set_combine(sets.engaged.Adoulin.Mid, {})
    sets.engaged.Adoulin.PDT = set_combine(sets.engaged.Adoulin, {})
    sets.engaged.Adoulin.Acc.PDT = set_combine(sets.engaged.Adoulin.Acc, {})

    sets.engaged.Adoulin.Yoichi = {}
    sets.engaged.Adoulin.Yoichi.Mid = set_combine(sets.engaged.Adoulin.Yoichi, {})
    sets.engaged.Adoulin.Yoichi.Acc = set_combine(sets.engaged.Adoulin.Yoichi.Mid, {})
    sets.engaged.Adoulin.Yoichi.PDT = set_combine(sets.engaged.Adoulin.PDT, {})
    sets.engaged.Adoulin.Yoichi.Acc.PDT = set_combine(sets.engaged.Adoulin.Yoichi.Acc, {})
    
    sets.engaged.Adoulin.Reraise = set_combine(sets.engaged.Adoulin, {head="Twilight Helm",body="Twilight Mail",})
    sets.engaged.Adoulin.Yoichi.Reraise = set_combine(sets.engaged.Adoulin.Reraise, {})
    sets.engaged.Adoulin.Acc.Reraise = set_combine(sets.engaged.Adoulin.Acc, {head="Twilight Helm",body="Twilight Mail"})
    sets.engaged.Adoulin.Yoichi.Acc.Reraise = set_combine(sets.engaged.Adoulin.Acc.Reraise, {})
    
    sets.engaged.Amanomurakumo = set_combine(sets.engaged, {})
    sets.engaged.Amanomurakumo.AM = set_combine(sets.engaged, {})
    
    sets.engaged.Adoulin.Amanomurakumo = set_combine(sets.engaged.Adoulin, {})
    sets.engaged.Adoulin.Amanomurakumo.AM = set_combine(sets.engaged.Adoulin, {})
    
    sets.engaged.Kogarasumaru = set_combine(sets.engaged, {})
    sets.engaged.Kogarasumaru.AM = set_combine(sets.engaged, {})
    sets.engaged.Kogarasumaru.AM3 = set_combine(sets.engaged, {})
    
    sets.engaged.Adoulin.Kogarasumaru = set_combine(sets.engaged.Adoulin, {})
    sets.engaged.Adoulin.Kogarasumaru.AM = set_combine(sets.engaged.Adoulin, {})
    sets.engaged.Adoulin.Kogarasumaru.AM3 = set_combine(sets.engaged.Adoulin, {})
    
    sets.buff.Sekkanoki = {hands="Unkai Kote +2"}
    sets.buff.Sengikori = {}
    sets.buff['Meikyo Shisui'] = {feet="Sakonji Sune-ate +1"}
    
    sets.thirdeye = {head="Unkai Kabuto +2", legs="Sakonji Haidate"}
    sets.seigan = {hands="Otronif Gloves +1"}
    sets.bow = {ammo=gear.RAarrow}
end

function job_pretarget(spell, action, spellMap, eventArgs)
	if spell.type:lower() == 'weaponskill' then
		-- Change any GK weaponskills to polearm weaponskill if we're using a polearm.
		if player.equipment.main =='Nativus Halberd' or player.equipment.main =='Quint Spear' then
			if spell.english:startswith("Tachi:") then
				send_command('@input /ws "Stardiver" '..spell.target.raw)
				eventArgs.cancel = true
			end
		end
	end
    if state.Buff[spell.english] ~= nil then
        state.Buff[spell.english] = true
    end
end

function job_precast(spell, action, spellMap, eventArgs)
    --if spell.english == 'Third Eye' and not buffactive.Seigan then
    --    cancel_spell()
    --    send_command('@wait 0.5;input /ja Seigan <me>')
    --    send_command('@wait 1;input /ja "Third Eye" <me>')
    --end
end

-- Run after the default precast() is done.
-- eventArgs is the same one used in job_precast, in case information needs to be persisted.
function job_post_precast(spell, action, spellMap, eventArgs)
	if spell.type:lower() == 'weaponskill' then
		if state.Buff.Sekkanoki then
			equip(sets.buff.Sekkanoki)
		end
        if state.CapacityMode.value then
            equip(sets.CapacityMantle)
        end
        if is_sc_element_today(spell) then
            if state.OffenseMode.current == 'Normal' and wsList:contains(spell.english) then
                -- do nothing
            else
                equip(sets.WSDayBonus)
            end
        end
        if LugraWSList:contains(spell.english) then
            if world.time >= (17*60) or world.time <= (7*60) then
                if spell.english:lower() == 'namas arrow' then
                    equip(sets.LugraFlame)
                else
                    equip(sets.LugraMoonshade)
                end
            else
                if spell.english:lower() == 'namas arrow' then
                    equip(sets.FlameFlame)
                else
                    equip(sets.BrutalMoonshade)
                end
            end
        end
		if state.Buff['Meikyo Shisui'] then
			equip(sets.buff['Meikyo Shisui'])
		end
	end
    if spell.english == "Seigan" then
        -- Third Eye gearset is only called if we're in PDT mode
        if state.HybridMode.value == 'PDT' or state.PhysicalDefenseMode.value == 'PDT' then
            equip(sets.thirdeye)
        else
            equip(sets.seigan)
        end
    end
    if spell.name == 'Spectral Jig' and buffactive.sneak then
            -- If sneak is active when using, cancel before completion
            send_command('cancel 71')
    end
    update_am_type(spell)
end

-- Set eventArgs.handled to true if we don't want any automatic gear equipping to be done.
function job_midcast(spell, action, spellMap, eventArgs)
	if spell.action_type == 'Magic' then
		equip(sets.midcast.FastRecast)
	end
end

-- Run after the default midcast() is done.
-- eventArgs is the same one used in job_midcast, in case information needs to be persisted.
function job_post_midcast(spell, action, spellMap, eventArgs)
	-- Effectively lock these items in place.
	if state.HybridMode.value == 'Reraise' or
    (state.HybridMode.value == 'Physical' and state.PhysicalDefenseMode.value == 'Reraise') then
		equip(sets.Reraise)
	end
    if state.Buff['Seigan'] then
        if state.DefenseMode.value == 'PDT' then
            equip(sets.thirdeye)
        else
            equip(sets.seigan)
        end
    end
end

-- Set eventArgs.handled to true if we don't want any automatic gear equipping to be done.
function job_aftercast(spell, action, spellMap, eventArgs)
	if state.Buff[spell.english] ~= nil then
		state.Buff[spell.english] = not spell.interrupted or buffactive[spell.english]
	end
end

-- Modify the default idle set after it was constructed.
function customize_idle_set(idleSet)
    --if player.hpp < 90 then
    --    idleSet = set_combine(idleSet, sets.idle.Regen)
    --end
	if mainswap then
		mainswap=0
		enable('main','sub')
		equip(sets.mainweapon[state.mainweapon.value])
		disable('main','sub')
	end
	return idleSet
end

mainswap = 1
function customize_melee_set(meleeSet)
    if state.Buff['Seigan'] then
        if state.DefenseMode.value == 'PDT' then
    	    meleeSet = set_combine(meleeSet, sets.thirdeye)
        else
            meleeSet = set_combine(meleeSet, sets.seigan)
        end
    end
    if state.CapacityMode.value then
        meleeSet = set_combine(meleeSet, sets.CapacityMantle)
    end
    if player.equipment.range == 'Yoichinoyumi' then
        meleeSet = set_combine(meleeSet, sets.bow)
    end
	if mainswap then
		mainswap=0
		enable('main','sub')
		equip(sets.mainweapon[state.mainweapon.value])
		disable('main','sub')
	end
    return meleeSet
end

function job_status_change(newStatus, oldStatus, eventArgs)
    if newStatus == 'Engaged' then
        if player.inventory['Eminent Arrow'] then
            gear.RAarrow.name = 'Eminent Arrow'
        elseif player.inventory['Tulfaire Arrow'] then
            gear.RAarrow.name = 'Tulfaire Arrow'
        elseif player.equipment.ammo == 'empty' then
            add_to_chat(122, 'No more Arrows!')
		update_combat_form()
        end
    elseif newStatus == 'Idle' then
        determine_idle_group()
    end
end

function job_buff_change(buff, gain)
    if state.Buff[buff] ~= nil then
    	state.Buff[buff] = gain
        handle_equipping_gear(player.status)
    end
    if S{'aftermath'}:contains(buff:lower()) then
        classes.CustomMeleeGroups:clear()
       
        if player.equipment.main == 'Amanomurakumo' and state.YoichiAM.value then
            classes.CustomMeleeGroups:clear()
        elseif player.equipment.main == 'Kogarasumaru'  then
            if buff == "Aftermath: Lv.3" and gain or buffactive['Aftermath: Lv.3'] then
                classes.CustomMeleeGroups:append('AM3')
            end
        elseif buff == "Aftermath" and gain or buffactive.Aftermath then
            classes.CustomMeleeGroups:append('AM')
        end
    end
    if not midaction() then
        handle_equipping_gear(player.status)
    end
end

function job_self_command(cmdParams, eventArgs)
	command = cmdParams[1]:lower()
	if command == 'warpring' then
		equip({left_ring="Warp Ring"})
		send_command('gs disable left_ring;wait 10;input /item "Warp Ring" <me>;wait 1;input /item "Warp Ring" <me>;wait 1;input /item "Warp Ring" <me>;wait 10;gs enable left_ring')
	elseif command == 'demring' then
		equip({left_ring="Dimensional Ring (Dem)"})
		send_command('gs disable left_ring;wait 10;input /item "Dimensional Ring (Dem)" <me>;wait 1;input /item "Dimensional Ring (Dem)" <me>;wait 1;input /item "Dimensional Ring (Dem)" <me>;wait 10;gs enable left_ring')
	end
	if command=='mainweapon' then
		enable('main','sub')
		mainswap=1
		send_command('gs c cycle mainweapon')
	end
	command = cmdParams[1]:lower()
	command2 = cmdParams[2]
end

function job_update(cmdParams, eventArgs)
	get_combat_form()
    update_melee_groups()
    --get_combat_weapon()
end

-- Set eventArgs.handled to true if we don't want the automatic display to be run.
function display_current_job_state(eventArgs)
    local msg = 'SAM侍'

	msg = msg .. ': '
	msg = msg .. '[Weapon: '..state.mainweapon.current .. ']'
	msg = msg .. ' '
	msg = msg .. '[Offense: '..state.OffenseMode.current..']'
	msg = msg .. ' '
	msg = msg .. '[WS: '..state.WeaponskillMode.current.. ']'
	msg = msg .. ' '
    if state.DefenseMode.value ~= 'None' then
        local defMode = state[state.DefenseMode.value ..'DefenseMode'].current
        msg = msg .. '[Defense: '..state.DefenseMode.value..']'
    end
	
    add_to_chat(060, msg)
    eventArgs.handled = true
end

--function get_combat_weapon()
--    if player.equipment.range == 'Yoichinoyumi' then
--        if player.equipment.main == 'Amanomurakumo' then
--            state.CombatWeapon:set('AmanoYoichi')
--        else
--            state.CombatWeapon:set('Yoichi')
--        end
--    else
--        state.CombatWeapon:set(player.equipment.main)
--    end
--end
-- Handle zone specific rules
windower.register_event('Zone change', function(new,old)
    determine_idle_group()
end)

function determine_idle_group()
    classes.CustomIdleGroups:clear()
    if areas.Adoulin:contains(world.area) then
    	classes.CustomIdleGroups:append('Adoulin')
    end
end

function get_combat_form()
    if areas.Adoulin:contains(world.area) and buffactive.ionis then
    	state.CombatForm:set('Adoulin')
    else
        state.CombatForm:reset()
    end
end

function seigan_thirdeye_active()
    return state.Buff['Seigan'] or state.Buff['Third Eye']
end

function update_melee_groups()
    classes.CustomMeleeGroups:clear()

    if player.equipment.main == 'Amanomurakumo' and state.YoichiAM.value then
        -- prevents using Amano AM while overriding it with Yoichi AM
        classes.CustomMeleeGroups:clear()
    elseif player.equipment.main == 'Kogarasumaru' then
        if buffactive['Aftermath: Lv.3'] then
            classes.CustomMeleeGroups:append('AM3')
        end
    else
        if buffactive['Aftermath'] then
            classes.CustomMeleeGroups:append('AM')
        end
    end
end

-- call this in job_post_precast() 
function update_am_type(spell)
    if spell.type == 'WeaponSkill' and spell.skill == 'Archery' and spell.english == 'Namas Arrow' then
        if player.equipment.main == 'Amanomurakumo' then
            -- Yoichi AM overwrites Amano AM
            state.YoichiAM:set(true)
        end
    else
        state.YoichiAM:set(false)
    end
end

function select_default_macro_book()
    -- Default macro set/book
    if player.sub_job == 'WAR' then
    	set_macro_page(1, 12)
    elseif player.sub_job == 'DNC' then
    	set_macro_page(1, 12)
    else
    	set_macro_page(1, 12)
    end
end

function set_lockstyle()
	send_command('wait 2; input /lockstyleset 16')
end
